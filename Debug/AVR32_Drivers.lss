
AVR32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800084  00800084  00000d28  2**0
                  ALLOC
  3 .stab         00001a34  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ab  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2d 06 	call	0xc5a	; 0xc5a <main>
  8a:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setPortValue>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_setPortValue+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <GPIO_setPortValue+0x8>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	8a 83       	std	Y+2, r24	; 0x02
  a2:	6b 83       	std	Y+3, r22	; 0x03
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 83       	std	Y+1, r24	; 0x01
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	88 23       	and	r24, r24
  ac:	61 f0       	breq	.+24     	; 0xc6 <GPIO_setPortValue+0x34>
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	49 f0       	breq	.+18     	; 0xc6 <GPIO_setPortValue+0x34>
  b4:	8a 81       	ldd	r24, Y+2	; 0x02
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	31 f0       	breq	.+12     	; 0xc6 <GPIO_setPortValue+0x34>
  ba:	8a 81       	ldd	r24, Y+2	; 0x02
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	19 f0       	breq	.+6      	; 0xc6 <GPIO_setPortValue+0x34>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	33 c0       	rjmp	.+102    	; 0x12c <GPIO_setPortValue+0x9a>
  c6:	19 82       	std	Y+1, r1	; 0x01
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	3d 83       	std	Y+5, r19	; 0x05
  d0:	2c 83       	std	Y+4, r18	; 0x04
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	9d 81       	ldd	r25, Y+5	; 0x05
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 05       	cpc	r25, r1
  da:	d1 f0       	breq	.+52     	; 0x110 <GPIO_setPortValue+0x7e>
  dc:	2c 81       	ldd	r18, Y+4	; 0x04
  de:	3d 81       	ldd	r19, Y+5	; 0x05
  e0:	22 30       	cpi	r18, 0x02	; 2
  e2:	31 05       	cpc	r19, r1
  e4:	2c f4       	brge	.+10     	; 0xf0 <GPIO_setPortValue+0x5e>
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	9d 81       	ldd	r25, Y+5	; 0x05
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	61 f0       	breq	.+24     	; 0x106 <GPIO_setPortValue+0x74>
  ee:	1e c0       	rjmp	.+60     	; 0x12c <GPIO_setPortValue+0x9a>
  f0:	2c 81       	ldd	r18, Y+4	; 0x04
  f2:	3d 81       	ldd	r19, Y+5	; 0x05
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	31 05       	cpc	r19, r1
  f8:	81 f0       	breq	.+32     	; 0x11a <GPIO_setPortValue+0x88>
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	81 f0       	breq	.+32     	; 0x124 <GPIO_setPortValue+0x92>
 104:	13 c0       	rjmp	.+38     	; 0x12c <GPIO_setPortValue+0x9a>
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	80 83       	st	Z, r24
 10e:	0e c0       	rjmp	.+28     	; 0x12c <GPIO_setPortValue+0x9a>
 110:	e8 e3       	ldi	r30, 0x38	; 56
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	80 83       	st	Z, r24
 118:	09 c0       	rjmp	.+18     	; 0x12c <GPIO_setPortValue+0x9a>
 11a:	e5 e3       	ldi	r30, 0x35	; 53
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	80 83       	st	Z, r24
 122:	04 c0       	rjmp	.+8      	; 0x12c <GPIO_setPortValue+0x9a>
 124:	e2 e3       	ldi	r30, 0x32	; 50
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	80 83       	st	Z, r24
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <GPIO_setPinValue>:
    }
    return local_err;
}

Error_state GPIO_setPinValue(u8 portId, u8 PinId, u8 value)
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	28 97       	sbiw	r28, 0x08	; 8
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	8a 83       	std	Y+2, r24	; 0x02
 154:	6b 83       	std	Y+3, r22	; 0x03
 156:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	88 23       	and	r24, r24
 160:	61 f0       	breq	.+24     	; 0x17a <GPIO_setPinValue+0x3c>
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	49 f0       	breq	.+18     	; 0x17a <GPIO_setPinValue+0x3c>
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	31 f0       	breq	.+12     	; 0x17a <GPIO_setPinValue+0x3c>
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	19 f0       	breq	.+6      	; 0x17a <GPIO_setPinValue+0x3c>
    {
        local_err = Unvalid_Port;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	32 c1       	rjmp	.+612    	; 0x3de <GPIO_setPinValue+0x2a0>
    }
    else
    {
        if (PinId > MAX_PIN)
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	88 30       	cpi	r24, 0x08	; 8
 17e:	18 f0       	brcs	.+6      	; 0x186 <GPIO_setPinValue+0x48>
        {
            local_err = Unvalid_pin;
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	2c c1       	rjmp	.+600    	; 0x3de <GPIO_setPinValue+0x2a0>
        }
        else
        {
            local_err = Valid_pin;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	89 83       	std	Y+1, r24	; 0x01
            if (value == high_value)
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <GPIO_setPinValue+0x54>
 190:	92 c0       	rjmp	.+292    	; 0x2b6 <GPIO_setPinValue+0x178>
            {
                switch (portId)
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	38 87       	std	Y+8, r19	; 0x08
 19a:	2f 83       	std	Y+7, r18	; 0x07
 19c:	6f 81       	ldd	r22, Y+7	; 0x07
 19e:	78 85       	ldd	r23, Y+8	; 0x08
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	69 f1       	breq	.+90     	; 0x200 <GPIO_setPinValue+0xc2>
 1a6:	8f 81       	ldd	r24, Y+7	; 0x07
 1a8:	98 85       	ldd	r25, Y+8	; 0x08
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	91 05       	cpc	r25, r1
 1ae:	34 f4       	brge	.+12     	; 0x1bc <GPIO_setPinValue+0x7e>
 1b0:	2f 81       	ldd	r18, Y+7	; 0x07
 1b2:	38 85       	ldd	r19, Y+8	; 0x08
 1b4:	21 15       	cp	r18, r1
 1b6:	31 05       	cpc	r19, r1
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <GPIO_setPinValue+0x96>
 1ba:	64 c0       	rjmp	.+200    	; 0x284 <GPIO_setPinValue+0x146>
 1bc:	6f 81       	ldd	r22, Y+7	; 0x07
 1be:	78 85       	ldd	r23, Y+8	; 0x08
 1c0:	62 30       	cpi	r22, 0x02	; 2
 1c2:	71 05       	cpc	r23, r1
 1c4:	99 f1       	breq	.+102    	; 0x22c <GPIO_setPinValue+0xee>
 1c6:	8f 81       	ldd	r24, Y+7	; 0x07
 1c8:	98 85       	ldd	r25, Y+8	; 0x08
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	91 05       	cpc	r25, r1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <GPIO_setPinValue+0x94>
 1d0:	43 c0       	rjmp	.+134    	; 0x258 <GPIO_setPinValue+0x11a>
 1d2:	58 c0       	rjmp	.+176    	; 0x284 <GPIO_setPinValue+0x146>
                {
                case PORTA:
                    PORTA_Ptr = PORTA_Ptr | (value << PinId);
 1d4:	ab e3       	ldi	r26, 0x3B	; 59
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	eb e3       	ldi	r30, 0x3B	; 59
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <GPIO_setPinValue+0xb6>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <GPIO_setPinValue+0xb2>
 1f8:	cb 01       	movw	r24, r22
 1fa:	84 2b       	or	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	ef c0       	rjmp	.+478    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                case PORTB:
                    PORTB_Ptr = PORTB_Ptr | (value << PinId);
 200:	a8 e3       	ldi	r26, 0x38	; 56
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e8 e3       	ldi	r30, 0x38	; 56
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8c 81       	ldd	r24, Y+4	; 0x04
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	b9 01       	movw	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <GPIO_setPinValue+0xe2>
 21c:	66 0f       	add	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	8a 95       	dec	r24
 222:	e2 f7       	brpl	.-8      	; 0x21c <GPIO_setPinValue+0xde>
 224:	cb 01       	movw	r24, r22
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	d9 c0       	rjmp	.+434    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                case PORTC:
                    PORTC_Ptr = PORTC_Ptr | (value << PinId);
 22c:	a5 e3       	ldi	r26, 0x35	; 53
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e5 e3       	ldi	r30, 0x35	; 53
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8c 81       	ldd	r24, Y+4	; 0x04
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_setPinValue+0x10e>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_setPinValue+0x10a>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	8c 93       	st	X, r24
 256:	c3 c0       	rjmp	.+390    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                case PORTD:
                    PORTD_Ptr = PORTD_Ptr | (value << PinId);
 258:	a2 e3       	ldi	r26, 0x32	; 50
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	e2 e3       	ldi	r30, 0x32	; 50
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	48 2f       	mov	r20, r24
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	88 2f       	mov	r24, r24
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <GPIO_setPinValue+0x13a>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <GPIO_setPinValue+0x136>
 27c:	cb 01       	movw	r24, r22
 27e:	84 2b       	or	r24, r20
 280:	8c 93       	st	X, r24
 282:	ad c0       	rjmp	.+346    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                default:
                    PORTA_Ptr = PORTA_Ptr | 0x00;
 284:	ab e3       	ldi	r26, 0x3B	; 59
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	eb e3       	ldi	r30, 0x3B	; 59
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
 290:	ab e3       	ldi	r26, 0x3B	; 59
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	eb e3       	ldi	r30, 0x3B	; 59
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
 29c:	ab e3       	ldi	r26, 0x3B	; 59
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	eb e3       	ldi	r30, 0x3B	; 59
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	8c 93       	st	X, r24
                    PORTD_Ptr = PORTD_Ptr | 0x00;
 2a8:	a2 e3       	ldi	r26, 0x32	; 50
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	e2 e3       	ldi	r30, 0x32	; 50
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8c 93       	st	X, r24
 2b4:	94 c0       	rjmp	.+296    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                }
            }
            else if (value == low_value)
 2b6:	8c 81       	ldd	r24, Y+4	; 0x04
 2b8:	88 23       	and	r24, r24
 2ba:	09 f0       	breq	.+2      	; 0x2be <GPIO_setPinValue+0x180>
 2bc:	8e c0       	rjmp	.+284    	; 0x3da <GPIO_setPinValue+0x29c>
            {
                switch (portId)
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	3e 83       	std	Y+6, r19	; 0x06
 2c6:	2d 83       	std	Y+5, r18	; 0x05
 2c8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ca:	7e 81       	ldd	r23, Y+6	; 0x06
 2cc:	61 30       	cpi	r22, 0x01	; 1
 2ce:	71 05       	cpc	r23, r1
 2d0:	61 f1       	breq	.+88     	; 0x32a <GPIO_setPinValue+0x1ec>
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	91 05       	cpc	r25, r1
 2da:	34 f4       	brge	.+12     	; 0x2e8 <GPIO_setPinValue+0x1aa>
 2dc:	2d 81       	ldd	r18, Y+5	; 0x05
 2de:	3e 81       	ldd	r19, Y+6	; 0x06
 2e0:	21 15       	cp	r18, r1
 2e2:	31 05       	cpc	r19, r1
 2e4:	69 f0       	breq	.+26     	; 0x300 <GPIO_setPinValue+0x1c2>
 2e6:	60 c0       	rjmp	.+192    	; 0x3a8 <GPIO_setPinValue+0x26a>
 2e8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ea:	7e 81       	ldd	r23, Y+6	; 0x06
 2ec:	62 30       	cpi	r22, 0x02	; 2
 2ee:	71 05       	cpc	r23, r1
 2f0:	89 f1       	breq	.+98     	; 0x354 <GPIO_setPinValue+0x216>
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	91 05       	cpc	r25, r1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <GPIO_setPinValue+0x1c0>
 2fc:	40 c0       	rjmp	.+128    	; 0x37e <GPIO_setPinValue+0x240>
 2fe:	54 c0       	rjmp	.+168    	; 0x3a8 <GPIO_setPinValue+0x26a>
                {
                case PORTA:

                    PORTA_Ptr = PORTA_Ptr & ~(1 << PinId);
 300:	ab e3       	ldi	r26, 0x3B	; 59
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	eb e3       	ldi	r30, 0x3B	; 59
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <GPIO_setPinValue+0x1e0>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <GPIO_setPinValue+0x1dc>
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	8c 93       	st	X, r24
 328:	5a c0       	rjmp	.+180    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                case PORTB:
                    PORTB_Ptr = PORTB_Ptr & ~(1 << PinId);
 32a:	a8 e3       	ldi	r26, 0x38	; 56
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e8 e3       	ldi	r30, 0x38	; 56
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	48 2f       	mov	r20, r24
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 2e       	mov	r0, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <GPIO_setPinValue+0x20a>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <GPIO_setPinValue+0x206>
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	8c 93       	st	X, r24
 352:	45 c0       	rjmp	.+138    	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                case PORTC:
                    PORTC_Ptr = PORTC_Ptr & ~(1 << PinId);
 354:	a5 e3       	ldi	r26, 0x35	; 53
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e5 e3       	ldi	r30, 0x35	; 53
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_setPinValue+0x234>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_setPinValue+0x230>
 376:	80 95       	com	r24
 378:	84 23       	and	r24, r20
 37a:	8c 93       	st	X, r24
 37c:	30 c0       	rjmp	.+96     	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                case PORTD:
                    PORTD_Ptr = PORTD_Ptr & ~(1 << PinId);
 37e:	a2 e3       	ldi	r26, 0x32	; 50
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	e2 e3       	ldi	r30, 0x32	; 50
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	48 2f       	mov	r20, r24
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 2e       	mov	r0, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <GPIO_setPinValue+0x25e>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <GPIO_setPinValue+0x25a>
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	8c 93       	st	X, r24
 3a6:	1b c0       	rjmp	.+54     	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                default:
                    PORTA_Ptr = PORTA_Ptr | 0x00;
 3a8:	ab e3       	ldi	r26, 0x3B	; 59
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	eb e3       	ldi	r30, 0x3B	; 59
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
 3b4:	ab e3       	ldi	r26, 0x3B	; 59
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	eb e3       	ldi	r30, 0x3B	; 59
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
 3c0:	ab e3       	ldi	r26, 0x3B	; 59
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	eb e3       	ldi	r30, 0x3B	; 59
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	8c 93       	st	X, r24
                    PORTD_Ptr = PORTD_Ptr | 0x00;
 3cc:	a2 e3       	ldi	r26, 0x32	; 50
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	e2 e3       	ldi	r30, 0x32	; 50
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	8c 93       	st	X, r24
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_setPinValue+0x2a0>
                    break;
                }
            }
            else
            {
                local_err = Can_not_assign_to_pin;
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    return local_err;
 3de:	89 81       	ldd	r24, Y+1	; 0x01
}
 3e0:	28 96       	adiw	r28, 0x08	; 8
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	cf 91       	pop	r28
 3ee:	df 91       	pop	r29
 3f0:	08 95       	ret

000003f2 <GPIO_setPortDirection>:

Error_state GPIO_setPortDirection(u8 portId, u8 PortDirectionValue)
{
 3f2:	df 93       	push	r29
 3f4:	cf 93       	push	r28
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <GPIO_setPortDirection+0x6>
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <GPIO_setPortDirection+0x8>
 3fa:	0f 92       	push	r0
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	8a 83       	std	Y+2, r24	; 0x02
 402:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	88 23       	and	r24, r24
 40c:	61 f0       	breq	.+24     	; 0x426 <GPIO_setPortDirection+0x34>
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	49 f0       	breq	.+18     	; 0x426 <GPIO_setPortDirection+0x34>
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	31 f0       	breq	.+12     	; 0x426 <GPIO_setPortDirection+0x34>
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	19 f0       	breq	.+6      	; 0x426 <GPIO_setPortDirection+0x34>
    {
        local_err = Unvalid_Port;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	89 83       	std	Y+1, r24	; 0x01
 424:	4c c0       	rjmp	.+152    	; 0x4be <GPIO_setPortDirection+0xcc>
    }
    else
    {
        local_err = Valid_Port;
 426:	19 82       	std	Y+1, r1	; 0x01
        switch (portId)
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	3d 83       	std	Y+5, r19	; 0x05
 430:	2c 83       	std	Y+4, r18	; 0x04
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	9d 81       	ldd	r25, Y+5	; 0x05
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	91 05       	cpc	r25, r1
 43a:	d1 f0       	breq	.+52     	; 0x470 <GPIO_setPortDirection+0x7e>
 43c:	2c 81       	ldd	r18, Y+4	; 0x04
 43e:	3d 81       	ldd	r19, Y+5	; 0x05
 440:	22 30       	cpi	r18, 0x02	; 2
 442:	31 05       	cpc	r19, r1
 444:	2c f4       	brge	.+10     	; 0x450 <GPIO_setPortDirection+0x5e>
 446:	8c 81       	ldd	r24, Y+4	; 0x04
 448:	9d 81       	ldd	r25, Y+5	; 0x05
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	61 f0       	breq	.+24     	; 0x466 <GPIO_setPortDirection+0x74>
 44e:	1f c0       	rjmp	.+62     	; 0x48e <GPIO_setPortDirection+0x9c>
 450:	2c 81       	ldd	r18, Y+4	; 0x04
 452:	3d 81       	ldd	r19, Y+5	; 0x05
 454:	22 30       	cpi	r18, 0x02	; 2
 456:	31 05       	cpc	r19, r1
 458:	81 f0       	breq	.+32     	; 0x47a <GPIO_setPortDirection+0x88>
 45a:	8c 81       	ldd	r24, Y+4	; 0x04
 45c:	9d 81       	ldd	r25, Y+5	; 0x05
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	91 05       	cpc	r25, r1
 462:	81 f0       	breq	.+32     	; 0x484 <GPIO_setPortDirection+0x92>
 464:	14 c0       	rjmp	.+40     	; 0x48e <GPIO_setPortDirection+0x9c>
        {
        case PORTA:
            DDRA_Ptr = PortDirectionValue;
 466:	ea e3       	ldi	r30, 0x3A	; 58
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	80 83       	st	Z, r24
 46e:	27 c0       	rjmp	.+78     	; 0x4be <GPIO_setPortDirection+0xcc>
            break;
        case PORTB:
            DDRB_Ptr = PortDirectionValue;
 470:	e7 e3       	ldi	r30, 0x37	; 55
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	80 83       	st	Z, r24
 478:	22 c0       	rjmp	.+68     	; 0x4be <GPIO_setPortDirection+0xcc>
            break;
        case PORTC:
            DDRC_Ptr = PortDirectionValue;
 47a:	e4 e3       	ldi	r30, 0x34	; 52
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	80 83       	st	Z, r24
 482:	1d c0       	rjmp	.+58     	; 0x4be <GPIO_setPortDirection+0xcc>
            break;
        case PORTD:
            DDRD_Ptr = PortDirectionValue;
 484:	e1 e3       	ldi	r30, 0x31	; 49
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	80 83       	st	Z, r24
 48c:	18 c0       	rjmp	.+48     	; 0x4be <GPIO_setPortDirection+0xcc>
            break;
        default:
            DDRA_Ptr |= (0x00);
 48e:	aa e3       	ldi	r26, 0x3A	; 58
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	ea e3       	ldi	r30, 0x3A	; 58
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	8c 93       	st	X, r24
            DDRB_Ptr |= (0x00);
 49a:	a7 e3       	ldi	r26, 0x37	; 55
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e7 e3       	ldi	r30, 0x37	; 55
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	8c 93       	st	X, r24
            DDRC_Ptr |= (0x00);
 4a6:	a4 e3       	ldi	r26, 0x34	; 52
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	e4 e3       	ldi	r30, 0x34	; 52
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	8c 93       	st	X, r24
            DDRD_Ptr |= (0x00);
 4b2:	a1 e3       	ldi	r26, 0x31	; 49
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	e1 e3       	ldi	r30, 0x31	; 49
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	8c 93       	st	X, r24
            break;
        }
    }
    return local_err;
 4be:	89 81       	ldd	r24, Y+1	; 0x01
}
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	cf 91       	pop	r28
 4cc:	df 91       	pop	r29
 4ce:	08 95       	ret

000004d0 <GPIO_setPindDirection>:

Error_state GPIO_setPindDirection(u8 portId, u8 PinId, u8 PintDirectionValue)
{
 4d0:	df 93       	push	r29
 4d2:	cf 93       	push	r28
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	28 97       	sbiw	r28, 0x08	; 8
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	8a 83       	std	Y+2, r24	; 0x02
 4e6:	6b 83       	std	Y+3, r22	; 0x03
 4e8:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	88 23       	and	r24, r24
 4f2:	61 f0       	breq	.+24     	; 0x50c <GPIO_setPindDirection+0x3c>
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	49 f0       	breq	.+18     	; 0x50c <GPIO_setPindDirection+0x3c>
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	31 f0       	breq	.+12     	; 0x50c <GPIO_setPindDirection+0x3c>
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	19 f0       	breq	.+6      	; 0x50c <GPIO_setPindDirection+0x3c>
    {
        local_err = Unvalid_Port;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	89 83       	std	Y+1, r24	; 0x01
 50a:	3b c1       	rjmp	.+630    	; 0x782 <GPIO_setPindDirection+0x2b2>
    }
    else
    {
        local_err = Valid_Port;
 50c:	19 82       	std	Y+1, r1	; 0x01
        if (PinId > MAX_PIN)
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	88 30       	cpi	r24, 0x08	; 8
 512:	18 f0       	brcs	.+6      	; 0x51a <GPIO_setPindDirection+0x4a>
        {
            local_err = Unvalid_pin;
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	34 c1       	rjmp	.+616    	; 0x782 <GPIO_setPindDirection+0x2b2>
        }
        else
        {
            local_err = Valid_pin;
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	89 83       	std	Y+1, r24	; 0x01
            if (Output_direction == PintDirectionValue)
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	09 f0       	breq	.+2      	; 0x526 <GPIO_setPindDirection+0x56>
 524:	92 c0       	rjmp	.+292    	; 0x64a <GPIO_setPindDirection+0x17a>
            {
                switch (portId)
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	38 87       	std	Y+8, r19	; 0x08
 52e:	2f 83       	std	Y+7, r18	; 0x07
 530:	6f 81       	ldd	r22, Y+7	; 0x07
 532:	78 85       	ldd	r23, Y+8	; 0x08
 534:	61 30       	cpi	r22, 0x01	; 1
 536:	71 05       	cpc	r23, r1
 538:	69 f1       	breq	.+90     	; 0x594 <GPIO_setPindDirection+0xc4>
 53a:	8f 81       	ldd	r24, Y+7	; 0x07
 53c:	98 85       	ldd	r25, Y+8	; 0x08
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	91 05       	cpc	r25, r1
 542:	34 f4       	brge	.+12     	; 0x550 <GPIO_setPindDirection+0x80>
 544:	2f 81       	ldd	r18, Y+7	; 0x07
 546:	38 85       	ldd	r19, Y+8	; 0x08
 548:	21 15       	cp	r18, r1
 54a:	31 05       	cpc	r19, r1
 54c:	69 f0       	breq	.+26     	; 0x568 <GPIO_setPindDirection+0x98>
 54e:	64 c0       	rjmp	.+200    	; 0x618 <GPIO_setPindDirection+0x148>
 550:	6f 81       	ldd	r22, Y+7	; 0x07
 552:	78 85       	ldd	r23, Y+8	; 0x08
 554:	62 30       	cpi	r22, 0x02	; 2
 556:	71 05       	cpc	r23, r1
 558:	99 f1       	breq	.+102    	; 0x5c0 <GPIO_setPindDirection+0xf0>
 55a:	8f 81       	ldd	r24, Y+7	; 0x07
 55c:	98 85       	ldd	r25, Y+8	; 0x08
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	91 05       	cpc	r25, r1
 562:	09 f4       	brne	.+2      	; 0x566 <GPIO_setPindDirection+0x96>
 564:	43 c0       	rjmp	.+134    	; 0x5ec <GPIO_setPindDirection+0x11c>
 566:	58 c0       	rjmp	.+176    	; 0x618 <GPIO_setPindDirection+0x148>
                {
                case PORTA:
                    DDRA_Ptr = DDRA_Ptr | (PintDirectionValue << PinId);
 568:	aa e3       	ldi	r26, 0x3A	; 58
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	ea e3       	ldi	r30, 0x3A	; 58
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	48 2f       	mov	r20, r24
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	88 2f       	mov	r24, r24
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <GPIO_setPindDirection+0xb8>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	8a 95       	dec	r24
 58a:	e2 f7       	brpl	.-8      	; 0x584 <GPIO_setPindDirection+0xb4>
 58c:	cb 01       	movw	r24, r22
 58e:	84 2b       	or	r24, r20
 590:	8c 93       	st	X, r24
 592:	f7 c0       	rjmp	.+494    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTB:
                    DDRB_Ptr = DDRB_Ptr | (PintDirectionValue << PinId);
 594:	a7 e3       	ldi	r26, 0x37	; 55
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	e7 e3       	ldi	r30, 0x37	; 55
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	48 2f       	mov	r20, r24
 5a0:	8c 81       	ldd	r24, Y+4	; 0x04
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	b9 01       	movw	r22, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <GPIO_setPindDirection+0xe4>
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <GPIO_setPindDirection+0xe0>
 5b8:	cb 01       	movw	r24, r22
 5ba:	84 2b       	or	r24, r20
 5bc:	8c 93       	st	X, r24
 5be:	e1 c0       	rjmp	.+450    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTC:
                    DDRC_Ptr = DDRC_Ptr | (PintDirectionValue << PinId);
 5c0:	a4 e3       	ldi	r26, 0x34	; 52
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	e4 e3       	ldi	r30, 0x34	; 52
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	48 2f       	mov	r20, r24
 5cc:	8c 81       	ldd	r24, Y+4	; 0x04
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_setPindDirection+0x110>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_setPindDirection+0x10c>
 5e4:	cb 01       	movw	r24, r22
 5e6:	84 2b       	or	r24, r20
 5e8:	8c 93       	st	X, r24
 5ea:	cb c0       	rjmp	.+406    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTD:
                    DDRD_Ptr = DDRD_Ptr | (PintDirectionValue << PinId);
 5ec:	a1 e3       	ldi	r26, 0x31	; 49
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	e1 e3       	ldi	r30, 0x31	; 49
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	48 2f       	mov	r20, r24
 5f8:	8c 81       	ldd	r24, Y+4	; 0x04
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	b9 01       	movw	r22, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <GPIO_setPindDirection+0x13c>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	8a 95       	dec	r24
 60e:	e2 f7       	brpl	.-8      	; 0x608 <GPIO_setPindDirection+0x138>
 610:	cb 01       	movw	r24, r22
 612:	84 2b       	or	r24, r20
 614:	8c 93       	st	X, r24
 616:	b5 c0       	rjmp	.+362    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                default:
                    DDRA_Ptr |= (0x00);
 618:	aa e3       	ldi	r26, 0x3A	; 58
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	ea e3       	ldi	r30, 0x3A	; 58
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	8c 93       	st	X, r24
                    DDRB_Ptr |= (0x00);
 624:	a7 e3       	ldi	r26, 0x37	; 55
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e7 e3       	ldi	r30, 0x37	; 55
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8c 93       	st	X, r24
                    DDRC_Ptr |= (0x00);
 630:	a4 e3       	ldi	r26, 0x34	; 52
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	e4 e3       	ldi	r30, 0x34	; 52
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	8c 93       	st	X, r24
                    DDRD_Ptr |= (0x00);
 63c:	a1 e3       	ldi	r26, 0x31	; 49
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	e1 e3       	ldi	r30, 0x31	; 49
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	8c 93       	st	X, r24
 648:	9c c0       	rjmp	.+312    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                }
            }
            else if (low_value == PintDirectionValue)
 64a:	8c 81       	ldd	r24, Y+4	; 0x04
 64c:	88 23       	and	r24, r24
 64e:	09 f0       	breq	.+2      	; 0x652 <GPIO_setPindDirection+0x182>
 650:	96 c0       	rjmp	.+300    	; 0x77e <GPIO_setPindDirection+0x2ae>
            {
                switch (portId)
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	28 2f       	mov	r18, r24
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	3e 83       	std	Y+6, r19	; 0x06
 65a:	2d 83       	std	Y+5, r18	; 0x05
 65c:	6d 81       	ldd	r22, Y+5	; 0x05
 65e:	7e 81       	ldd	r23, Y+6	; 0x06
 660:	61 30       	cpi	r22, 0x01	; 1
 662:	71 05       	cpc	r23, r1
 664:	71 f1       	breq	.+92     	; 0x6c2 <GPIO_setPindDirection+0x1f2>
 666:	8d 81       	ldd	r24, Y+5	; 0x05
 668:	9e 81       	ldd	r25, Y+6	; 0x06
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	91 05       	cpc	r25, r1
 66e:	34 f4       	brge	.+12     	; 0x67c <GPIO_setPindDirection+0x1ac>
 670:	2d 81       	ldd	r18, Y+5	; 0x05
 672:	3e 81       	ldd	r19, Y+6	; 0x06
 674:	21 15       	cp	r18, r1
 676:	31 05       	cpc	r19, r1
 678:	69 f0       	breq	.+26     	; 0x694 <GPIO_setPindDirection+0x1c4>
 67a:	68 c0       	rjmp	.+208    	; 0x74c <GPIO_setPindDirection+0x27c>
 67c:	6d 81       	ldd	r22, Y+5	; 0x05
 67e:	7e 81       	ldd	r23, Y+6	; 0x06
 680:	62 30       	cpi	r22, 0x02	; 2
 682:	71 05       	cpc	r23, r1
 684:	a9 f1       	breq	.+106    	; 0x6f0 <GPIO_setPindDirection+0x220>
 686:	8d 81       	ldd	r24, Y+5	; 0x05
 688:	9e 81       	ldd	r25, Y+6	; 0x06
 68a:	83 30       	cpi	r24, 0x03	; 3
 68c:	91 05       	cpc	r25, r1
 68e:	09 f4       	brne	.+2      	; 0x692 <GPIO_setPindDirection+0x1c2>
 690:	46 c0       	rjmp	.+140    	; 0x71e <GPIO_setPindDirection+0x24e>
 692:	5c c0       	rjmp	.+184    	; 0x74c <GPIO_setPindDirection+0x27c>
                {
                case PORTA:

                    DDRA_Ptr = DDRA_Ptr & ~(PintDirectionValue << PinId);
 694:	aa e3       	ldi	r26, 0x3A	; 58
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	ea e3       	ldi	r30, 0x3A	; 58
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	48 2f       	mov	r20, r24
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	28 2f       	mov	r18, r24
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	b9 01       	movw	r22, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <GPIO_setPindDirection+0x1e4>
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	8a 95       	dec	r24
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <GPIO_setPindDirection+0x1e0>
 6b8:	cb 01       	movw	r24, r22
 6ba:	80 95       	com	r24
 6bc:	84 23       	and	r24, r20
 6be:	8c 93       	st	X, r24
 6c0:	60 c0       	rjmp	.+192    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTB:
                    DDRB_Ptr = DDRB_Ptr & ~(PintDirectionValue << PinId);
 6c2:	a7 e3       	ldi	r26, 0x37	; 55
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e7 e3       	ldi	r30, 0x37	; 55
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	48 2f       	mov	r20, r24
 6ce:	8c 81       	ldd	r24, Y+4	; 0x04
 6d0:	28 2f       	mov	r18, r24
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	88 2f       	mov	r24, r24
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	b9 01       	movw	r22, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <GPIO_setPindDirection+0x212>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	8a 95       	dec	r24
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <GPIO_setPindDirection+0x20e>
 6e6:	cb 01       	movw	r24, r22
 6e8:	80 95       	com	r24
 6ea:	84 23       	and	r24, r20
 6ec:	8c 93       	st	X, r24
 6ee:	49 c0       	rjmp	.+146    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTC:
                    DDRC_Ptr = DDRC_Ptr & ~(PintDirectionValue << PinId);
 6f0:	a4 e3       	ldi	r26, 0x34	; 52
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	e4 e3       	ldi	r30, 0x34	; 52
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	48 2f       	mov	r20, r24
 6fc:	8c 81       	ldd	r24, Y+4	; 0x04
 6fe:	28 2f       	mov	r18, r24
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	b9 01       	movw	r22, r18
 70a:	02 c0       	rjmp	.+4      	; 0x710 <GPIO_setPindDirection+0x240>
 70c:	66 0f       	add	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	8a 95       	dec	r24
 712:	e2 f7       	brpl	.-8      	; 0x70c <GPIO_setPindDirection+0x23c>
 714:	cb 01       	movw	r24, r22
 716:	80 95       	com	r24
 718:	84 23       	and	r24, r20
 71a:	8c 93       	st	X, r24
 71c:	32 c0       	rjmp	.+100    	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTD:
                    DDRD_Ptr = DDRD_Ptr & ~(PintDirectionValue << PinId);
 71e:	a1 e3       	ldi	r26, 0x31	; 49
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e1 e3       	ldi	r30, 0x31	; 49
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	48 2f       	mov	r20, r24
 72a:	8c 81       	ldd	r24, Y+4	; 0x04
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	88 2f       	mov	r24, r24
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	b9 01       	movw	r22, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <GPIO_setPindDirection+0x26e>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <GPIO_setPindDirection+0x26a>
 742:	cb 01       	movw	r24, r22
 744:	80 95       	com	r24
 746:	84 23       	and	r24, r20
 748:	8c 93       	st	X, r24
 74a:	1b c0       	rjmp	.+54     	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                default:
                    DDRA_Ptr |= (0x00);
 74c:	aa e3       	ldi	r26, 0x3A	; 58
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	ea e3       	ldi	r30, 0x3A	; 58
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	8c 93       	st	X, r24
                    DDRB_Ptr |= (0x00);
 758:	a7 e3       	ldi	r26, 0x37	; 55
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	e7 e3       	ldi	r30, 0x37	; 55
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8c 93       	st	X, r24
                    DDRC_Ptr |= (0x00);
 764:	a4 e3       	ldi	r26, 0x34	; 52
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e4 e3       	ldi	r30, 0x34	; 52
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	8c 93       	st	X, r24
                    DDRD_Ptr |= (0x00);
 770:	a1 e3       	ldi	r26, 0x31	; 49
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	e1 e3       	ldi	r30, 0x31	; 49
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	8c 93       	st	X, r24
 77c:	02 c0       	rjmp	.+4      	; 0x782 <GPIO_setPindDirection+0x2b2>
                    break;
                }
            }
            else
            {
                local_err = Can_not_assign_to_pin;
 77e:	84 e0       	ldi	r24, 0x04	; 4
 780:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    return local_err;
 782:	89 81       	ldd	r24, Y+1	; 0x01
}
 784:	28 96       	adiw	r28, 0x08	; 8
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <GPIO_getPortValue>:

Error_state GPIO_getPortValue(u8 portId, u8 *val)
{
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	00 d0       	rcall	.+0      	; 0x79c <GPIO_getPortValue+0x6>
 79c:	00 d0       	rcall	.+0      	; 0x79e <GPIO_getPortValue+0x8>
 79e:	00 d0       	rcall	.+0      	; 0x7a0 <GPIO_getPortValue+0xa>
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	8a 83       	std	Y+2, r24	; 0x02
 7a6:	7c 83       	std	Y+4, r23	; 0x04
 7a8:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	88 23       	and	r24, r24
 7b2:	61 f0       	breq	.+24     	; 0x7cc <GPIO_getPortValue+0x36>
 7b4:	8a 81       	ldd	r24, Y+2	; 0x02
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	49 f0       	breq	.+18     	; 0x7cc <GPIO_getPortValue+0x36>
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	31 f0       	breq	.+12     	; 0x7cc <GPIO_getPortValue+0x36>
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	83 30       	cpi	r24, 0x03	; 3
 7c4:	19 f0       	breq	.+6      	; 0x7cc <GPIO_getPortValue+0x36>
    {
        local_err = Unvalid_Port;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	89 83       	std	Y+1, r24	; 0x01
 7ca:	42 c0       	rjmp	.+132    	; 0x850 <GPIO_getPortValue+0xba>
    }
    else
    {

        local_err = Valid_pin;
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	89 83       	std	Y+1, r24	; 0x01
        switch (portId)
 7d0:	8a 81       	ldd	r24, Y+2	; 0x02
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	3e 83       	std	Y+6, r19	; 0x06
 7d8:	2d 83       	std	Y+5, r18	; 0x05
 7da:	8d 81       	ldd	r24, Y+5	; 0x05
 7dc:	9e 81       	ldd	r25, Y+6	; 0x06
 7de:	81 30       	cpi	r24, 0x01	; 1
 7e0:	91 05       	cpc	r25, r1
 7e2:	e1 f0       	breq	.+56     	; 0x81c <GPIO_getPortValue+0x86>
 7e4:	2d 81       	ldd	r18, Y+5	; 0x05
 7e6:	3e 81       	ldd	r19, Y+6	; 0x06
 7e8:	22 30       	cpi	r18, 0x02	; 2
 7ea:	31 05       	cpc	r19, r1
 7ec:	2c f4       	brge	.+10     	; 0x7f8 <GPIO_getPortValue+0x62>
 7ee:	8d 81       	ldd	r24, Y+5	; 0x05
 7f0:	9e 81       	ldd	r25, Y+6	; 0x06
 7f2:	00 97       	sbiw	r24, 0x00	; 0
 7f4:	61 f0       	breq	.+24     	; 0x80e <GPIO_getPortValue+0x78>
 7f6:	26 c0       	rjmp	.+76     	; 0x844 <GPIO_getPortValue+0xae>
 7f8:	2d 81       	ldd	r18, Y+5	; 0x05
 7fa:	3e 81       	ldd	r19, Y+6	; 0x06
 7fc:	22 30       	cpi	r18, 0x02	; 2
 7fe:	31 05       	cpc	r19, r1
 800:	a1 f0       	breq	.+40     	; 0x82a <GPIO_getPortValue+0x94>
 802:	8d 81       	ldd	r24, Y+5	; 0x05
 804:	9e 81       	ldd	r25, Y+6	; 0x06
 806:	83 30       	cpi	r24, 0x03	; 3
 808:	91 05       	cpc	r25, r1
 80a:	b1 f0       	breq	.+44     	; 0x838 <GPIO_getPortValue+0xa2>
 80c:	1b c0       	rjmp	.+54     	; 0x844 <GPIO_getPortValue+0xae>
        {
        case PORTA:
            *val = PINA_Ptr;
 80e:	e9 e3       	ldi	r30, 0x39	; 57
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	eb 81       	ldd	r30, Y+3	; 0x03
 816:	fc 81       	ldd	r31, Y+4	; 0x04
 818:	80 83       	st	Z, r24
 81a:	14 c0       	rjmp	.+40     	; 0x844 <GPIO_getPortValue+0xae>
            break;
        case PORTB:
            *val = PINB_Ptr;
 81c:	e6 e3       	ldi	r30, 0x36	; 54
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	eb 81       	ldd	r30, Y+3	; 0x03
 824:	fc 81       	ldd	r31, Y+4	; 0x04
 826:	80 83       	st	Z, r24
 828:	0d c0       	rjmp	.+26     	; 0x844 <GPIO_getPortValue+0xae>
            break;
        case PORTC:
            *val = PINC_Ptr;
 82a:	e3 e3       	ldi	r30, 0x33	; 51
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	eb 81       	ldd	r30, Y+3	; 0x03
 832:	fc 81       	ldd	r31, Y+4	; 0x04
 834:	80 83       	st	Z, r24
 836:	06 c0       	rjmp	.+12     	; 0x844 <GPIO_getPortValue+0xae>
            break;
        case PORTD:
            *val = PIND_Ptr;
 838:	e0 e3       	ldi	r30, 0x30	; 48
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	eb 81       	ldd	r30, Y+3	; 0x03
 840:	fc 81       	ldd	r31, Y+4	; 0x04
 842:	80 83       	st	Z, r24
            break;
        default:
            break;
        }
        if (NULL == val)
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	9c 81       	ldd	r25, Y+4	; 0x04
 848:	00 97       	sbiw	r24, 0x00	; 0
 84a:	11 f4       	brne	.+4      	; 0x850 <GPIO_getPortValue+0xba>
        {
            local_err = NULL_POINTER;
 84c:	86 e0       	ldi	r24, 0x06	; 6
 84e:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return local_err;
 850:	89 81       	ldd	r24, Y+1	; 0x01
}
 852:	26 96       	adiw	r28, 0x06	; 6
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	f8 94       	cli
 858:	de bf       	out	0x3e, r29	; 62
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	cd bf       	out	0x3d, r28	; 61
 85e:	cf 91       	pop	r28
 860:	df 91       	pop	r29
 862:	08 95       	ret

00000864 <GPIO_getPIN>:

Error_state GPIO_getPIN(u8 portId, u8 PinId, u8 *val)
{
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
 86c:	27 97       	sbiw	r28, 0x07	; 7
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	8a 83       	std	Y+2, r24	; 0x02
 87a:	6b 83       	std	Y+3, r22	; 0x03
 87c:	5d 83       	std	Y+5, r21	; 0x05
 87e:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	88 23       	and	r24, r24
 888:	61 f0       	breq	.+24     	; 0x8a2 <GPIO_getPIN+0x3e>
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	81 30       	cpi	r24, 0x01	; 1
 88e:	49 f0       	breq	.+18     	; 0x8a2 <GPIO_getPIN+0x3e>
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	31 f0       	breq	.+12     	; 0x8a2 <GPIO_getPIN+0x3e>
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	83 30       	cpi	r24, 0x03	; 3
 89a:	19 f0       	breq	.+6      	; 0x8a2 <GPIO_getPIN+0x3e>
    {
        local_err = Unvalid_Port;
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	89 83       	std	Y+1, r24	; 0x01
 8a0:	7e c0       	rjmp	.+252    	; 0x99e <GPIO_getPIN+0x13a>
    }
    else
    {
        if (PinId > MAX_PIN)
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	88 30       	cpi	r24, 0x08	; 8
 8a6:	18 f0       	brcs	.+6      	; 0x8ae <GPIO_getPIN+0x4a>
        {
            local_err = Unvalid_pin;
 8a8:	83 e0       	ldi	r24, 0x03	; 3
 8aa:	89 83       	std	Y+1, r24	; 0x01
 8ac:	78 c0       	rjmp	.+240    	; 0x99e <GPIO_getPIN+0x13a>
        }
        else
        {
            local_err = Valid_pin;
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	89 83       	std	Y+1, r24	; 0x01
            switch (portId)
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	28 2f       	mov	r18, r24
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	3f 83       	std	Y+7, r19	; 0x07
 8ba:	2e 83       	std	Y+6, r18	; 0x06
 8bc:	4e 81       	ldd	r20, Y+6	; 0x06
 8be:	5f 81       	ldd	r21, Y+7	; 0x07
 8c0:	41 30       	cpi	r20, 0x01	; 1
 8c2:	51 05       	cpc	r21, r1
 8c4:	59 f1       	breq	.+86     	; 0x91c <GPIO_getPIN+0xb8>
 8c6:	8e 81       	ldd	r24, Y+6	; 0x06
 8c8:	9f 81       	ldd	r25, Y+7	; 0x07
 8ca:	82 30       	cpi	r24, 0x02	; 2
 8cc:	91 05       	cpc	r25, r1
 8ce:	34 f4       	brge	.+12     	; 0x8dc <GPIO_getPIN+0x78>
 8d0:	2e 81       	ldd	r18, Y+6	; 0x06
 8d2:	3f 81       	ldd	r19, Y+7	; 0x07
 8d4:	21 15       	cp	r18, r1
 8d6:	31 05       	cpc	r19, r1
 8d8:	69 f0       	breq	.+26     	; 0x8f4 <GPIO_getPIN+0x90>
 8da:	5b c0       	rjmp	.+182    	; 0x992 <GPIO_getPIN+0x12e>
 8dc:	4e 81       	ldd	r20, Y+6	; 0x06
 8de:	5f 81       	ldd	r21, Y+7	; 0x07
 8e0:	42 30       	cpi	r20, 0x02	; 2
 8e2:	51 05       	cpc	r21, r1
 8e4:	79 f1       	breq	.+94     	; 0x944 <GPIO_getPIN+0xe0>
 8e6:	8e 81       	ldd	r24, Y+6	; 0x06
 8e8:	9f 81       	ldd	r25, Y+7	; 0x07
 8ea:	83 30       	cpi	r24, 0x03	; 3
 8ec:	91 05       	cpc	r25, r1
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <GPIO_getPIN+0x8e>
 8f0:	3d c0       	rjmp	.+122    	; 0x96c <GPIO_getPIN+0x108>
 8f2:	4f c0       	rjmp	.+158    	; 0x992 <GPIO_getPIN+0x12e>
            {
            case PORTA:
                *val = (PINA_Ptr >> PinId) & 1;
 8f4:	e9 e3       	ldi	r30, 0x39	; 57
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	8b 81       	ldd	r24, Y+3	; 0x03
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	a9 01       	movw	r20, r18
 906:	02 c0       	rjmp	.+4      	; 0x90c <GPIO_getPIN+0xa8>
 908:	55 95       	asr	r21
 90a:	47 95       	ror	r20
 90c:	8a 95       	dec	r24
 90e:	e2 f7       	brpl	.-8      	; 0x908 <GPIO_getPIN+0xa4>
 910:	ca 01       	movw	r24, r20
 912:	81 70       	andi	r24, 0x01	; 1
 914:	ec 81       	ldd	r30, Y+4	; 0x04
 916:	fd 81       	ldd	r31, Y+5	; 0x05
 918:	80 83       	st	Z, r24
 91a:	3b c0       	rjmp	.+118    	; 0x992 <GPIO_getPIN+0x12e>
                break;
            case PORTB:
                *val = (PINB_Ptr >> PinId) & 1;
 91c:	e6 e3       	ldi	r30, 0x36	; 54
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	88 2f       	mov	r24, r24
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	a9 01       	movw	r20, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <GPIO_getPIN+0xd0>
 930:	55 95       	asr	r21
 932:	47 95       	ror	r20
 934:	8a 95       	dec	r24
 936:	e2 f7       	brpl	.-8      	; 0x930 <GPIO_getPIN+0xcc>
 938:	ca 01       	movw	r24, r20
 93a:	81 70       	andi	r24, 0x01	; 1
 93c:	ec 81       	ldd	r30, Y+4	; 0x04
 93e:	fd 81       	ldd	r31, Y+5	; 0x05
 940:	80 83       	st	Z, r24
 942:	27 c0       	rjmp	.+78     	; 0x992 <GPIO_getPIN+0x12e>
                break;
            case PORTC:
                *val = (PINC_Ptr >> PinId) & 1;
 944:	e3 e3       	ldi	r30, 0x33	; 51
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	28 2f       	mov	r18, r24
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	8b 81       	ldd	r24, Y+3	; 0x03
 950:	88 2f       	mov	r24, r24
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	a9 01       	movw	r20, r18
 956:	02 c0       	rjmp	.+4      	; 0x95c <GPIO_getPIN+0xf8>
 958:	55 95       	asr	r21
 95a:	47 95       	ror	r20
 95c:	8a 95       	dec	r24
 95e:	e2 f7       	brpl	.-8      	; 0x958 <GPIO_getPIN+0xf4>
 960:	ca 01       	movw	r24, r20
 962:	81 70       	andi	r24, 0x01	; 1
 964:	ec 81       	ldd	r30, Y+4	; 0x04
 966:	fd 81       	ldd	r31, Y+5	; 0x05
 968:	80 83       	st	Z, r24
 96a:	13 c0       	rjmp	.+38     	; 0x992 <GPIO_getPIN+0x12e>
                break;
            case PORTD:
                *val = (PIND_Ptr >> PinId) & 1;
 96c:	e0 e3       	ldi	r30, 0x30	; 48
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 81       	ld	r24, Z
 972:	28 2f       	mov	r18, r24
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	88 2f       	mov	r24, r24
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	a9 01       	movw	r20, r18
 97e:	02 c0       	rjmp	.+4      	; 0x984 <GPIO_getPIN+0x120>
 980:	55 95       	asr	r21
 982:	47 95       	ror	r20
 984:	8a 95       	dec	r24
 986:	e2 f7       	brpl	.-8      	; 0x980 <GPIO_getPIN+0x11c>
 988:	ca 01       	movw	r24, r20
 98a:	81 70       	andi	r24, 0x01	; 1
 98c:	ec 81       	ldd	r30, Y+4	; 0x04
 98e:	fd 81       	ldd	r31, Y+5	; 0x05
 990:	80 83       	st	Z, r24
                break;
            default:
                break;
            }
            if (NULL == val)
 992:	8c 81       	ldd	r24, Y+4	; 0x04
 994:	9d 81       	ldd	r25, Y+5	; 0x05
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	11 f4       	brne	.+4      	; 0x99e <GPIO_getPIN+0x13a>
            {
                local_err = NULL_POINTER;
 99a:	86 e0       	ldi	r24, 0x06	; 6
 99c:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }

    return local_err;
 99e:	89 81       	ldd	r24, Y+1	; 0x01
}
 9a0:	27 96       	adiw	r28, 0x07	; 7
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <Seven_Segment>:
 *      Author: ahmedomar
 */
#include "SEVEN_SEG.h"

Error_state Seven_Segment(u8 numebr)
{
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	00 d0       	rcall	.+0      	; 0x9b8 <Seven_Segment+0x6>
 9b8:	00 d0       	rcall	.+0      	; 0x9ba <Seven_Segment+0x8>
 9ba:	0f 92       	push	r0
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	8d 83       	std	Y+5, r24	; 0x05
    Error_state local_err = Unvalid_Port;
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	8c 83       	std	Y+4, r24	; 0x04
    SEVEN_SEG_t *local_ptr = &seven_segments_arr[1];
 9c6:	83 e6       	ldi	r24, 0x63	; 99
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	9b 83       	std	Y+3, r25	; 0x03
 9cc:	8a 83       	std	Y+2, r24	; 0x02
    if (local_ptr == NULL)
 9ce:	8a 81       	ldd	r24, Y+2	; 0x02
 9d0:	9b 81       	ldd	r25, Y+3	; 0x03
 9d2:	00 97       	sbiw	r24, 0x00	; 0
 9d4:	19 f4       	brne	.+6      	; 0x9dc <Seven_Segment+0x2a>
    {
        local_err = NULL_POINTER;
 9d6:	86 e0       	ldi	r24, 0x06	; 6
 9d8:	8c 83       	std	Y+4, r24	; 0x04
 9da:	68 c0       	rjmp	.+208    	; 0xaac <Seven_Segment+0xfa>
    }
    else
    {
        if (numebr > 0x09)
 9dc:	8d 81       	ldd	r24, Y+5	; 0x05
 9de:	8a 30       	cpi	r24, 0x0A	; 10
 9e0:	18 f0       	brcs	.+6      	; 0x9e8 <Seven_Segment+0x36>
        {
            local_err = Can_not_assign_to_SS;
 9e2:	8b e0       	ldi	r24, 0x0B	; 11
 9e4:	8c 83       	std	Y+4, r24	; 0x04
 9e6:	62 c0       	rjmp	.+196    	; 0xaac <Seven_Segment+0xfa>
        }
        else
        {
            if ((PORTA != local_ptr->PORT) && (PORTB != local_ptr->PORT) && (PORTC != local_ptr->PORT) && (PORTD != local_ptr->PORT))
 9e8:	ea 81       	ldd	r30, Y+2	; 0x02
 9ea:	fb 81       	ldd	r31, Y+3	; 0x03
 9ec:	81 81       	ldd	r24, Z+1	; 0x01
 9ee:	88 23       	and	r24, r24
 9f0:	91 f0       	breq	.+36     	; 0xa16 <Seven_Segment+0x64>
 9f2:	ea 81       	ldd	r30, Y+2	; 0x02
 9f4:	fb 81       	ldd	r31, Y+3	; 0x03
 9f6:	81 81       	ldd	r24, Z+1	; 0x01
 9f8:	81 30       	cpi	r24, 0x01	; 1
 9fa:	69 f0       	breq	.+26     	; 0xa16 <Seven_Segment+0x64>
 9fc:	ea 81       	ldd	r30, Y+2	; 0x02
 9fe:	fb 81       	ldd	r31, Y+3	; 0x03
 a00:	81 81       	ldd	r24, Z+1	; 0x01
 a02:	82 30       	cpi	r24, 0x02	; 2
 a04:	41 f0       	breq	.+16     	; 0xa16 <Seven_Segment+0x64>
 a06:	ea 81       	ldd	r30, Y+2	; 0x02
 a08:	fb 81       	ldd	r31, Y+3	; 0x03
 a0a:	81 81       	ldd	r24, Z+1	; 0x01
 a0c:	83 30       	cpi	r24, 0x03	; 3
 a0e:	19 f0       	breq	.+6      	; 0xa16 <Seven_Segment+0x64>
            {
                local_err = Unvalid_Port;
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	8c 83       	std	Y+4, r24	; 0x04
 a14:	4b c0       	rjmp	.+150    	; 0xaac <Seven_Segment+0xfa>
            }
            else
            {
                for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
 a16:	19 82       	std	Y+1, r1	; 0x01
 a18:	0e c0       	rjmp	.+28     	; 0xa36 <Seven_Segment+0x84>
                {
                    if (LoopIteratorOne == local_ptr->SEVEN_SEG_ID)
 a1a:	ea 81       	ldd	r30, Y+2	; 0x02
 a1c:	fb 81       	ldd	r31, Y+3	; 0x03
 a1e:	90 81       	ld	r25, Z
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	98 17       	cp	r25, r24
 a24:	19 f4       	brne	.+6      	; 0xa2c <Seven_Segment+0x7a>
                    {
                        local_err = SS_valid;
 a26:	8c e0       	ldi	r24, 0x0C	; 12
 a28:	8c 83       	std	Y+4, r24	; 0x04
 a2a:	0a c0       	rjmp	.+20     	; 0xa40 <Seven_Segment+0x8e>
                        break;
                    }
                    else
                    {
                        local_err = SS_not_valid;
 a2c:	8d e0       	ldi	r24, 0x0D	; 13
 a2e:	8c 83       	std	Y+4, r24	; 0x04
            {
                local_err = Unvalid_Port;
            }
            else
            {
                for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	8f 5f       	subi	r24, 0xFF	; 255
 a34:	89 83       	std	Y+1, r24	; 0x01
 a36:	90 91 66 00 	lds	r25, 0x0066
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	89 17       	cp	r24, r25
 a3e:	68 f3       	brcs	.-38     	; 0xa1a <Seven_Segment+0x68>
                    else
                    {
                        local_err = SS_not_valid;
                    }
                }
                if (SS_valid == local_err)
 a40:	8c 81       	ldd	r24, Y+4	; 0x04
 a42:	8c 30       	cpi	r24, 0x0C	; 12
 a44:	99 f5       	brne	.+102    	; 0xaac <Seven_Segment+0xfa>
                {
                    if (comman_anode == local_ptr->SEVEN_SEG_type)
 a46:	ea 81       	ldd	r30, Y+2	; 0x02
 a48:	fb 81       	ldd	r31, Y+3	; 0x03
 a4a:	82 81       	ldd	r24, Z+2	; 0x02
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	a9 f4       	brne	.+42     	; 0xa7a <Seven_Segment+0xc8>
                    {
                        GPIO_setPortDirection(local_ptr->PORT, 0xff);
 a50:	ea 81       	ldd	r30, Y+2	; 0x02
 a52:	fb 81       	ldd	r31, Y+3	; 0x03
 a54:	81 81       	ldd	r24, Z+1	; 0x01
 a56:	6f ef       	ldi	r22, 0xFF	; 255
 a58:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <GPIO_setPortDirection>
                        GPIO_setPortValue(local_ptr->PORT, CA_SevenSegmentValues[numebr]);
 a5c:	ea 81       	ldd	r30, Y+2	; 0x02
 a5e:	fb 81       	ldd	r31, Y+3	; 0x03
 a60:	21 81       	ldd	r18, Z+1	; 0x01
 a62:	8d 81       	ldd	r24, Y+5	; 0x05
 a64:	88 2f       	mov	r24, r24
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	fc 01       	movw	r30, r24
 a6a:	e0 59       	subi	r30, 0x90	; 144
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	90 81       	ld	r25, Z
 a70:	82 2f       	mov	r24, r18
 a72:	69 2f       	mov	r22, r25
 a74:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPortValue>
 a78:	19 c0       	rjmp	.+50     	; 0xaac <Seven_Segment+0xfa>
                    }
                    else if (comman_cathode == local_ptr->SEVEN_SEG_type)
 a7a:	ea 81       	ldd	r30, Y+2	; 0x02
 a7c:	fb 81       	ldd	r31, Y+3	; 0x03
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	88 23       	and	r24, r24
 a82:	a1 f4       	brne	.+40     	; 0xaac <Seven_Segment+0xfa>
                    {
                        GPIO_setPortDirection(local_ptr->PORT, 0xff);
 a84:	ea 81       	ldd	r30, Y+2	; 0x02
 a86:	fb 81       	ldd	r31, Y+3	; 0x03
 a88:	81 81       	ldd	r24, Z+1	; 0x01
 a8a:	6f ef       	ldi	r22, 0xFF	; 255
 a8c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <GPIO_setPortDirection>
                        GPIO_setPortValue(local_ptr->PORT, CC_SevenSegmentValues[numebr]);
 a90:	ea 81       	ldd	r30, Y+2	; 0x02
 a92:	fb 81       	ldd	r31, Y+3	; 0x03
 a94:	21 81       	ldd	r18, Z+1	; 0x01
 a96:	8d 81       	ldd	r24, Y+5	; 0x05
 a98:	88 2f       	mov	r24, r24
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	fc 01       	movw	r30, r24
 a9e:	e6 58       	subi	r30, 0x86	; 134
 aa0:	ff 4f       	sbci	r31, 0xFF	; 255
 aa2:	90 81       	ld	r25, Z
 aa4:	82 2f       	mov	r24, r18
 aa6:	69 2f       	mov	r22, r25
 aa8:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setPortValue>
                }
            }
        }
    }

    return local_err;
 aac:	8c 81       	ldd	r24, Y+4	; 0x04
}
 aae:	0f 90       	pop	r0
 ab0:	0f 90       	pop	r0
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	08 95       	ret

00000abe <LED_ON>:
 *  Created on: Aug 22, 2023
 *      Author: ahmedomar
 */

Error_state LED_ON()
{
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	00 d0       	rcall	.+0      	; 0xac4 <LED_ON+0x6>
 ac4:	00 d0       	rcall	.+0      	; 0xac6 <LED_ON+0x8>
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
    // make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
 aca:	86 e0       	ldi	r24, 0x06	; 6
 acc:	8c 83       	std	Y+4, r24	; 0x04
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
 ace:	8c e6       	ldi	r24, 0x6C	; 108
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	9b 83       	std	Y+3, r25	; 0x03
 ad4:	8a 83       	std	Y+2, r24	; 0x02
    // first check the null pointer
    if (NULL == LED_PTR)
 ad6:	8a 81       	ldd	r24, Y+2	; 0x02
 ad8:	9b 81       	ldd	r25, Y+3	; 0x03
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	19 f4       	brne	.+6      	; 0xae4 <LED_ON+0x26>
    {
        local_error = NULL_POINTER;
 ade:	86 e0       	ldi	r24, 0x06	; 6
 ae0:	8c 83       	std	Y+4, r24	; 0x04
 ae2:	37 c0       	rjmp	.+110    	; 0xb52 <LED_ON+0x94>
    }
    else
    {
        // check led is valid
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
 ae4:	19 82       	std	Y+1, r1	; 0x01
 ae6:	0e c0       	rjmp	.+28     	; 0xb04 <LED_ON+0x46>
        {
            if (LoopIteratorOne == LED_PTR->LED_ID)
 ae8:	ea 81       	ldd	r30, Y+2	; 0x02
 aea:	fb 81       	ldd	r31, Y+3	; 0x03
 aec:	90 81       	ld	r25, Z
 aee:	89 81       	ldd	r24, Y+1	; 0x01
 af0:	98 17       	cp	r25, r24
 af2:	19 f4       	brne	.+6      	; 0xafa <LED_ON+0x3c>
            {
                local_error = LED_VALID;
 af4:	87 e0       	ldi	r24, 0x07	; 7
 af6:	8c 83       	std	Y+4, r24	; 0x04
 af8:	0a c0       	rjmp	.+20     	; 0xb0e <LED_ON+0x50>
                break;
            }
            else
            {
                local_error = LED_NOT_VALID;
 afa:	88 e0       	ldi	r24, 0x08	; 8
 afc:	8c 83       	std	Y+4, r24	; 0x04
        local_error = NULL_POINTER;
    }
    else
    {
        // check led is valid
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
 afe:	89 81       	ldd	r24, Y+1	; 0x01
 b00:	8f 5f       	subi	r24, 0xFF	; 255
 b02:	89 83       	std	Y+1, r24	; 0x01
 b04:	90 91 67 00 	lds	r25, 0x0067
 b08:	89 81       	ldd	r24, Y+1	; 0x01
 b0a:	89 17       	cp	r24, r25
 b0c:	68 f3       	brcs	.-38     	; 0xae8 <LED_ON+0x2a>
            else
            {
                local_error = LED_NOT_VALID;
            }
        }
        if (LED_VALID == local_error)
 b0e:	8c 81       	ldd	r24, Y+4	; 0x04
 b10:	87 30       	cpi	r24, 0x07	; 7
 b12:	f9 f4       	brne	.+62     	; 0xb52 <LED_ON+0x94>
        {
            local_error = Not_Working;
 b14:	8a e0       	ldi	r24, 0x0A	; 10
 b16:	8c 83       	std	Y+4, r24	; 0x04
            LED_PTR->PIN_VAL = high_value;
 b18:	ea 81       	ldd	r30, Y+2	; 0x02
 b1a:	fb 81       	ldd	r31, Y+3	; 0x03
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	83 83       	std	Z+3, r24	; 0x03
            GPIO_setPindDirection(LED_PTR->PORT, LED_PTR->PIN, Output_direction);
 b20:	ea 81       	ldd	r30, Y+2	; 0x02
 b22:	fb 81       	ldd	r31, Y+3	; 0x03
 b24:	81 81       	ldd	r24, Z+1	; 0x01
 b26:	ea 81       	ldd	r30, Y+2	; 0x02
 b28:	fb 81       	ldd	r31, Y+3	; 0x03
 b2a:	92 81       	ldd	r25, Z+2	; 0x02
 b2c:	69 2f       	mov	r22, r25
 b2e:	41 e0       	ldi	r20, 0x01	; 1
 b30:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_setPindDirection>
            GPIO_setPinValue(LED_PTR->PORT, LED_PTR->PIN, LED_PTR->PIN_VAL);
 b34:	ea 81       	ldd	r30, Y+2	; 0x02
 b36:	fb 81       	ldd	r31, Y+3	; 0x03
 b38:	81 81       	ldd	r24, Z+1	; 0x01
 b3a:	ea 81       	ldd	r30, Y+2	; 0x02
 b3c:	fb 81       	ldd	r31, Y+3	; 0x03
 b3e:	22 81       	ldd	r18, Z+2	; 0x02
 b40:	ea 81       	ldd	r30, Y+2	; 0x02
 b42:	fb 81       	ldd	r31, Y+3	; 0x03
 b44:	93 81       	ldd	r25, Z+3	; 0x03
 b46:	62 2f       	mov	r22, r18
 b48:	49 2f       	mov	r20, r25
 b4a:	0e 94 9f 00 	call	0x13e	; 0x13e <GPIO_setPinValue>
            local_error = Working;
 b4e:	89 e0       	ldi	r24, 0x09	; 9
 b50:	8c 83       	std	Y+4, r24	; 0x04
        else
        {
        }
    }

    return local_error;
 b52:	8c 81       	ldd	r24, Y+4	; 0x04
}
 b54:	0f 90       	pop	r0
 b56:	0f 90       	pop	r0
 b58:	0f 90       	pop	r0
 b5a:	0f 90       	pop	r0
 b5c:	cf 91       	pop	r28
 b5e:	df 91       	pop	r29
 b60:	08 95       	ret

00000b62 <LED_OFF>:

Error_state LED_OFF()
{
 b62:	df 93       	push	r29
 b64:	cf 93       	push	r28
 b66:	00 d0       	rcall	.+0      	; 0xb68 <LED_OFF+0x6>
 b68:	00 d0       	rcall	.+0      	; 0xb6a <LED_OFF+0x8>
 b6a:	cd b7       	in	r28, 0x3d	; 61
 b6c:	de b7       	in	r29, 0x3e	; 62
    // make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
 b6e:	86 e0       	ldi	r24, 0x06	; 6
 b70:	8c 83       	std	Y+4, r24	; 0x04
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
 b72:	8c e6       	ldi	r24, 0x6C	; 108
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	9b 83       	std	Y+3, r25	; 0x03
 b78:	8a 83       	std	Y+2, r24	; 0x02
    // first check the null pointer
    if (NULL == LED_PTR)
 b7a:	8a 81       	ldd	r24, Y+2	; 0x02
 b7c:	9b 81       	ldd	r25, Y+3	; 0x03
 b7e:	00 97       	sbiw	r24, 0x00	; 0
 b80:	19 f4       	brne	.+6      	; 0xb88 <LED_OFF+0x26>
    {
        local_error = NULL_POINTER;
 b82:	86 e0       	ldi	r24, 0x06	; 6
 b84:	8c 83       	std	Y+4, r24	; 0x04
 b86:	36 c0       	rjmp	.+108    	; 0xbf4 <LED_OFF+0x92>
    }
    else
    {
        // check led is valid                           //length
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
 b88:	19 82       	std	Y+1, r1	; 0x01
 b8a:	0e c0       	rjmp	.+28     	; 0xba8 <LED_OFF+0x46>
        {
            if (LoopIteratorOne == LED_PTR->LED_ID)
 b8c:	ea 81       	ldd	r30, Y+2	; 0x02
 b8e:	fb 81       	ldd	r31, Y+3	; 0x03
 b90:	90 81       	ld	r25, Z
 b92:	89 81       	ldd	r24, Y+1	; 0x01
 b94:	98 17       	cp	r25, r24
 b96:	19 f4       	brne	.+6      	; 0xb9e <LED_OFF+0x3c>
            {
                local_error = LED_VALID;
 b98:	87 e0       	ldi	r24, 0x07	; 7
 b9a:	8c 83       	std	Y+4, r24	; 0x04
 b9c:	0a c0       	rjmp	.+20     	; 0xbb2 <LED_OFF+0x50>
                break;
            }
            else
            {
                local_error = LED_NOT_VALID;
 b9e:	88 e0       	ldi	r24, 0x08	; 8
 ba0:	8c 83       	std	Y+4, r24	; 0x04
        local_error = NULL_POINTER;
    }
    else
    {
        // check led is valid                           //length
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	8f 5f       	subi	r24, 0xFF	; 255
 ba6:	89 83       	std	Y+1, r24	; 0x01
 ba8:	90 91 67 00 	lds	r25, 0x0067
 bac:	89 81       	ldd	r24, Y+1	; 0x01
 bae:	89 17       	cp	r24, r25
 bb0:	68 f3       	brcs	.-38     	; 0xb8c <LED_OFF+0x2a>
            else
            {
                local_error = LED_NOT_VALID;
            }
        }
        if (LED_VALID == local_error)
 bb2:	8c 81       	ldd	r24, Y+4	; 0x04
 bb4:	87 30       	cpi	r24, 0x07	; 7
 bb6:	f1 f4       	brne	.+60     	; 0xbf4 <LED_OFF+0x92>
        {
            local_error = Working;
 bb8:	89 e0       	ldi	r24, 0x09	; 9
 bba:	8c 83       	std	Y+4, r24	; 0x04
            LED_PTR->PIN_VAL = low_value;
 bbc:	ea 81       	ldd	r30, Y+2	; 0x02
 bbe:	fb 81       	ldd	r31, Y+3	; 0x03
 bc0:	13 82       	std	Z+3, r1	; 0x03
            GPIO_setPindDirection(LED_PTR->PORT, LED_PTR->PIN, Output_direction);
 bc2:	ea 81       	ldd	r30, Y+2	; 0x02
 bc4:	fb 81       	ldd	r31, Y+3	; 0x03
 bc6:	81 81       	ldd	r24, Z+1	; 0x01
 bc8:	ea 81       	ldd	r30, Y+2	; 0x02
 bca:	fb 81       	ldd	r31, Y+3	; 0x03
 bcc:	92 81       	ldd	r25, Z+2	; 0x02
 bce:	69 2f       	mov	r22, r25
 bd0:	41 e0       	ldi	r20, 0x01	; 1
 bd2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GPIO_setPindDirection>
            GPIO_setPinValue(LED_PTR->PORT, LED_PTR->PIN, LED_PTR->PIN_VAL);
 bd6:	ea 81       	ldd	r30, Y+2	; 0x02
 bd8:	fb 81       	ldd	r31, Y+3	; 0x03
 bda:	81 81       	ldd	r24, Z+1	; 0x01
 bdc:	ea 81       	ldd	r30, Y+2	; 0x02
 bde:	fb 81       	ldd	r31, Y+3	; 0x03
 be0:	22 81       	ldd	r18, Z+2	; 0x02
 be2:	ea 81       	ldd	r30, Y+2	; 0x02
 be4:	fb 81       	ldd	r31, Y+3	; 0x03
 be6:	93 81       	ldd	r25, Z+3	; 0x03
 be8:	62 2f       	mov	r22, r18
 bea:	49 2f       	mov	r20, r25
 bec:	0e 94 9f 00 	call	0x13e	; 0x13e <GPIO_setPinValue>
            local_error = Not_Working;
 bf0:	8a e0       	ldi	r24, 0x0A	; 10
 bf2:	8c 83       	std	Y+4, r24	; 0x04
        else
        {
        }
    }

    return local_error;
 bf4:	8c 81       	ldd	r24, Y+4	; 0x04
}
 bf6:	0f 90       	pop	r0
 bf8:	0f 90       	pop	r0
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	cf 91       	pop	r28
 c00:	df 91       	pop	r29
 c02:	08 95       	ret

00000c04 <Toggel_LED>:

Error_state Toggel_LED()
{
 c04:	df 93       	push	r29
 c06:	cf 93       	push	r28
 c08:	00 d0       	rcall	.+0      	; 0xc0a <Toggel_LED+0x6>
 c0a:	0f 92       	push	r0
 c0c:	cd b7       	in	r28, 0x3d	; 61
 c0e:	de b7       	in	r29, 0x3e	; 62
	// make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
 c10:	86 e0       	ldi	r24, 0x06	; 6
 c12:	8b 83       	std	Y+3, r24	; 0x03
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
 c14:	8c e6       	ldi	r24, 0x6C	; 108
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	9a 83       	std	Y+2, r25	; 0x02
 c1a:	89 83       	std	Y+1, r24	; 0x01
    // first check the null pointer
    if (NULL == LED_PTR)
 c1c:	89 81       	ldd	r24, Y+1	; 0x01
 c1e:	9a 81       	ldd	r25, Y+2	; 0x02
 c20:	00 97       	sbiw	r24, 0x00	; 0
 c22:	19 f4       	brne	.+6      	; 0xc2a <Toggel_LED+0x26>
    {
        local_error = NULL_POINTER;
 c24:	86 e0       	ldi	r24, 0x06	; 6
 c26:	8b 83       	std	Y+3, r24	; 0x03
 c28:	11 c0       	rjmp	.+34     	; 0xc4c <Toggel_LED+0x48>
    }
    else
    {
        if (high_value == LED_PTR->PIN_VAL)
 c2a:	e9 81       	ldd	r30, Y+1	; 0x01
 c2c:	fa 81       	ldd	r31, Y+2	; 0x02
 c2e:	83 81       	ldd	r24, Z+3	; 0x03
 c30:	81 30       	cpi	r24, 0x01	; 1
 c32:	21 f4       	brne	.+8      	; 0xc3c <Toggel_LED+0x38>
        {
            local_error = LED_OFF();
 c34:	0e 94 b1 05 	call	0xb62	; 0xb62 <LED_OFF>
 c38:	8b 83       	std	Y+3, r24	; 0x03
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <Toggel_LED+0x48>
        }
        else if (low_value == LED_PTR->PIN_VAL)
 c3c:	e9 81       	ldd	r30, Y+1	; 0x01
 c3e:	fa 81       	ldd	r31, Y+2	; 0x02
 c40:	83 81       	ldd	r24, Z+3	; 0x03
 c42:	88 23       	and	r24, r24
 c44:	19 f4       	brne	.+6      	; 0xc4c <Toggel_LED+0x48>
        {
            local_error = LED_ON();
 c46:	0e 94 5f 05 	call	0xabe	; 0xabe <LED_ON>
 c4a:	8b 83       	std	Y+3, r24	; 0x03
        }
        
    }
    

    return local_error;
 c4c:	8b 81       	ldd	r24, Y+3	; 0x03
}
 c4e:	0f 90       	pop	r0
 c50:	0f 90       	pop	r0
 c52:	0f 90       	pop	r0
 c54:	cf 91       	pop	r28
 c56:	df 91       	pop	r29
 c58:	08 95       	ret

00000c5a <main>:
 */
#include "../HAL/LED/LED.h"

u8 x;
int main(void)
{
 c5a:	df 93       	push	r29
 c5c:	cf 93       	push	r28
 c5e:	cd b7       	in	r28, 0x3d	; 61
 c60:	de b7       	in	r29, 0x3e	; 62

	while (1)
	{
		Seven_Segment(3);
 c62:	83 e0       	ldi	r24, 0x03	; 3
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Seven_Segment>
 c6a:	fb cf       	rjmp	.-10     	; 0xc62 <main+0x8>

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
