
AVR32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001d22  00001db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800092  00800092  00001de8  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016e2  00000000  00000000  00003cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000053ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000054fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000566a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000072b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000819e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <main>
      8a:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setPortValue>:
#include "GPIO.h"

Error_state GPIO_setPortValue(u8 portId, u8 value)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setPortValue+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setPortValue+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	88 23       	and	r24, r24
     b60:	61 f0       	breq	.+24     	; 0xb7a <GPIO_setPortValue+0x34>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	49 f0       	breq	.+18     	; 0xb7a <GPIO_setPortValue+0x34>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	31 f0       	breq	.+12     	; 0xb7a <GPIO_setPortValue+0x34>
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	19 f0       	breq	.+6      	; 0xb7a <GPIO_setPortValue+0x34>
    {
        local_err = Unvalid_Port;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	33 c0       	rjmp	.+102    	; 0xbe0 <GPIO_setPortValue+0x9a>
    }
    else
    {
        local_err = Valid_Port;
     b7a:	19 82       	std	Y+1, r1	; 0x01
        switch (portId)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	3d 83       	std	Y+5, r19	; 0x05
     b84:	2c 83       	std	Y+4, r18	; 0x04
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	9d 81       	ldd	r25, Y+5	; 0x05
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	d1 f0       	breq	.+52     	; 0xbc4 <GPIO_setPortValue+0x7e>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	2c f4       	brge	.+10     	; 0xba4 <GPIO_setPortValue+0x5e>
     b9a:	8c 81       	ldd	r24, Y+4	; 0x04
     b9c:	9d 81       	ldd	r25, Y+5	; 0x05
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	61 f0       	breq	.+24     	; 0xbba <GPIO_setPortValue+0x74>
     ba2:	1e c0       	rjmp	.+60     	; 0xbe0 <GPIO_setPortValue+0x9a>
     ba4:	2c 81       	ldd	r18, Y+4	; 0x04
     ba6:	3d 81       	ldd	r19, Y+5	; 0x05
     ba8:	22 30       	cpi	r18, 0x02	; 2
     baa:	31 05       	cpc	r19, r1
     bac:	81 f0       	breq	.+32     	; 0xbce <GPIO_setPortValue+0x88>
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	9d 81       	ldd	r25, Y+5	; 0x05
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	81 f0       	breq	.+32     	; 0xbd8 <GPIO_setPortValue+0x92>
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <GPIO_setPortValue+0x9a>
        {
        case PORTA:
            PORTA_Ptr = value;
     bba:	eb e3       	ldi	r30, 0x3B	; 59
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	80 83       	st	Z, r24
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <GPIO_setPortValue+0x9a>
            break;
        case PORTB:
            PORTB_Ptr = value;
     bc4:	e8 e3       	ldi	r30, 0x38	; 56
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	80 83       	st	Z, r24
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <GPIO_setPortValue+0x9a>
            break;
        case PORTC:
            PORTC_Ptr = value;
     bce:	e5 e3       	ldi	r30, 0x35	; 53
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	80 83       	st	Z, r24
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <GPIO_setPortValue+0x9a>
            break;
        case PORTD:
            PORTD_Ptr = value;
     bd8:	e2 e3       	ldi	r30, 0x32	; 50
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	80 83       	st	Z, r24
            break;
        default:
            break;
        }
    }
    return local_err;
     be0:	89 81       	ldd	r24, Y+1	; 0x01
}
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <GPIO_setPinValue>:

Error_state GPIO_setPinValue(u8 portId, u8 PinId, u8 value)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	28 97       	sbiw	r28, 0x08	; 8
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	8a 83       	std	Y+2, r24	; 0x02
     c08:	6b 83       	std	Y+3, r22	; 0x03
     c0a:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	88 23       	and	r24, r24
     c14:	61 f0       	breq	.+24     	; 0xc2e <GPIO_setPinValue+0x3c>
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	49 f0       	breq	.+18     	; 0xc2e <GPIO_setPinValue+0x3c>
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	31 f0       	breq	.+12     	; 0xc2e <GPIO_setPinValue+0x3c>
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	19 f0       	breq	.+6      	; 0xc2e <GPIO_setPinValue+0x3c>
    {
        local_err = Unvalid_Port;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	32 c1       	rjmp	.+612    	; 0xe92 <GPIO_setPinValue+0x2a0>
    }
    else
    {
        if (PinId > MAX_PIN)
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	18 f0       	brcs	.+6      	; 0xc3a <GPIO_setPinValue+0x48>
        {
            local_err = Unvalid_pin;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	2c c1       	rjmp	.+600    	; 0xe92 <GPIO_setPinValue+0x2a0>
        }
        else
        {
            local_err = Valid_pin;
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	89 83       	std	Y+1, r24	; 0x01
            if (value == high_value)
     c3e:	8c 81       	ldd	r24, Y+4	; 0x04
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	09 f0       	breq	.+2      	; 0xc46 <GPIO_setPinValue+0x54>
     c44:	92 c0       	rjmp	.+292    	; 0xd6a <GPIO_setPinValue+0x178>
            {
                switch (portId)
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	38 87       	std	Y+8, r19	; 0x08
     c4e:	2f 83       	std	Y+7, r18	; 0x07
     c50:	6f 81       	ldd	r22, Y+7	; 0x07
     c52:	78 85       	ldd	r23, Y+8	; 0x08
     c54:	61 30       	cpi	r22, 0x01	; 1
     c56:	71 05       	cpc	r23, r1
     c58:	69 f1       	breq	.+90     	; 0xcb4 <GPIO_setPinValue+0xc2>
     c5a:	8f 81       	ldd	r24, Y+7	; 0x07
     c5c:	98 85       	ldd	r25, Y+8	; 0x08
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	91 05       	cpc	r25, r1
     c62:	34 f4       	brge	.+12     	; 0xc70 <GPIO_setPinValue+0x7e>
     c64:	2f 81       	ldd	r18, Y+7	; 0x07
     c66:	38 85       	ldd	r19, Y+8	; 0x08
     c68:	21 15       	cp	r18, r1
     c6a:	31 05       	cpc	r19, r1
     c6c:	69 f0       	breq	.+26     	; 0xc88 <GPIO_setPinValue+0x96>
     c6e:	64 c0       	rjmp	.+200    	; 0xd38 <GPIO_setPinValue+0x146>
     c70:	6f 81       	ldd	r22, Y+7	; 0x07
     c72:	78 85       	ldd	r23, Y+8	; 0x08
     c74:	62 30       	cpi	r22, 0x02	; 2
     c76:	71 05       	cpc	r23, r1
     c78:	99 f1       	breq	.+102    	; 0xce0 <GPIO_setPinValue+0xee>
     c7a:	8f 81       	ldd	r24, Y+7	; 0x07
     c7c:	98 85       	ldd	r25, Y+8	; 0x08
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	91 05       	cpc	r25, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <GPIO_setPinValue+0x94>
     c84:	43 c0       	rjmp	.+134    	; 0xd0c <GPIO_setPinValue+0x11a>
     c86:	58 c0       	rjmp	.+176    	; 0xd38 <GPIO_setPinValue+0x146>
                {
                case PORTA:
                    PORTA_Ptr = PORTA_Ptr | (value << PinId);
     c88:	ab e3       	ldi	r26, 0x3B	; 59
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	eb e3       	ldi	r30, 0x3B	; 59
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8c 81       	ldd	r24, Y+4	; 0x04
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	b9 01       	movw	r22, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <GPIO_setPinValue+0xb6>
     ca4:	66 0f       	add	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <GPIO_setPinValue+0xb2>
     cac:	cb 01       	movw	r24, r22
     cae:	84 2b       	or	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	ef c0       	rjmp	.+478    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                case PORTB:
                    PORTB_Ptr = PORTB_Ptr | (value << PinId);
     cb4:	a8 e3       	ldi	r26, 0x38	; 56
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e8 e3       	ldi	r30, 0x38	; 56
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	b9 01       	movw	r22, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_setPinValue+0xe2>
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	8a 95       	dec	r24
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_setPinValue+0xde>
     cd8:	cb 01       	movw	r24, r22
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	d9 c0       	rjmp	.+434    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                case PORTC:
                    PORTC_Ptr = PORTC_Ptr | (value << PinId);
     ce0:	a5 e3       	ldi	r26, 0x35	; 53
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e5 e3       	ldi	r30, 0x35	; 53
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	b9 01       	movw	r22, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <GPIO_setPinValue+0x10e>
     cfc:	66 0f       	add	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	8a 95       	dec	r24
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <GPIO_setPinValue+0x10a>
     d04:	cb 01       	movw	r24, r22
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	c3 c0       	rjmp	.+390    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                case PORTD:
                    PORTD_Ptr = PORTD_Ptr | (value << PinId);
     d0c:	a2 e3       	ldi	r26, 0x32	; 50
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	b9 01       	movw	r22, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setPinValue+0x13a>
     d28:	66 0f       	add	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setPinValue+0x136>
     d30:	cb 01       	movw	r24, r22
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	ad c0       	rjmp	.+346    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                default:
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     d38:	ab e3       	ldi	r26, 0x3B	; 59
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	eb e3       	ldi	r30, 0x3B	; 59
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     d44:	ab e3       	ldi	r26, 0x3B	; 59
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	eb e3       	ldi	r30, 0x3B	; 59
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     d50:	ab e3       	ldi	r26, 0x3B	; 59
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	eb e3       	ldi	r30, 0x3B	; 59
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8c 93       	st	X, r24
                    PORTD_Ptr = PORTD_Ptr | 0x00;
     d5c:	a2 e3       	ldi	r26, 0x32	; 50
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e2 e3       	ldi	r30, 0x32	; 50
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8c 93       	st	X, r24
     d68:	94 c0       	rjmp	.+296    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                }
            }
            else if (value == low_value)
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	88 23       	and	r24, r24
     d6e:	09 f0       	breq	.+2      	; 0xd72 <GPIO_setPinValue+0x180>
     d70:	8e c0       	rjmp	.+284    	; 0xe8e <GPIO_setPinValue+0x29c>
            {
                switch (portId)
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	3e 83       	std	Y+6, r19	; 0x06
     d7a:	2d 83       	std	Y+5, r18	; 0x05
     d7c:	6d 81       	ldd	r22, Y+5	; 0x05
     d7e:	7e 81       	ldd	r23, Y+6	; 0x06
     d80:	61 30       	cpi	r22, 0x01	; 1
     d82:	71 05       	cpc	r23, r1
     d84:	61 f1       	breq	.+88     	; 0xdde <GPIO_setPinValue+0x1ec>
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	91 05       	cpc	r25, r1
     d8e:	34 f4       	brge	.+12     	; 0xd9c <GPIO_setPinValue+0x1aa>
     d90:	2d 81       	ldd	r18, Y+5	; 0x05
     d92:	3e 81       	ldd	r19, Y+6	; 0x06
     d94:	21 15       	cp	r18, r1
     d96:	31 05       	cpc	r19, r1
     d98:	69 f0       	breq	.+26     	; 0xdb4 <GPIO_setPinValue+0x1c2>
     d9a:	60 c0       	rjmp	.+192    	; 0xe5c <GPIO_setPinValue+0x26a>
     d9c:	6d 81       	ldd	r22, Y+5	; 0x05
     d9e:	7e 81       	ldd	r23, Y+6	; 0x06
     da0:	62 30       	cpi	r22, 0x02	; 2
     da2:	71 05       	cpc	r23, r1
     da4:	89 f1       	breq	.+98     	; 0xe08 <GPIO_setPinValue+0x216>
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <GPIO_setPinValue+0x1c0>
     db0:	40 c0       	rjmp	.+128    	; 0xe32 <GPIO_setPinValue+0x240>
     db2:	54 c0       	rjmp	.+168    	; 0xe5c <GPIO_setPinValue+0x26a>
                {
                case PORTA:

                    PORTA_Ptr = PORTA_Ptr & ~(1 << PinId);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_setPinValue+0x1e0>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_setPinValue+0x1dc>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	5a c0       	rjmp	.+180    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                case PORTB:
                    PORTB_Ptr = PORTB_Ptr & ~(1 << PinId);
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_setPinValue+0x20a>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_setPinValue+0x206>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	45 c0       	rjmp	.+138    	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                case PORTC:
                    PORTC_Ptr = PORTC_Ptr & ~(1 << PinId);
     e08:	a5 e3       	ldi	r26, 0x35	; 53
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e3       	ldi	r30, 0x35	; 53
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_setPinValue+0x234>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_setPinValue+0x230>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	30 c0       	rjmp	.+96     	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                case PORTD:
                    PORTD_Ptr = PORTD_Ptr & ~(1 << PinId);
     e32:	a2 e3       	ldi	r26, 0x32	; 50
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e2 e3       	ldi	r30, 0x32	; 50
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_setPinValue+0x25e>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_setPinValue+0x25a>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	1b c0       	rjmp	.+54     	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                default:
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     e5c:	ab e3       	ldi	r26, 0x3B	; 59
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	eb e3       	ldi	r30, 0x3B	; 59
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     e74:	ab e3       	ldi	r26, 0x3B	; 59
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	eb e3       	ldi	r30, 0x3B	; 59
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8c 93       	st	X, r24
                    PORTD_Ptr = PORTD_Ptr | 0x00;
     e80:	a2 e3       	ldi	r26, 0x32	; 50
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e2 e3       	ldi	r30, 0x32	; 50
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8c 93       	st	X, r24
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_setPinValue+0x2a0>
                    break;
                }
            }
            else
            {
                local_err = Can_not_assign_to_pin;
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    return local_err;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
}
     e94:	28 96       	adiw	r28, 0x08	; 8
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <GPIO_setPortDirection>:

Error_state GPIO_setPortDirection(u8 portId, u8 PortDirectionValue)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <GPIO_setPortDirection+0x6>
     eac:	00 d0       	rcall	.+0      	; 0xeae <GPIO_setPortDirection+0x8>
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	8a 83       	std	Y+2, r24	; 0x02
     eb6:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	88 23       	and	r24, r24
     ec0:	61 f0       	breq	.+24     	; 0xeda <GPIO_setPortDirection+0x34>
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	49 f0       	breq	.+18     	; 0xeda <GPIO_setPortDirection+0x34>
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	31 f0       	breq	.+12     	; 0xeda <GPIO_setPortDirection+0x34>
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	19 f0       	breq	.+6      	; 0xeda <GPIO_setPortDirection+0x34>
    {
        local_err = Unvalid_Port;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	4c c0       	rjmp	.+152    	; 0xf72 <GPIO_setPortDirection+0xcc>
    }
    else
    {
        local_err = Valid_Port;
     eda:	19 82       	std	Y+1, r1	; 0x01
        switch (portId)
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3d 83       	std	Y+5, r19	; 0x05
     ee4:	2c 83       	std	Y+4, r18	; 0x04
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	9d 81       	ldd	r25, Y+5	; 0x05
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	d1 f0       	breq	.+52     	; 0xf24 <GPIO_setPortDirection+0x7e>
     ef0:	2c 81       	ldd	r18, Y+4	; 0x04
     ef2:	3d 81       	ldd	r19, Y+5	; 0x05
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	2c f4       	brge	.+10     	; 0xf04 <GPIO_setPortDirection+0x5e>
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	61 f0       	breq	.+24     	; 0xf1a <GPIO_setPortDirection+0x74>
     f02:	1f c0       	rjmp	.+62     	; 0xf42 <GPIO_setPortDirection+0x9c>
     f04:	2c 81       	ldd	r18, Y+4	; 0x04
     f06:	3d 81       	ldd	r19, Y+5	; 0x05
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	81 f0       	breq	.+32     	; 0xf2e <GPIO_setPortDirection+0x88>
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	9d 81       	ldd	r25, Y+5	; 0x05
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	91 05       	cpc	r25, r1
     f16:	81 f0       	breq	.+32     	; 0xf38 <GPIO_setPortDirection+0x92>
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <GPIO_setPortDirection+0x9c>
        {
        case PORTA:
            DDRA_Ptr = PortDirectionValue;
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	80 83       	st	Z, r24
     f22:	27 c0       	rjmp	.+78     	; 0xf72 <GPIO_setPortDirection+0xcc>
            break;
        case PORTB:
            DDRB_Ptr = PortDirectionValue;
     f24:	e7 e3       	ldi	r30, 0x37	; 55
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	80 83       	st	Z, r24
     f2c:	22 c0       	rjmp	.+68     	; 0xf72 <GPIO_setPortDirection+0xcc>
            break;
        case PORTC:
            DDRC_Ptr = PortDirectionValue;
     f2e:	e4 e3       	ldi	r30, 0x34	; 52
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	80 83       	st	Z, r24
     f36:	1d c0       	rjmp	.+58     	; 0xf72 <GPIO_setPortDirection+0xcc>
            break;
        case PORTD:
            DDRD_Ptr = PortDirectionValue;
     f38:	e1 e3       	ldi	r30, 0x31	; 49
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	80 83       	st	Z, r24
     f40:	18 c0       	rjmp	.+48     	; 0xf72 <GPIO_setPortDirection+0xcc>
            break;
        default:
            DDRA_Ptr |= (0x00);
     f42:	aa e3       	ldi	r26, 0x3A	; 58
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e3       	ldi	r30, 0x3A	; 58
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8c 93       	st	X, r24
            DDRB_Ptr |= (0x00);
     f4e:	a7 e3       	ldi	r26, 0x37	; 55
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e7 e3       	ldi	r30, 0x37	; 55
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8c 93       	st	X, r24
            DDRC_Ptr |= (0x00);
     f5a:	a4 e3       	ldi	r26, 0x34	; 52
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e4 e3       	ldi	r30, 0x34	; 52
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8c 93       	st	X, r24
            DDRD_Ptr |= (0x00);
     f66:	a1 e3       	ldi	r26, 0x31	; 49
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e1 e3       	ldi	r30, 0x31	; 49
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8c 93       	st	X, r24
            break;
        }
    }
    return local_err;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <GPIO_setPindDirection>:

Error_state GPIO_setPindDirection(u8 portId, u8 PinId, u8 PintDirectionValue)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	28 97       	sbiw	r28, 0x08	; 8
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	8a 83       	std	Y+2, r24	; 0x02
     f9a:	6b 83       	std	Y+3, r22	; 0x03
     f9c:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 23       	and	r24, r24
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <GPIO_setPindDirection+0x3c>
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	49 f0       	breq	.+18     	; 0xfc0 <GPIO_setPindDirection+0x3c>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <GPIO_setPindDirection+0x3c>
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <GPIO_setPindDirection+0x3c>
    {
        local_err = Unvalid_Port;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	3b c1       	rjmp	.+630    	; 0x1236 <GPIO_setPindDirection+0x2b2>
    }
    else
    {
        local_err = Valid_Port;
     fc0:	19 82       	std	Y+1, r1	; 0x01
        if (PinId > MAX_PIN)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 30       	cpi	r24, 0x08	; 8
     fc6:	18 f0       	brcs	.+6      	; 0xfce <GPIO_setPindDirection+0x4a>
        {
            local_err = Unvalid_pin;
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	34 c1       	rjmp	.+616    	; 0x1236 <GPIO_setPindDirection+0x2b2>
        }
        else
        {
            local_err = Valid_pin;
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	89 83       	std	Y+1, r24	; 0x01
            if (Output_direction == PintDirectionValue)
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <GPIO_setPindDirection+0x56>
     fd8:	92 c0       	rjmp	.+292    	; 0x10fe <GPIO_setPindDirection+0x17a>
            {
                switch (portId)
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	38 87       	std	Y+8, r19	; 0x08
     fe2:	2f 83       	std	Y+7, r18	; 0x07
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	61 30       	cpi	r22, 0x01	; 1
     fea:	71 05       	cpc	r23, r1
     fec:	69 f1       	breq	.+90     	; 0x1048 <GPIO_setPindDirection+0xc4>
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	98 85       	ldd	r25, Y+8	; 0x08
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	91 05       	cpc	r25, r1
     ff6:	34 f4       	brge	.+12     	; 0x1004 <GPIO_setPindDirection+0x80>
     ff8:	2f 81       	ldd	r18, Y+7	; 0x07
     ffa:	38 85       	ldd	r19, Y+8	; 0x08
     ffc:	21 15       	cp	r18, r1
     ffe:	31 05       	cpc	r19, r1
    1000:	69 f0       	breq	.+26     	; 0x101c <GPIO_setPindDirection+0x98>
    1002:	64 c0       	rjmp	.+200    	; 0x10cc <GPIO_setPindDirection+0x148>
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	62 30       	cpi	r22, 0x02	; 2
    100a:	71 05       	cpc	r23, r1
    100c:	99 f1       	breq	.+102    	; 0x1074 <GPIO_setPindDirection+0xf0>
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <GPIO_setPindDirection+0x96>
    1018:	43 c0       	rjmp	.+134    	; 0x10a0 <GPIO_setPindDirection+0x11c>
    101a:	58 c0       	rjmp	.+176    	; 0x10cc <GPIO_setPindDirection+0x148>
                {
                case PORTA:
                    DDRA_Ptr = DDRA_Ptr | (PintDirectionValue << PinId);
    101c:	aa e3       	ldi	r26, 0x3A	; 58
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ea e3       	ldi	r30, 0x3A	; 58
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b9 01       	movw	r22, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setPindDirection+0xb8>
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setPindDirection+0xb4>
    1040:	cb 01       	movw	r24, r22
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	f7 c0       	rjmp	.+494    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTB:
                    DDRB_Ptr = DDRB_Ptr | (PintDirectionValue << PinId);
    1048:	a7 e3       	ldi	r26, 0x37	; 55
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e7 e3       	ldi	r30, 0x37	; 55
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	b9 01       	movw	r22, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <GPIO_setPindDirection+0xe4>
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	8a 95       	dec	r24
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <GPIO_setPindDirection+0xe0>
    106c:	cb 01       	movw	r24, r22
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	e1 c0       	rjmp	.+450    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTC:
                    DDRC_Ptr = DDRC_Ptr | (PintDirectionValue << PinId);
    1074:	a4 e3       	ldi	r26, 0x34	; 52
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e4 e3       	ldi	r30, 0x34	; 52
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_setPindDirection+0x110>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_setPindDirection+0x10c>
    1098:	cb 01       	movw	r24, r22
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	cb c0       	rjmp	.+406    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTD:
                    DDRD_Ptr = DDRD_Ptr | (PintDirectionValue << PinId);
    10a0:	a1 e3       	ldi	r26, 0x31	; 49
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	b9 01       	movw	r22, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <GPIO_setPindDirection+0x13c>
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <GPIO_setPindDirection+0x138>
    10c4:	cb 01       	movw	r24, r22
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	b5 c0       	rjmp	.+362    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                default:
                    DDRA_Ptr |= (0x00);
    10cc:	aa e3       	ldi	r26, 0x3A	; 58
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ea e3       	ldi	r30, 0x3A	; 58
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8c 93       	st	X, r24
                    DDRB_Ptr |= (0x00);
    10d8:	a7 e3       	ldi	r26, 0x37	; 55
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e7 e3       	ldi	r30, 0x37	; 55
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8c 93       	st	X, r24
                    DDRC_Ptr |= (0x00);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8c 93       	st	X, r24
                    DDRD_Ptr |= (0x00);
    10f0:	a1 e3       	ldi	r26, 0x31	; 49
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e1 e3       	ldi	r30, 0x31	; 49
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8c 93       	st	X, r24
    10fc:	9c c0       	rjmp	.+312    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                }
            }
            else if (low_value == PintDirectionValue)
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	88 23       	and	r24, r24
    1102:	09 f0       	breq	.+2      	; 0x1106 <GPIO_setPindDirection+0x182>
    1104:	96 c0       	rjmp	.+300    	; 0x1232 <GPIO_setPindDirection+0x2ae>
            {
                switch (portId)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3e 83       	std	Y+6, r19	; 0x06
    110e:	2d 83       	std	Y+5, r18	; 0x05
    1110:	6d 81       	ldd	r22, Y+5	; 0x05
    1112:	7e 81       	ldd	r23, Y+6	; 0x06
    1114:	61 30       	cpi	r22, 0x01	; 1
    1116:	71 05       	cpc	r23, r1
    1118:	71 f1       	breq	.+92     	; 0x1176 <GPIO_setPindDirection+0x1f2>
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	91 05       	cpc	r25, r1
    1122:	34 f4       	brge	.+12     	; 0x1130 <GPIO_setPindDirection+0x1ac>
    1124:	2d 81       	ldd	r18, Y+5	; 0x05
    1126:	3e 81       	ldd	r19, Y+6	; 0x06
    1128:	21 15       	cp	r18, r1
    112a:	31 05       	cpc	r19, r1
    112c:	69 f0       	breq	.+26     	; 0x1148 <GPIO_setPindDirection+0x1c4>
    112e:	68 c0       	rjmp	.+208    	; 0x1200 <GPIO_setPindDirection+0x27c>
    1130:	6d 81       	ldd	r22, Y+5	; 0x05
    1132:	7e 81       	ldd	r23, Y+6	; 0x06
    1134:	62 30       	cpi	r22, 0x02	; 2
    1136:	71 05       	cpc	r23, r1
    1138:	a9 f1       	breq	.+106    	; 0x11a4 <GPIO_setPindDirection+0x220>
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <GPIO_setPindDirection+0x1c2>
    1144:	46 c0       	rjmp	.+140    	; 0x11d2 <GPIO_setPindDirection+0x24e>
    1146:	5c c0       	rjmp	.+184    	; 0x1200 <GPIO_setPindDirection+0x27c>
                {
                case PORTA:

                    DDRA_Ptr = DDRA_Ptr & ~(PintDirectionValue << PinId);
    1148:	aa e3       	ldi	r26, 0x3A	; 58
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea e3       	ldi	r30, 0x3A	; 58
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	b9 01       	movw	r22, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setPindDirection+0x1e4>
    1164:	66 0f       	add	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setPindDirection+0x1e0>
    116c:	cb 01       	movw	r24, r22
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	60 c0       	rjmp	.+192    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTB:
                    DDRB_Ptr = DDRB_Ptr & ~(PintDirectionValue << PinId);
    1176:	a7 e3       	ldi	r26, 0x37	; 55
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e7 e3       	ldi	r30, 0x37	; 55
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	b9 01       	movw	r22, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_setPindDirection+0x212>
    1192:	66 0f       	add	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_setPindDirection+0x20e>
    119a:	cb 01       	movw	r24, r22
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	49 c0       	rjmp	.+146    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTC:
                    DDRC_Ptr = DDRC_Ptr & ~(PintDirectionValue << PinId);
    11a4:	a4 e3       	ldi	r26, 0x34	; 52
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e4 e3       	ldi	r30, 0x34	; 52
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b9 01       	movw	r22, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <GPIO_setPindDirection+0x240>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <GPIO_setPindDirection+0x23c>
    11c8:	cb 01       	movw	r24, r22
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	32 c0       	rjmp	.+100    	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTD:
                    DDRD_Ptr = DDRD_Ptr & ~(PintDirectionValue << PinId);
    11d2:	a1 e3       	ldi	r26, 0x31	; 49
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e1 e3       	ldi	r30, 0x31	; 49
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	b9 01       	movw	r22, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_setPindDirection+0x26e>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_setPindDirection+0x26a>
    11f6:	cb 01       	movw	r24, r22
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	1b c0       	rjmp	.+54     	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                default:
                    DDRA_Ptr |= (0x00);
    1200:	aa e3       	ldi	r26, 0x3A	; 58
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8c 93       	st	X, r24
                    DDRB_Ptr |= (0x00);
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8c 93       	st	X, r24
                    DDRC_Ptr |= (0x00);
    1218:	a4 e3       	ldi	r26, 0x34	; 52
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e4 e3       	ldi	r30, 0x34	; 52
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8c 93       	st	X, r24
                    DDRD_Ptr |= (0x00);
    1224:	a1 e3       	ldi	r26, 0x31	; 49
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e1 e3       	ldi	r30, 0x31	; 49
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8c 93       	st	X, r24
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <GPIO_setPindDirection+0x2b2>
                    break;
                }
            }
            else
            {
                local_err = Can_not_assign_to_pin;
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    return local_err;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
}
    1238:	28 96       	adiw	r28, 0x08	; 8
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <GPIO_getPortValue>:

Error_state GPIO_getPortValue(u8 portId, u8 *val)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_getPortValue+0x6>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <GPIO_getPortValue+0x8>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_getPortValue+0xa>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	7c 83       	std	Y+4, r23	; 0x04
    125c:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	88 23       	and	r24, r24
    1266:	61 f0       	breq	.+24     	; 0x1280 <GPIO_getPortValue+0x36>
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	49 f0       	breq	.+18     	; 0x1280 <GPIO_getPortValue+0x36>
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	31 f0       	breq	.+12     	; 0x1280 <GPIO_getPortValue+0x36>
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	19 f0       	breq	.+6      	; 0x1280 <GPIO_getPortValue+0x36>
    {
        local_err = Unvalid_Port;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	42 c0       	rjmp	.+132    	; 0x1304 <GPIO_getPortValue+0xba>
    }
    else
    {

        local_err = Valid_pin;
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	89 83       	std	Y+1, r24	; 0x01
        switch (portId)
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3e 83       	std	Y+6, r19	; 0x06
    128c:	2d 83       	std	Y+5, r18	; 0x05
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	e1 f0       	breq	.+56     	; 0x12d0 <GPIO_getPortValue+0x86>
    1298:	2d 81       	ldd	r18, Y+5	; 0x05
    129a:	3e 81       	ldd	r19, Y+6	; 0x06
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	2c f4       	brge	.+10     	; 0x12ac <GPIO_getPortValue+0x62>
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	61 f0       	breq	.+24     	; 0x12c2 <GPIO_getPortValue+0x78>
    12aa:	26 c0       	rjmp	.+76     	; 0x12f8 <GPIO_getPortValue+0xae>
    12ac:	2d 81       	ldd	r18, Y+5	; 0x05
    12ae:	3e 81       	ldd	r19, Y+6	; 0x06
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	a1 f0       	breq	.+40     	; 0x12de <GPIO_getPortValue+0x94>
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	91 05       	cpc	r25, r1
    12be:	b1 f0       	breq	.+44     	; 0x12ec <GPIO_getPortValue+0xa2>
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <GPIO_getPortValue+0xae>
        {
        case PORTA:
            *val = PINA_Ptr;
    12c2:	e9 e3       	ldi	r30, 0x39	; 57
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ca:	fc 81       	ldd	r31, Y+4	; 0x04
    12cc:	80 83       	st	Z, r24
    12ce:	14 c0       	rjmp	.+40     	; 0x12f8 <GPIO_getPortValue+0xae>
            break;
        case PORTB:
            *val = PINB_Ptr;
    12d0:	e6 e3       	ldi	r30, 0x36	; 54
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	eb 81       	ldd	r30, Y+3	; 0x03
    12d8:	fc 81       	ldd	r31, Y+4	; 0x04
    12da:	80 83       	st	Z, r24
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <GPIO_getPortValue+0xae>
            break;
        case PORTC:
            *val = PINC_Ptr;
    12de:	e3 e3       	ldi	r30, 0x33	; 51
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
    12e8:	80 83       	st	Z, r24
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <GPIO_getPortValue+0xae>
            break;
        case PORTD:
            *val = PIND_Ptr;
    12ec:	e0 e3       	ldi	r30, 0x30	; 48
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	eb 81       	ldd	r30, Y+3	; 0x03
    12f4:	fc 81       	ldd	r31, Y+4	; 0x04
    12f6:	80 83       	st	Z, r24
            break;
        default:
            break;
        }
        if (NULL == val)
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	11 f4       	brne	.+4      	; 0x1304 <GPIO_getPortValue+0xba>
        {
            local_err = NULL_POINTER;
    1300:	86 e0       	ldi	r24, 0x06	; 6
    1302:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return local_err;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
}
    1306:	26 96       	adiw	r28, 0x06	; 6
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <GPIO_getPIN>:

Error_state GPIO_getPIN(u8 portId, u8 PinId, u8 *val)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	27 97       	sbiw	r28, 0x07	; 7
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	6b 83       	std	Y+3, r22	; 0x03
    1330:	5d 83       	std	Y+5, r21	; 0x05
    1332:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	88 23       	and	r24, r24
    133c:	61 f0       	breq	.+24     	; 0x1356 <GPIO_getPIN+0x3e>
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	49 f0       	breq	.+18     	; 0x1356 <GPIO_getPIN+0x3e>
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	31 f0       	breq	.+12     	; 0x1356 <GPIO_getPIN+0x3e>
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	19 f0       	breq	.+6      	; 0x1356 <GPIO_getPIN+0x3e>
    {
        local_err = Unvalid_Port;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	7e c0       	rjmp	.+252    	; 0x1452 <GPIO_getPIN+0x13a>
    }
    else
    {
        if (PinId > MAX_PIN)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	18 f0       	brcs	.+6      	; 0x1362 <GPIO_getPIN+0x4a>
        {
            local_err = Unvalid_pin;
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	78 c0       	rjmp	.+240    	; 0x1452 <GPIO_getPIN+0x13a>
        }
        else
        {
            local_err = Valid_pin;
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	89 83       	std	Y+1, r24	; 0x01
            switch (portId)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3f 83       	std	Y+7, r19	; 0x07
    136e:	2e 83       	std	Y+6, r18	; 0x06
    1370:	4e 81       	ldd	r20, Y+6	; 0x06
    1372:	5f 81       	ldd	r21, Y+7	; 0x07
    1374:	41 30       	cpi	r20, 0x01	; 1
    1376:	51 05       	cpc	r21, r1
    1378:	59 f1       	breq	.+86     	; 0x13d0 <GPIO_getPIN+0xb8>
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	91 05       	cpc	r25, r1
    1382:	34 f4       	brge	.+12     	; 0x1390 <GPIO_getPIN+0x78>
    1384:	2e 81       	ldd	r18, Y+6	; 0x06
    1386:	3f 81       	ldd	r19, Y+7	; 0x07
    1388:	21 15       	cp	r18, r1
    138a:	31 05       	cpc	r19, r1
    138c:	69 f0       	breq	.+26     	; 0x13a8 <GPIO_getPIN+0x90>
    138e:	5b c0       	rjmp	.+182    	; 0x1446 <GPIO_getPIN+0x12e>
    1390:	4e 81       	ldd	r20, Y+6	; 0x06
    1392:	5f 81       	ldd	r21, Y+7	; 0x07
    1394:	42 30       	cpi	r20, 0x02	; 2
    1396:	51 05       	cpc	r21, r1
    1398:	79 f1       	breq	.+94     	; 0x13f8 <GPIO_getPIN+0xe0>
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <GPIO_getPIN+0x8e>
    13a4:	3d c0       	rjmp	.+122    	; 0x1420 <GPIO_getPIN+0x108>
    13a6:	4f c0       	rjmp	.+158    	; 0x1446 <GPIO_getPIN+0x12e>
            {
            case PORTA:
                *val = (PINA_Ptr >> PinId) & 1;
    13a8:	e9 e3       	ldi	r30, 0x39	; 57
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_getPIN+0xa8>
    13bc:	55 95       	asr	r21
    13be:	47 95       	ror	r20
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_getPIN+0xa4>
    13c4:	ca 01       	movw	r24, r20
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ca:	fd 81       	ldd	r31, Y+5	; 0x05
    13cc:	80 83       	st	Z, r24
    13ce:	3b c0       	rjmp	.+118    	; 0x1446 <GPIO_getPIN+0x12e>
                break;
            case PORTB:
                *val = (PINB_Ptr >> PinId) & 1;
    13d0:	e6 e3       	ldi	r30, 0x36	; 54
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_getPIN+0xd0>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_getPIN+0xcc>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	ec 81       	ldd	r30, Y+4	; 0x04
    13f2:	fd 81       	ldd	r31, Y+5	; 0x05
    13f4:	80 83       	st	Z, r24
    13f6:	27 c0       	rjmp	.+78     	; 0x1446 <GPIO_getPIN+0x12e>
                break;
            case PORTC:
                *val = (PINC_Ptr >> PinId) & 1;
    13f8:	e3 e3       	ldi	r30, 0x33	; 51
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_getPIN+0xf8>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_getPIN+0xf4>
    1414:	ca 01       	movw	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	ec 81       	ldd	r30, Y+4	; 0x04
    141a:	fd 81       	ldd	r31, Y+5	; 0x05
    141c:	80 83       	st	Z, r24
    141e:	13 c0       	rjmp	.+38     	; 0x1446 <GPIO_getPIN+0x12e>
                break;
            case PORTD:
                *val = (PIND_Ptr >> PinId) & 1;
    1420:	e0 e3       	ldi	r30, 0x30	; 48
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_getPIN+0x120>
    1434:	55 95       	asr	r21
    1436:	47 95       	ror	r20
    1438:	8a 95       	dec	r24
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_getPIN+0x11c>
    143c:	ca 01       	movw	r24, r20
    143e:	81 70       	andi	r24, 0x01	; 1
    1440:	ec 81       	ldd	r30, Y+4	; 0x04
    1442:	fd 81       	ldd	r31, Y+5	; 0x05
    1444:	80 83       	st	Z, r24
                break;
            default:
                break;
            }
            if (NULL == val)
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	11 f4       	brne	.+4      	; 0x1452 <GPIO_getPIN+0x13a>
            {
                local_err = NULL_POINTER;
    144e:	86 e0       	ldi	r24, 0x06	; 6
    1450:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }

    return local_err;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
}
    1454:	27 96       	adiw	r28, 0x07	; 7
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <Seven_Segment>:
    0x07, // 7
    0x7F, // 8
    0x6F  // 9
};
Error_state Seven_Segment(u8 numebr, u8 seven_seg_id)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <Seven_Segment+0x6>
    146c:	00 d0       	rcall	.+0      	; 0x146e <Seven_Segment+0x8>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8c 83       	std	Y+4, r24	; 0x04
    1476:	6d 83       	std	Y+5, r22	; 0x05
    Error_state local_err = Unvalid_Port;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	8b 83       	std	Y+3, r24	; 0x03
    Glopal_ptr = NULL;
    147c:	10 92 93 00 	sts	0x0093, r1
    1480:	10 92 92 00 	sts	0x0092, r1
    for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    1484:	1a 82       	std	Y+2, r1	; 0x02
    1486:	0c c0       	rjmp	.+24     	; 0x14a0 <Seven_Segment+0x3a>
    {
        if (LoopIteratorOne == seven_seg_id)
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	98 17       	cp	r25, r24
    148e:	19 f4       	brne	.+6      	; 0x1496 <Seven_Segment+0x30>
        {
        	local_err = SS_valid;
    1490:	8c e0       	ldi	r24, 0x0C	; 12
    1492:	8b 83       	std	Y+3, r24	; 0x03
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <Seven_Segment+0x44>
            break;
        }
        else
        {
        	local_err = SS_not_valid;
    1496:	8d e0       	ldi	r24, 0x0D	; 13
    1498:	8b 83       	std	Y+3, r24	; 0x03
};
Error_state Seven_Segment(u8 numebr, u8 seven_seg_id)
{
    Error_state local_err = Unvalid_Port;
    Glopal_ptr = NULL;
    for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	90 91 74 00 	lds	r25, 0x0074
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	89 17       	cp	r24, r25
    14a8:	78 f3       	brcs	.-34     	; 0x1488 <Seven_Segment+0x22>
        else
        {
        	local_err = SS_not_valid;
        }
    }
    Glopal_ptr = &seven_segments_arr[seven_seg_id];
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	c9 01       	movw	r24, r18
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	82 0f       	add	r24, r18
    14b8:	93 1f       	adc	r25, r19
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	88 59       	subi	r24, 0x98	; 152
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	90 93 93 00 	sts	0x0093, r25
    14c6:	80 93 92 00 	sts	0x0092, r24
    if (Glopal_ptr == NULL)
    14ca:	80 91 92 00 	lds	r24, 0x0092
    14ce:	90 91 93 00 	lds	r25, 0x0093
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	19 f4       	brne	.+6      	; 0x14dc <Seven_Segment+0x76>
    {
        local_err = NULL_POINTER;
    14d6:	86 e0       	ldi	r24, 0x06	; 6
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	c1 c0       	rjmp	.+386    	; 0x165e <Seven_Segment+0x1f8>
    }
    else
    {
        if (numebr > 9)
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	8a 30       	cpi	r24, 0x0A	; 10
    14e0:	18 f0       	brcs	.+6      	; 0x14e8 <Seven_Segment+0x82>
        {
            local_err = Can_not_assign_to_SS;
    14e2:	8b e0       	ldi	r24, 0x0B	; 11
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	bb c0       	rjmp	.+374    	; 0x165e <Seven_Segment+0x1f8>
        }
        else
        {
            if ((PORTA != Glopal_ptr->PORT) && (PORTB != Glopal_ptr->PORT) && (PORTC != Glopal_ptr->PORT) && (PORTD != Glopal_ptr->PORT))
    14e8:	e0 91 92 00 	lds	r30, 0x0092
    14ec:	f0 91 93 00 	lds	r31, 0x0093
    14f0:	81 81       	ldd	r24, Z+1	; 0x01
    14f2:	88 23       	and	r24, r24
    14f4:	c1 f0       	breq	.+48     	; 0x1526 <Seven_Segment+0xc0>
    14f6:	e0 91 92 00 	lds	r30, 0x0092
    14fa:	f0 91 93 00 	lds	r31, 0x0093
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	89 f0       	breq	.+34     	; 0x1526 <Seven_Segment+0xc0>
    1504:	e0 91 92 00 	lds	r30, 0x0092
    1508:	f0 91 93 00 	lds	r31, 0x0093
    150c:	81 81       	ldd	r24, Z+1	; 0x01
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	51 f0       	breq	.+20     	; 0x1526 <Seven_Segment+0xc0>
    1512:	e0 91 92 00 	lds	r30, 0x0092
    1516:	f0 91 93 00 	lds	r31, 0x0093
    151a:	81 81       	ldd	r24, Z+1	; 0x01
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	19 f0       	breq	.+6      	; 0x1526 <Seven_Segment+0xc0>
            {
                local_err = Unvalid_Port;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	8b 83       	std	Y+3, r24	; 0x03
    1524:	9c c0       	rjmp	.+312    	; 0x165e <Seven_Segment+0x1f8>
            }
            else
            {
                for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    1526:	19 82       	std	Y+1, r1	; 0x01
    1528:	10 c0       	rjmp	.+32     	; 0x154a <Seven_Segment+0xe4>
                {
                    if (LoopIteratorOne == Glopal_ptr->SEVEN_SEG_ID)
    152a:	e0 91 92 00 	lds	r30, 0x0092
    152e:	f0 91 93 00 	lds	r31, 0x0093
    1532:	90 81       	ld	r25, Z
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	98 17       	cp	r25, r24
    1538:	19 f4       	brne	.+6      	; 0x1540 <Seven_Segment+0xda>
                    {
                        local_err = SS_valid;
    153a:	8c e0       	ldi	r24, 0x0C	; 12
    153c:	8b 83       	std	Y+3, r24	; 0x03
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <Seven_Segment+0xee>
                        break;
                    }
                    else
                    {
                        local_err = SS_not_valid;
    1540:	8d e0       	ldi	r24, 0x0D	; 13
    1542:	8b 83       	std	Y+3, r24	; 0x03
            {
                local_err = Unvalid_Port;
            }
            else
            {
                for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	90 91 74 00 	lds	r25, 0x0074
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	89 17       	cp	r24, r25
    1552:	58 f3       	brcs	.-42     	; 0x152a <Seven_Segment+0xc4>
                    else
                    {
                        local_err = SS_not_valid;
                    }
                }
                if (SS_valid == local_err)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	8c 30       	cpi	r24, 0x0C	; 12
    1558:	09 f0       	breq	.+2      	; 0x155c <Seven_Segment+0xf6>
    155a:	81 c0       	rjmp	.+258    	; 0x165e <Seven_Segment+0x1f8>
                {
                    if (comman_anode == Glopal_ptr->SEVEN_SEG_type)
    155c:	e0 91 92 00 	lds	r30, 0x0092
    1560:	f0 91 93 00 	lds	r31, 0x0093
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	d1 f5       	brne	.+116    	; 0x15de <Seven_Segment+0x178>
                    {
                        GPIO_setPindDirection(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Out_Port_direction);
    156a:	e0 91 92 00 	lds	r30, 0x0092
    156e:	f0 91 93 00 	lds	r31, 0x0093
    1572:	83 81       	ldd	r24, Z+3	; 0x03
    1574:	e0 91 92 00 	lds	r30, 0x0092
    1578:	f0 91 93 00 	lds	r31, 0x0093
    157c:	94 81       	ldd	r25, Z+4	; 0x04
    157e:	69 2f       	mov	r22, r25
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	0e 94 c2 07 	call	0xf84	; 0xf84 <GPIO_setPindDirection>
                        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Glopal_ptr->SEVEN_SEG_Enable.value);
    1586:	e0 91 92 00 	lds	r30, 0x0092
    158a:	f0 91 93 00 	lds	r31, 0x0093
    158e:	83 81       	ldd	r24, Z+3	; 0x03
    1590:	e0 91 92 00 	lds	r30, 0x0092
    1594:	f0 91 93 00 	lds	r31, 0x0093
    1598:	24 81       	ldd	r18, Z+4	; 0x04
    159a:	e0 91 92 00 	lds	r30, 0x0092
    159e:	f0 91 93 00 	lds	r31, 0x0093
    15a2:	95 81       	ldd	r25, Z+5	; 0x05
    15a4:	62 2f       	mov	r22, r18
    15a6:	49 2f       	mov	r20, r25
    15a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GPIO_setPinValue>
                        GPIO_setPortDirection(Glopal_ptr->PORT, 0xff);
    15ac:	e0 91 92 00 	lds	r30, 0x0092
    15b0:	f0 91 93 00 	lds	r31, 0x0093
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
    15b6:	6f ef       	ldi	r22, 0xFF	; 255
    15b8:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_setPortDirection>
                        GPIO_setPortValue(Glopal_ptr->PORT, CA_SevenSegmentValues[numebr]);
    15bc:	e0 91 92 00 	lds	r30, 0x0092
    15c0:	f0 91 93 00 	lds	r31, 0x0093
    15c4:	21 81       	ldd	r18, Z+1	; 0x01
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	fc 01       	movw	r30, r24
    15ce:	e2 58       	subi	r30, 0x82	; 130
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	90 81       	ld	r25, Z
    15d4:	82 2f       	mov	r24, r18
    15d6:	69 2f       	mov	r22, r25
    15d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setPortValue>
    15dc:	40 c0       	rjmp	.+128    	; 0x165e <Seven_Segment+0x1f8>
                    }
                    else if (comman_cathode == Glopal_ptr->SEVEN_SEG_type)
    15de:	e0 91 92 00 	lds	r30, 0x0092
    15e2:	f0 91 93 00 	lds	r31, 0x0093
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	88 23       	and	r24, r24
    15ea:	c9 f5       	brne	.+114    	; 0x165e <Seven_Segment+0x1f8>
                    {
                        GPIO_setPindDirection(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Out_Port_direction);
    15ec:	e0 91 92 00 	lds	r30, 0x0092
    15f0:	f0 91 93 00 	lds	r31, 0x0093
    15f4:	83 81       	ldd	r24, Z+3	; 0x03
    15f6:	e0 91 92 00 	lds	r30, 0x0092
    15fa:	f0 91 93 00 	lds	r31, 0x0093
    15fe:	94 81       	ldd	r25, Z+4	; 0x04
    1600:	69 2f       	mov	r22, r25
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 c2 07 	call	0xf84	; 0xf84 <GPIO_setPindDirection>
                        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Glopal_ptr->SEVEN_SEG_Enable.value);
    1608:	e0 91 92 00 	lds	r30, 0x0092
    160c:	f0 91 93 00 	lds	r31, 0x0093
    1610:	83 81       	ldd	r24, Z+3	; 0x03
    1612:	e0 91 92 00 	lds	r30, 0x0092
    1616:	f0 91 93 00 	lds	r31, 0x0093
    161a:	24 81       	ldd	r18, Z+4	; 0x04
    161c:	e0 91 92 00 	lds	r30, 0x0092
    1620:	f0 91 93 00 	lds	r31, 0x0093
    1624:	95 81       	ldd	r25, Z+5	; 0x05
    1626:	62 2f       	mov	r22, r18
    1628:	49 2f       	mov	r20, r25
    162a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GPIO_setPinValue>
                        GPIO_setPortDirection(Glopal_ptr->PORT, 0xff);
    162e:	e0 91 92 00 	lds	r30, 0x0092
    1632:	f0 91 93 00 	lds	r31, 0x0093
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	0e 94 53 07 	call	0xea6	; 0xea6 <GPIO_setPortDirection>
                        GPIO_setPortValue(Glopal_ptr->PORT, CC_SevenSegmentValues[numebr]);
    163e:	e0 91 92 00 	lds	r30, 0x0092
    1642:	f0 91 93 00 	lds	r31, 0x0093
    1646:	21 81       	ldd	r18, Z+1	; 0x01
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	e8 57       	subi	r30, 0x78	; 120
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	90 81       	ld	r25, Z
    1656:	82 2f       	mov	r24, r18
    1658:	69 2f       	mov	r22, r25
    165a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setPortValue>
                }
            }
        }
    }

    return local_err;
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <Seven_Segment_Mul>:

Error_state Seven_Segment_Mul(u8 number)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	a4 97       	sbiw	r28, 0x24	; 36
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	8e 8f       	std	Y+30, r24	; 0x1e
    Error_state local_err = Unvalid_Port;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	8d 8f       	std	Y+29, r24	; 0x1d
    if (number > 99)
    168a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    168c:	84 36       	cpi	r24, 0x64	; 100
    168e:	18 f0       	brcs	.+6      	; 0x1696 <Seven_Segment_Mul+0x26>
    {
        local_err = can_not_assign_to_multiplix;
    1690:	8e e0       	ldi	r24, 0x0E	; 14
    1692:	8d 8f       	std	Y+29, r24	; 0x1d
    1694:	2c c1       	rjmp	.+600    	; 0x18ee <Seven_Segment_Mul+0x27e>
    }
    else
    {
        local_err = Valid_Port;
    1696:	1d 8e       	std	Y+29, r1	; 0x1d

    	Seven_Segment(number/10,0);
    1698:	8e 8d       	ldd	r24, Y+30	; 0x1e
    169a:	9a e0       	ldi	r25, 0x0A	; 10
    169c:	69 2f       	mov	r22, r25
    169e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__udivmodqi4>
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	0e 94 33 0a 	call	0x1466	; 0x1466 <Seven_Segment>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 ef       	ldi	r26, 0xF0	; 240
    16ae:	b1 e4       	ldi	r27, 0x41	; 65
    16b0:	89 8f       	std	Y+25, r24	; 0x19
    16b2:	9a 8f       	std	Y+26, r25	; 0x1a
    16b4:	ab 8f       	std	Y+27, r26	; 0x1b
    16b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	69 8d       	ldd	r22, Y+25	; 0x19
    16ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a ef       	ldi	r20, 0xFA	; 250
    16c6:	54 e4       	ldi	r21, 0x44	; 68
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8d 8b       	std	Y+21, r24	; 0x15
    16d2:	9e 8b       	std	Y+22, r25	; 0x16
    16d4:	af 8b       	std	Y+23, r26	; 0x17
    16d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <Seven_Segment_Mul+0x8a>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9c 8b       	std	Y+20, r25	; 0x14
    16f6:	8b 8b       	std	Y+19, r24	; 0x13
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <Seven_Segment_Mul+0x108>
	else if (__tmp > 65535)
    16fa:	6d 89       	ldd	r22, Y+21	; 0x15
    16fc:	7e 89       	ldd	r23, Y+22	; 0x16
    16fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1700:	98 8d       	ldd	r25, Y+24	; 0x18
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <Seven_Segment_Mul+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	69 8d       	ldd	r22, Y+25	; 0x19
    1714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9c 8b       	std	Y+20, r25	; 0x14
    1738:	8b 8b       	std	Y+19, r24	; 0x13
    173a:	0f c0       	rjmp	.+30     	; 0x175a <Seven_Segment_Mul+0xea>
    173c:	88 ec       	ldi	r24, 0xC8	; 200
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9a 8b       	std	Y+18, r25	; 0x12
    1742:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1744:	89 89       	ldd	r24, Y+17	; 0x11
    1746:	9a 89       	ldd	r25, Y+18	; 0x12
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <Seven_Segment_Mul+0xd8>
    174c:	9a 8b       	std	Y+18, r25	; 0x12
    174e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9c 8b       	std	Y+20, r25	; 0x14
    1758:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8b 89       	ldd	r24, Y+19	; 0x13
    175c:	9c 89       	ldd	r25, Y+20	; 0x14
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <Seven_Segment_Mul+0xcc>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <Seven_Segment_Mul+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6d 89       	ldd	r22, Y+21	; 0x15
    1766:	7e 89       	ldd	r23, Y+22	; 0x16
    1768:	8f 89       	ldd	r24, Y+23	; 0x17
    176a:	98 8d       	ldd	r25, Y+24	; 0x18
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9c 8b       	std	Y+20, r25	; 0x14
    1776:	8b 8b       	std	Y+19, r24	; 0x13
    1778:	8b 89       	ldd	r24, Y+19	; 0x13
    177a:	9c 89       	ldd	r25, Y+20	; 0x14
    177c:	98 8b       	std	Y+16, r25	; 0x10
    177e:	8f 87       	std	Y+15, r24	; 0x0f
    1780:	8f 85       	ldd	r24, Y+15	; 0x0f
    1782:	98 89       	ldd	r25, Y+16	; 0x10
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <Seven_Segment_Mul+0x114>
    1788:	98 8b       	std	Y+16, r25	; 0x10
    178a:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(30);
        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,!(Glopal_ptr->SEVEN_SEG_Enable.value));
    178c:	e0 91 92 00 	lds	r30, 0x0092
    1790:	f0 91 93 00 	lds	r31, 0x0093
    1794:	83 81       	ldd	r24, Z+3	; 0x03
    1796:	8c a3       	std	Y+36, r24	; 0x24
    1798:	e0 91 92 00 	lds	r30, 0x0092
    179c:	f0 91 93 00 	lds	r31, 0x0093
    17a0:	84 81       	ldd	r24, Z+4	; 0x04
    17a2:	8b a3       	std	Y+35, r24	; 0x23
    17a4:	e0 91 92 00 	lds	r30, 0x0092
    17a8:	f0 91 93 00 	lds	r31, 0x0093
    17ac:	85 81       	ldd	r24, Z+5	; 0x05
    17ae:	1a a2       	std	Y+34, r1	; 0x22
    17b0:	88 23       	and	r24, r24
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <Seven_Segment_Mul+0x148>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	8a a3       	std	Y+34, r24	; 0x22
    17b8:	8c a1       	ldd	r24, Y+36	; 0x24
    17ba:	6b a1       	ldd	r22, Y+35	; 0x23
    17bc:	4a a1       	ldd	r20, Y+34	; 0x22
    17be:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GPIO_setPinValue>
        Seven_Segment(number%10,1);
    17c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c4:	9a e0       	ldi	r25, 0x0A	; 10
    17c6:	69 2f       	mov	r22, r25
    17c8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__udivmodqi4>
    17cc:	89 2f       	mov	r24, r25
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	0e 94 33 0a 	call	0x1466	; 0x1466 <Seven_Segment>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 ef       	ldi	r26, 0xF0	; 240
    17da:	b1 e4       	ldi	r27, 0x41	; 65
    17dc:	8b 87       	std	Y+11, r24	; 0x0b
    17de:	9c 87       	std	Y+12, r25	; 0x0c
    17e0:	ad 87       	std	Y+13, r26	; 0x0d
    17e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	98 87       	std	Y+8, r25	; 0x08
    1800:	a9 87       	std	Y+9, r26	; 0x09
    1802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <Seven_Segment_Mul+0x1b6>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <Seven_Segment_Mul+0x234>
	else if (__tmp > 65535)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <Seven_Segment_Mul+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1840:	7c 85       	ldd	r23, Y+12	; 0x0c
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <Seven_Segment_Mul+0x216>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <Seven_Segment_Mul+0x204>
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9e 83       	std	Y+6, r25	; 0x06
    1884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <Seven_Segment_Mul+0x1f8>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <Seven_Segment_Mul+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <Seven_Segment_Mul+0x240>
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(30);
        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,!(Glopal_ptr->SEVEN_SEG_Enable.value));
    18b8:	e0 91 92 00 	lds	r30, 0x0092
    18bc:	f0 91 93 00 	lds	r31, 0x0093
    18c0:	83 81       	ldd	r24, Z+3	; 0x03
    18c2:	89 a3       	std	Y+33, r24	; 0x21
    18c4:	e0 91 92 00 	lds	r30, 0x0092
    18c8:	f0 91 93 00 	lds	r31, 0x0093
    18cc:	84 81       	ldd	r24, Z+4	; 0x04
    18ce:	88 a3       	std	Y+32, r24	; 0x20
    18d0:	e0 91 92 00 	lds	r30, 0x0092
    18d4:	f0 91 93 00 	lds	r31, 0x0093
    18d8:	85 81       	ldd	r24, Z+5	; 0x05
    18da:	1f 8e       	std	Y+31, r1	; 0x1f
    18dc:	88 23       	and	r24, r24
    18de:	11 f4       	brne	.+4      	; 0x18e4 <Seven_Segment_Mul+0x274>
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	8f 8f       	std	Y+31, r24	; 0x1f
    18e4:	89 a1       	ldd	r24, Y+33	; 0x21
    18e6:	68 a1       	ldd	r22, Y+32	; 0x20
    18e8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    18ea:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GPIO_setPinValue>


    }
    
    return local_err;   
    18ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    18f0:	a4 96       	adiw	r28, 0x24	; 36
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <LED_ON>:
 *  Created on: Aug 22, 2023
 *      Author: ahmedomar
 */

Error_state LED_ON()
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <LED_ON+0x6>
    1908:	00 d0       	rcall	.+0      	; 0x190a <LED_ON+0x8>
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    // make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
    190e:	86 e0       	ldi	r24, 0x06	; 6
    1910:	8c 83       	std	Y+4, r24	; 0x04
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
    1912:	8a e7       	ldi	r24, 0x7A	; 122
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9b 83       	std	Y+3, r25	; 0x03
    1918:	8a 83       	std	Y+2, r24	; 0x02
    // first check the null pointer
    if (NULL == LED_PTR)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	19 f4       	brne	.+6      	; 0x1928 <LED_ON+0x26>
    {
        local_error = NULL_POINTER;
    1922:	86 e0       	ldi	r24, 0x06	; 6
    1924:	8c 83       	std	Y+4, r24	; 0x04
    1926:	37 c0       	rjmp	.+110    	; 0x1996 <LED_ON+0x94>
    }
    else
    {
        // check led is valid
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    1928:	19 82       	std	Y+1, r1	; 0x01
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <LED_ON+0x46>
        {
            if (LoopIteratorOne == LED_PTR->LED_ID)
    192c:	ea 81       	ldd	r30, Y+2	; 0x02
    192e:	fb 81       	ldd	r31, Y+3	; 0x03
    1930:	90 81       	ld	r25, Z
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	98 17       	cp	r25, r24
    1936:	19 f4       	brne	.+6      	; 0x193e <LED_ON+0x3c>
            {
                local_error = LED_VALID;
    1938:	87 e0       	ldi	r24, 0x07	; 7
    193a:	8c 83       	std	Y+4, r24	; 0x04
    193c:	0a c0       	rjmp	.+20     	; 0x1952 <LED_ON+0x50>
                break;
            }
            else
            {
                local_error = LED_NOT_VALID;
    193e:	88 e0       	ldi	r24, 0x08	; 8
    1940:	8c 83       	std	Y+4, r24	; 0x04
        local_error = NULL_POINTER;
    }
    else
    {
        // check led is valid
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	8f 5f       	subi	r24, 0xFF	; 255
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	90 91 75 00 	lds	r25, 0x0075
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	89 17       	cp	r24, r25
    1950:	68 f3       	brcs	.-38     	; 0x192c <LED_ON+0x2a>
            else
            {
                local_error = LED_NOT_VALID;
            }
        }
        if (LED_VALID == local_error)
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	87 30       	cpi	r24, 0x07	; 7
    1956:	f9 f4       	brne	.+62     	; 0x1996 <LED_ON+0x94>
        {
            local_error = Not_Working;
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	8c 83       	std	Y+4, r24	; 0x04
            LED_PTR->PIN_VAL = high_value;
    195c:	ea 81       	ldd	r30, Y+2	; 0x02
    195e:	fb 81       	ldd	r31, Y+3	; 0x03
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	83 83       	std	Z+3, r24	; 0x03
            GPIO_setPindDirection(LED_PTR->PORT, LED_PTR->PIN, Output_direction);
    1964:	ea 81       	ldd	r30, Y+2	; 0x02
    1966:	fb 81       	ldd	r31, Y+3	; 0x03
    1968:	81 81       	ldd	r24, Z+1	; 0x01
    196a:	ea 81       	ldd	r30, Y+2	; 0x02
    196c:	fb 81       	ldd	r31, Y+3	; 0x03
    196e:	92 81       	ldd	r25, Z+2	; 0x02
    1970:	69 2f       	mov	r22, r25
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 c2 07 	call	0xf84	; 0xf84 <GPIO_setPindDirection>
            GPIO_setPinValue(LED_PTR->PORT, LED_PTR->PIN, LED_PTR->PIN_VAL);
    1978:	ea 81       	ldd	r30, Y+2	; 0x02
    197a:	fb 81       	ldd	r31, Y+3	; 0x03
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	ea 81       	ldd	r30, Y+2	; 0x02
    1980:	fb 81       	ldd	r31, Y+3	; 0x03
    1982:	22 81       	ldd	r18, Z+2	; 0x02
    1984:	ea 81       	ldd	r30, Y+2	; 0x02
    1986:	fb 81       	ldd	r31, Y+3	; 0x03
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	62 2f       	mov	r22, r18
    198c:	49 2f       	mov	r20, r25
    198e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GPIO_setPinValue>
            local_error = Working;
    1992:	89 e0       	ldi	r24, 0x09	; 9
    1994:	8c 83       	std	Y+4, r24	; 0x04
        else
        {
        }
    }

    return local_error;
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <LED_OFF>:

Error_state LED_OFF()
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <LED_OFF+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <LED_OFF+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    // make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
    19b2:	86 e0       	ldi	r24, 0x06	; 6
    19b4:	8c 83       	std	Y+4, r24	; 0x04
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
    19b6:	8a e7       	ldi	r24, 0x7A	; 122
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    // first check the null pointer
    if (NULL == LED_PTR)
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	19 f4       	brne	.+6      	; 0x19cc <LED_OFF+0x26>
    {
        local_error = NULL_POINTER;
    19c6:	86 e0       	ldi	r24, 0x06	; 6
    19c8:	8c 83       	std	Y+4, r24	; 0x04
    19ca:	36 c0       	rjmp	.+108    	; 0x1a38 <LED_OFF+0x92>
    }
    else
    {
        // check led is valid                           //length
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	0e c0       	rjmp	.+28     	; 0x19ec <LED_OFF+0x46>
        {
            if (LoopIteratorOne == LED_PTR->LED_ID)
    19d0:	ea 81       	ldd	r30, Y+2	; 0x02
    19d2:	fb 81       	ldd	r31, Y+3	; 0x03
    19d4:	90 81       	ld	r25, Z
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	98 17       	cp	r25, r24
    19da:	19 f4       	brne	.+6      	; 0x19e2 <LED_OFF+0x3c>
            {
                local_error = LED_VALID;
    19dc:	87 e0       	ldi	r24, 0x07	; 7
    19de:	8c 83       	std	Y+4, r24	; 0x04
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <LED_OFF+0x50>
                break;
            }
            else
            {
                local_error = LED_NOT_VALID;
    19e2:	88 e0       	ldi	r24, 0x08	; 8
    19e4:	8c 83       	std	Y+4, r24	; 0x04
        local_error = NULL_POINTER;
    }
    else
    {
        // check led is valid                           //length
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	90 91 75 00 	lds	r25, 0x0075
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	89 17       	cp	r24, r25
    19f4:	68 f3       	brcs	.-38     	; 0x19d0 <LED_OFF+0x2a>
            else
            {
                local_error = LED_NOT_VALID;
            }
        }
        if (LED_VALID == local_error)
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	87 30       	cpi	r24, 0x07	; 7
    19fa:	f1 f4       	brne	.+60     	; 0x1a38 <LED_OFF+0x92>
        {
            local_error = Working;
    19fc:	89 e0       	ldi	r24, 0x09	; 9
    19fe:	8c 83       	std	Y+4, r24	; 0x04
            LED_PTR->PIN_VAL = low_value;
    1a00:	ea 81       	ldd	r30, Y+2	; 0x02
    1a02:	fb 81       	ldd	r31, Y+3	; 0x03
    1a04:	13 82       	std	Z+3, r1	; 0x03
            GPIO_setPindDirection(LED_PTR->PORT, LED_PTR->PIN, Output_direction);
    1a06:	ea 81       	ldd	r30, Y+2	; 0x02
    1a08:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0a:	81 81       	ldd	r24, Z+1	; 0x01
    1a0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a10:	92 81       	ldd	r25, Z+2	; 0x02
    1a12:	69 2f       	mov	r22, r25
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 c2 07 	call	0xf84	; 0xf84 <GPIO_setPindDirection>
            GPIO_setPinValue(LED_PTR->PORT, LED_PTR->PIN, LED_PTR->PIN_VAL);
    1a1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1e:	81 81       	ldd	r24, Z+1	; 0x01
    1a20:	ea 81       	ldd	r30, Y+2	; 0x02
    1a22:	fb 81       	ldd	r31, Y+3	; 0x03
    1a24:	22 81       	ldd	r18, Z+2	; 0x02
    1a26:	ea 81       	ldd	r30, Y+2	; 0x02
    1a28:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	62 2f       	mov	r22, r18
    1a2e:	49 2f       	mov	r20, r25
    1a30:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GPIO_setPinValue>
            local_error = Not_Working;
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	8c 83       	std	Y+4, r24	; 0x04
        else
        {
        }
    }

    return local_error;
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <Toggel_LED>:

Error_state Toggel_LED()
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <Toggel_LED+0x6>
    1a4e:	0f 92       	push	r0
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	// make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
    1a58:	8a e7       	ldi	r24, 0x7A	; 122
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    // first check the null pointer
    if (NULL == LED_PTR)
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	19 f4       	brne	.+6      	; 0x1a6e <Toggel_LED+0x26>
    {
        local_error = NULL_POINTER;
    1a68:	86 e0       	ldi	r24, 0x06	; 6
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	11 c0       	rjmp	.+34     	; 0x1a90 <Toggel_LED+0x48>
    }
    else
    {
        if (high_value == LED_PTR->PIN_VAL)
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	83 81       	ldd	r24, Z+3	; 0x03
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	21 f4       	brne	.+8      	; 0x1a80 <Toggel_LED+0x38>
        {
            local_error = LED_OFF();
    1a78:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED_OFF>
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	08 c0       	rjmp	.+16     	; 0x1a90 <Toggel_LED+0x48>
        }
        else if (low_value == LED_PTR->PIN_VAL)
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	83 81       	ldd	r24, Z+3	; 0x03
    1a86:	88 23       	and	r24, r24
    1a88:	19 f4       	brne	.+6      	; 0x1a90 <Toggel_LED+0x48>
        {
            local_error = LED_ON();
    1a8a:	0e 94 81 0c 	call	0x1902	; 0x1902 <LED_ON>
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
        }
        
    }
    

    return local_error;
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <main>:
#include "../HAL/LED/LED.h"
#include "../HAL/SEVEN_SEG/SEVEN_SEG.h"

int check_prime(int a);
int main(void)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	60 97       	sbiw	r28, 0x10	; 16
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{
		for (int var = 0; var < 20; ++var) {
    1ab2:	18 8a       	std	Y+16, r1	; 0x10
    1ab4:	1f 86       	std	Y+15, r1	; 0x0f
    1ab6:	7a c0       	rjmp	.+244    	; 0x1bac <main+0x10e>
			Seven_Segment_Mul(var);
    1ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aba:	0e 94 38 0b 	call	0x1670	; 0x1670 <Seven_Segment_Mul>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e8       	ldi	r25, 0x80	; 128
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b5 e4       	ldi	r27, 0x45	; 69
    1ac6:	8b 87       	std	Y+11, r24	; 0x0b
    1ac8:	9c 87       	std	Y+12, r25	; 0x0c
    1aca:	ad 87       	std	Y+13, r26	; 0x0d
    1acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8f 83       	std	Y+7, r24	; 0x07
    1ae8:	98 87       	std	Y+8, r25	; 0x08
    1aea:	a9 87       	std	Y+9, r26	; 0x09
    1aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <main+0x72>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <main+0xf0>
	else if (__tmp > 65535)
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <main+0xd2>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <main+0xc0>
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <main+0xb4>
    1b78:	14 c0       	rjmp	.+40     	; 0x1ba2 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <main+0xfc>
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
int main(void)
{

	while (1)
	{
		for (int var = 0; var < 20; ++var) {
    1ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba4:	98 89       	ldd	r25, Y+16	; 0x10
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	98 8b       	std	Y+16, r25	; 0x10
    1baa:	8f 87       	std	Y+15, r24	; 0x0f
    1bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bae:	98 89       	ldd	r25, Y+16	; 0x10
    1bb0:	84 31       	cpi	r24, 0x14	; 20
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	0c f4       	brge	.+2      	; 0x1bb8 <main+0x11a>
    1bb6:	80 cf       	rjmp	.-256    	; 0x1ab8 <main+0x1a>
    1bb8:	7c cf       	rjmp	.-264    	; 0x1ab2 <main+0x14>

00001bba <check_prime>:
		//Seven_Segment_Mul(56);
	}
	return 0;
}
int check_prime(int a)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	28 97       	sbiw	r28, 0x08	; 8
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	9c 83       	std	Y+4, r25	; 0x04
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
   int c;

   for (c = 2; c <= a - 1; c++)
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	11 c0       	rjmp	.+34     	; 0x1bfe <check_prime+0x44>
   {
      if (a%c == 0)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	29 81       	ldd	r18, Y+1	; 0x01
    1be2:	3a 81       	ldd	r19, Y+2	; 0x02
    1be4:	b9 01       	movw	r22, r18
    1be6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__divmodhi4>
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	19 f4       	brne	.+6      	; 0x1bf4 <check_prime+0x3a>
     return 0;
    1bee:	1e 82       	std	Y+6, r1	; 0x06
    1bf0:	1d 82       	std	Y+5, r1	; 0x05
    1bf2:	1c c0       	rjmp	.+56     	; 0x1c2c <check_prime+0x72>
}
int check_prime(int a)
{
   int c;

   for (c = 2; c <= a - 1; c++)
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	9c 01       	movw	r18, r24
    1c04:	21 50       	subi	r18, 0x01	; 1
    1c06:	30 40       	sbci	r19, 0x00	; 0
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	28 17       	cp	r18, r24
    1c0e:	39 07       	cpc	r19, r25
    1c10:	2c f7       	brge	.-54     	; 0x1bdc <check_prime+0x22>
   {
      if (a%c == 0)
     return 0;
   }
   if (c == a)
    1c12:	29 81       	ldd	r18, Y+1	; 0x01
    1c14:	3a 81       	ldd	r19, Y+2	; 0x02
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <check_prime+0x70>
      return 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <check_prime+0x72>
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <check_prime+0x7a>
}
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	98 87       	std	Y+8, r25	; 0x08
    1c32:	8f 83       	std	Y+7, r24	; 0x07
    1c34:	8f 81       	ldd	r24, Y+7	; 0x07
    1c36:	98 85       	ldd	r25, Y+8	; 0x08
    1c38:	28 96       	adiw	r28, 0x08	; 8
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <__udivmodqi4>:
    1c4a:	99 1b       	sub	r25, r25
    1c4c:	79 e0       	ldi	r23, 0x09	; 9
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <__udivmodqi4_ep>

00001c50 <__udivmodqi4_loop>:
    1c50:	99 1f       	adc	r25, r25
    1c52:	96 17       	cp	r25, r22
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <__udivmodqi4_ep>
    1c56:	96 1b       	sub	r25, r22

00001c58 <__udivmodqi4_ep>:
    1c58:	88 1f       	adc	r24, r24
    1c5a:	7a 95       	dec	r23
    1c5c:	c9 f7       	brne	.-14     	; 0x1c50 <__udivmodqi4_loop>
    1c5e:	80 95       	com	r24
    1c60:	08 95       	ret

00001c62 <__divmodhi4>:
    1c62:	97 fb       	bst	r25, 7
    1c64:	09 2e       	mov	r0, r25
    1c66:	07 26       	eor	r0, r23
    1c68:	0a d0       	rcall	.+20     	; 0x1c7e <__divmodhi4_neg1>
    1c6a:	77 fd       	sbrc	r23, 7
    1c6c:	04 d0       	rcall	.+8      	; 0x1c76 <__divmodhi4_neg2>
    1c6e:	0c d0       	rcall	.+24     	; 0x1c88 <__udivmodhi4>
    1c70:	06 d0       	rcall	.+12     	; 0x1c7e <__divmodhi4_neg1>
    1c72:	00 20       	and	r0, r0
    1c74:	1a f4       	brpl	.+6      	; 0x1c7c <__divmodhi4_exit>

00001c76 <__divmodhi4_neg2>:
    1c76:	70 95       	com	r23
    1c78:	61 95       	neg	r22
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c7c <__divmodhi4_exit>:
    1c7c:	08 95       	ret

00001c7e <__divmodhi4_neg1>:
    1c7e:	f6 f7       	brtc	.-4      	; 0x1c7c <__divmodhi4_exit>
    1c80:	90 95       	com	r25
    1c82:	81 95       	neg	r24
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__udivmodhi4>:
    1c88:	aa 1b       	sub	r26, r26
    1c8a:	bb 1b       	sub	r27, r27
    1c8c:	51 e1       	ldi	r21, 0x11	; 17
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <__udivmodhi4_ep>

00001c90 <__udivmodhi4_loop>:
    1c90:	aa 1f       	adc	r26, r26
    1c92:	bb 1f       	adc	r27, r27
    1c94:	a6 17       	cp	r26, r22
    1c96:	b7 07       	cpc	r27, r23
    1c98:	10 f0       	brcs	.+4      	; 0x1c9e <__udivmodhi4_ep>
    1c9a:	a6 1b       	sub	r26, r22
    1c9c:	b7 0b       	sbc	r27, r23

00001c9e <__udivmodhi4_ep>:
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	5a 95       	dec	r21
    1ca4:	a9 f7       	brne	.-22     	; 0x1c90 <__udivmodhi4_loop>
    1ca6:	80 95       	com	r24
    1ca8:	90 95       	com	r25
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	08 95       	ret

00001cb0 <__prologue_saves__>:
    1cb0:	2f 92       	push	r2
    1cb2:	3f 92       	push	r3
    1cb4:	4f 92       	push	r4
    1cb6:	5f 92       	push	r5
    1cb8:	6f 92       	push	r6
    1cba:	7f 92       	push	r7
    1cbc:	8f 92       	push	r8
    1cbe:	9f 92       	push	r9
    1cc0:	af 92       	push	r10
    1cc2:	bf 92       	push	r11
    1cc4:	cf 92       	push	r12
    1cc6:	df 92       	push	r13
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	ca 1b       	sub	r28, r26
    1cda:	db 0b       	sbc	r29, r27
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	09 94       	ijmp

00001ce8 <__epilogue_restores__>:
    1ce8:	2a 88       	ldd	r2, Y+18	; 0x12
    1cea:	39 88       	ldd	r3, Y+17	; 0x11
    1cec:	48 88       	ldd	r4, Y+16	; 0x10
    1cee:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cf0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cf2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cf4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cf6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cf8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cfa:	b9 84       	ldd	r11, Y+9	; 0x09
    1cfc:	c8 84       	ldd	r12, Y+8	; 0x08
    1cfe:	df 80       	ldd	r13, Y+7	; 0x07
    1d00:	ee 80       	ldd	r14, Y+6	; 0x06
    1d02:	fd 80       	ldd	r15, Y+5	; 0x05
    1d04:	0c 81       	ldd	r16, Y+4	; 0x04
    1d06:	1b 81       	ldd	r17, Y+3	; 0x03
    1d08:	aa 81       	ldd	r26, Y+2	; 0x02
    1d0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d0c:	ce 0f       	add	r28, r30
    1d0e:	d1 1d       	adc	r29, r1
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	ed 01       	movw	r28, r26
    1d1c:	08 95       	ret

00001d1e <_exit>:
    1d1e:	f8 94       	cli

00001d20 <__stop_program>:
    1d20:	ff cf       	rjmp	.-2      	; 0x1d20 <__stop_program>
