
AVR32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00002e46  00002eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000d8  008000d8  00002f52  2**0
                  ALLOC
  3 .stab         00003408  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002015  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008371  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000084d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cb6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3d       	cpi	r26, 0xDC	; 220
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 16 	call	0x2d30	; 0x2d30 <main>
      8a:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setPortValue>:
#include "GPIO.h"

Error_state GPIO_setPortValue(u8 portId, u8 value)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setPortValue+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setPortValue+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	8a 83       	std	Y+2, r24	; 0x02
     cae:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	88 23       	and	r24, r24
     cb8:	61 f0       	breq	.+24     	; 0xcd2 <GPIO_setPortValue+0x34>
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	49 f0       	breq	.+18     	; 0xcd2 <GPIO_setPortValue+0x34>
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	31 f0       	breq	.+12     	; 0xcd2 <GPIO_setPortValue+0x34>
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	19 f0       	breq	.+6      	; 0xcd2 <GPIO_setPortValue+0x34>
    {
        local_err = Unvalid_Port;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	33 c0       	rjmp	.+102    	; 0xd38 <GPIO_setPortValue+0x9a>
    }
    else
    {
        local_err = Valid_Port;
     cd2:	19 82       	std	Y+1, r1	; 0x01
        switch (portId)
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	3d 83       	std	Y+5, r19	; 0x05
     cdc:	2c 83       	std	Y+4, r18	; 0x04
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	9d 81       	ldd	r25, Y+5	; 0x05
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	91 05       	cpc	r25, r1
     ce6:	d1 f0       	breq	.+52     	; 0xd1c <GPIO_setPortValue+0x7e>
     ce8:	2c 81       	ldd	r18, Y+4	; 0x04
     cea:	3d 81       	ldd	r19, Y+5	; 0x05
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	2c f4       	brge	.+10     	; 0xcfc <GPIO_setPortValue+0x5e>
     cf2:	8c 81       	ldd	r24, Y+4	; 0x04
     cf4:	9d 81       	ldd	r25, Y+5	; 0x05
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	61 f0       	breq	.+24     	; 0xd12 <GPIO_setPortValue+0x74>
     cfa:	1e c0       	rjmp	.+60     	; 0xd38 <GPIO_setPortValue+0x9a>
     cfc:	2c 81       	ldd	r18, Y+4	; 0x04
     cfe:	3d 81       	ldd	r19, Y+5	; 0x05
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	81 f0       	breq	.+32     	; 0xd26 <GPIO_setPortValue+0x88>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	81 f0       	breq	.+32     	; 0xd30 <GPIO_setPortValue+0x92>
     d10:	13 c0       	rjmp	.+38     	; 0xd38 <GPIO_setPortValue+0x9a>
        {
        case PORTA:
            PORTA_Ptr = value;
     d12:	eb e3       	ldi	r30, 0x3B	; 59
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	80 83       	st	Z, r24
     d1a:	0e c0       	rjmp	.+28     	; 0xd38 <GPIO_setPortValue+0x9a>
            break;
        case PORTB:
            PORTB_Ptr = value;
     d1c:	e8 e3       	ldi	r30, 0x38	; 56
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	80 83       	st	Z, r24
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <GPIO_setPortValue+0x9a>
            break;
        case PORTC:
            PORTC_Ptr = value;
     d26:	e5 e3       	ldi	r30, 0x35	; 53
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	80 83       	st	Z, r24
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <GPIO_setPortValue+0x9a>
            break;
        case PORTD:
            PORTD_Ptr = value;
     d30:	e2 e3       	ldi	r30, 0x32	; 50
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	80 83       	st	Z, r24
            break;
        default:
            break;
        }
    }
    return local_err;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <GPIO_setPinValue>:

Error_state GPIO_setPinValue(u8 portId, u8 PinId, u8 value)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	28 97       	sbiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	8a 83       	std	Y+2, r24	; 0x02
     d60:	6b 83       	std	Y+3, r22	; 0x03
     d62:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 23       	and	r24, r24
     d6c:	61 f0       	breq	.+24     	; 0xd86 <GPIO_setPinValue+0x3c>
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	49 f0       	breq	.+18     	; 0xd86 <GPIO_setPinValue+0x3c>
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	31 f0       	breq	.+12     	; 0xd86 <GPIO_setPinValue+0x3c>
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	83 30       	cpi	r24, 0x03	; 3
     d7e:	19 f0       	breq	.+6      	; 0xd86 <GPIO_setPinValue+0x3c>
    {
        local_err = Unvalid_Port;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	4c c1       	rjmp	.+664    	; 0x101e <GPIO_setPinValue+0x2d4>
    }
    else
    {
        if (PinId > MAX_PIN)
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	18 f0       	brcs	.+6      	; 0xd92 <GPIO_setPinValue+0x48>
        {
            local_err = Unvalid_pin;
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	46 c1       	rjmp	.+652    	; 0x101e <GPIO_setPinValue+0x2d4>
        }
        else
        {
            local_err = Valid_pin;
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	89 83       	std	Y+1, r24	; 0x01
            if (value == high_value)
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <GPIO_setPinValue+0x54>
     d9c:	ac c0       	rjmp	.+344    	; 0xef6 <GPIO_setPinValue+0x1ac>
            {
                switch (portId)
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	38 87       	std	Y+8, r19	; 0x08
     da6:	2f 83       	std	Y+7, r18	; 0x07
     da8:	6f 81       	ldd	r22, Y+7	; 0x07
     daa:	78 85       	ldd	r23, Y+8	; 0x08
     dac:	61 30       	cpi	r22, 0x01	; 1
     dae:	71 05       	cpc	r23, r1
     db0:	99 f1       	breq	.+102    	; 0xe18 <GPIO_setPinValue+0xce>
     db2:	8f 81       	ldd	r24, Y+7	; 0x07
     db4:	98 85       	ldd	r25, Y+8	; 0x08
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	91 05       	cpc	r25, r1
     dba:	34 f4       	brge	.+12     	; 0xdc8 <GPIO_setPinValue+0x7e>
     dbc:	2f 81       	ldd	r18, Y+7	; 0x07
     dbe:	38 85       	ldd	r19, Y+8	; 0x08
     dc0:	21 15       	cp	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	71 f0       	breq	.+28     	; 0xde2 <GPIO_setPinValue+0x98>
     dc6:	79 c0       	rjmp	.+242    	; 0xeba <GPIO_setPinValue+0x170>
     dc8:	6f 81       	ldd	r22, Y+7	; 0x07
     dca:	78 85       	ldd	r23, Y+8	; 0x08
     dcc:	62 30       	cpi	r22, 0x02	; 2
     dce:	71 05       	cpc	r23, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <GPIO_setPinValue+0x8a>
     dd2:	3d c0       	rjmp	.+122    	; 0xe4e <GPIO_setPinValue+0x104>
     dd4:	8f 81       	ldd	r24, Y+7	; 0x07
     dd6:	98 85       	ldd	r25, Y+8	; 0x08
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	91 05       	cpc	r25, r1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <GPIO_setPinValue+0x96>
     dde:	52 c0       	rjmp	.+164    	; 0xe84 <GPIO_setPinValue+0x13a>
     de0:	6c c0       	rjmp	.+216    	; 0xeba <GPIO_setPinValue+0x170>
                {
                case PORTA:
                    GPIO_setPindDirection(portId, PinId, Output_direction);
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	6b 81       	ldd	r22, Y+3	; 0x03
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                    PORTA_Ptr = PORTA_Ptr | (value << PinId);
     dec:	ab e3       	ldi	r26, 0x3B	; 59
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb e3       	ldi	r30, 0x3B	; 59
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	b9 01       	movw	r22, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_setPinValue+0xc2>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_setPinValue+0xbe>
     e10:	cb 01       	movw	r24, r22
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	03 c1       	rjmp	.+518    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                case PORTB:
                    GPIO_setPindDirection(portId, PinId, Output_direction);
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	6b 81       	ldd	r22, Y+3	; 0x03
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                    PORTB_Ptr = PORTB_Ptr | (value << PinId);
     e22:	a8 e3       	ldi	r26, 0x38	; 56
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e8 e3       	ldi	r30, 0x38	; 56
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	b9 01       	movw	r22, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <GPIO_setPinValue+0xf8>
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	8a 95       	dec	r24
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <GPIO_setPinValue+0xf4>
     e46:	cb 01       	movw	r24, r22
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	e8 c0       	rjmp	.+464    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                case PORTC:
                    GPIO_setPindDirection(portId, PinId, Output_direction);
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	6b 81       	ldd	r22, Y+3	; 0x03
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                    PORTC_Ptr = PORTC_Ptr | (value << PinId);
     e58:	a5 e3       	ldi	r26, 0x35	; 53
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e3       	ldi	r30, 0x35	; 53
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	b9 01       	movw	r22, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_setPinValue+0x12e>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	8a 95       	dec	r24
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_setPinValue+0x12a>
     e7c:	cb 01       	movw	r24, r22
     e7e:	84 2b       	or	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	cd c0       	rjmp	.+410    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                case PORTD:
                    GPIO_setPindDirection(portId, PinId, Output_direction);
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	6b 81       	ldd	r22, Y+3	; 0x03
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                    PORTD_Ptr = PORTD_Ptr | (value << PinId);
     e8e:	a2 e3       	ldi	r26, 0x32	; 50
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e2 e3       	ldi	r30, 0x32	; 50
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	b9 01       	movw	r22, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_setPinValue+0x164>
     eaa:	66 0f       	add	r22, r22
     eac:	77 1f       	adc	r23, r23
     eae:	8a 95       	dec	r24
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_setPinValue+0x160>
     eb2:	cb 01       	movw	r24, r22
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	b2 c0       	rjmp	.+356    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                default:
                    GPIO_setPindDirection(portId, PinId, Output_direction);
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	6b 81       	ldd	r22, Y+3	; 0x03
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     ec4:	ab e3       	ldi	r26, 0x3B	; 59
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	eb e3       	ldi	r30, 0x3B	; 59
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     ed0:	ab e3       	ldi	r26, 0x3B	; 59
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e3       	ldi	r30, 0x3B	; 59
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     edc:	ab e3       	ldi	r26, 0x3B	; 59
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e3       	ldi	r30, 0x3B	; 59
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8c 93       	st	X, r24
                    PORTD_Ptr = PORTD_Ptr | 0x00;
     ee8:	a2 e3       	ldi	r26, 0x32	; 50
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8c 93       	st	X, r24
     ef4:	94 c0       	rjmp	.+296    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                }
            }
            else if (value == low_value)
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	88 23       	and	r24, r24
     efa:	09 f0       	breq	.+2      	; 0xefe <GPIO_setPinValue+0x1b4>
     efc:	8e c0       	rjmp	.+284    	; 0x101a <GPIO_setPinValue+0x2d0>
            {
                switch (portId)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3e 83       	std	Y+6, r19	; 0x06
     f06:	2d 83       	std	Y+5, r18	; 0x05
     f08:	6d 81       	ldd	r22, Y+5	; 0x05
     f0a:	7e 81       	ldd	r23, Y+6	; 0x06
     f0c:	61 30       	cpi	r22, 0x01	; 1
     f0e:	71 05       	cpc	r23, r1
     f10:	61 f1       	breq	.+88     	; 0xf6a <GPIO_setPinValue+0x220>
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	91 05       	cpc	r25, r1
     f1a:	34 f4       	brge	.+12     	; 0xf28 <GPIO_setPinValue+0x1de>
     f1c:	2d 81       	ldd	r18, Y+5	; 0x05
     f1e:	3e 81       	ldd	r19, Y+6	; 0x06
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	69 f0       	breq	.+26     	; 0xf40 <GPIO_setPinValue+0x1f6>
     f26:	60 c0       	rjmp	.+192    	; 0xfe8 <GPIO_setPinValue+0x29e>
     f28:	6d 81       	ldd	r22, Y+5	; 0x05
     f2a:	7e 81       	ldd	r23, Y+6	; 0x06
     f2c:	62 30       	cpi	r22, 0x02	; 2
     f2e:	71 05       	cpc	r23, r1
     f30:	89 f1       	breq	.+98     	; 0xf94 <GPIO_setPinValue+0x24a>
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <GPIO_setPinValue+0x1f4>
     f3c:	40 c0       	rjmp	.+128    	; 0xfbe <GPIO_setPinValue+0x274>
     f3e:	54 c0       	rjmp	.+168    	; 0xfe8 <GPIO_setPinValue+0x29e>
                {
                case PORTA:

                    PORTA_Ptr = PORTA_Ptr & ~(1 << PinId);
     f40:	ab e3       	ldi	r26, 0x3B	; 59
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	eb e3       	ldi	r30, 0x3B	; 59
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_setPinValue+0x214>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_setPinValue+0x210>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	5a c0       	rjmp	.+180    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                case PORTB:
                    PORTB_Ptr = PORTB_Ptr & ~(1 << PinId);
     f6a:	a8 e3       	ldi	r26, 0x38	; 56
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e3       	ldi	r30, 0x38	; 56
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <GPIO_setPinValue+0x23e>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <GPIO_setPinValue+0x23a>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	45 c0       	rjmp	.+138    	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                case PORTC:
                    PORTC_Ptr = PORTC_Ptr & ~(1 << PinId);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_setPinValue+0x268>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_setPinValue+0x264>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	30 c0       	rjmp	.+96     	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                case PORTD:
                    PORTD_Ptr = PORTD_Ptr & ~(1 << PinId);
     fbe:	a2 e3       	ldi	r26, 0x32	; 50
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e2 e3       	ldi	r30, 0x32	; 50
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <GPIO_setPinValue+0x292>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <GPIO_setPinValue+0x28e>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	1b c0       	rjmp	.+54     	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                default:
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     fe8:	ab e3       	ldi	r26, 0x3B	; 59
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	eb e3       	ldi	r30, 0x3B	; 59
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
     ff4:	ab e3       	ldi	r26, 0x3B	; 59
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	eb e3       	ldi	r30, 0x3B	; 59
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8c 93       	st	X, r24
                    PORTA_Ptr = PORTA_Ptr | 0x00;
    1000:	ab e3       	ldi	r26, 0x3B	; 59
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	eb e3       	ldi	r30, 0x3B	; 59
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8c 93       	st	X, r24
                    PORTD_Ptr = PORTD_Ptr | 0x00;
    100c:	a2 e3       	ldi	r26, 0x32	; 50
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e2 e3       	ldi	r30, 0x32	; 50
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8c 93       	st	X, r24
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_setPinValue+0x2d4>
                    break;
                }
            }
            else
            {
                local_err = Can_not_assign_to_pin;
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    return local_err;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	28 96       	adiw	r28, 0x08	; 8
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <GPIO_setPortDirection>:

Error_state GPIO_setPortDirection(u8 portId, u8 PortDirectionValue)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setPortDirection+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <GPIO_setPortDirection+0x8>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 23       	and	r24, r24
    104c:	61 f0       	breq	.+24     	; 0x1066 <GPIO_setPortDirection+0x34>
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	49 f0       	breq	.+18     	; 0x1066 <GPIO_setPortDirection+0x34>
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	31 f0       	breq	.+12     	; 0x1066 <GPIO_setPortDirection+0x34>
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	19 f0       	breq	.+6      	; 0x1066 <GPIO_setPortDirection+0x34>
    {
        local_err = Unvalid_Port;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	4c c0       	rjmp	.+152    	; 0x10fe <GPIO_setPortDirection+0xcc>
    }
    else
    {
        local_err = Valid_Port;
    1066:	19 82       	std	Y+1, r1	; 0x01
        switch (portId)
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3d 83       	std	Y+5, r19	; 0x05
    1070:	2c 83       	std	Y+4, r18	; 0x04
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	d1 f0       	breq	.+52     	; 0x10b0 <GPIO_setPortDirection+0x7e>
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	2c f4       	brge	.+10     	; 0x1090 <GPIO_setPortDirection+0x5e>
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	9d 81       	ldd	r25, Y+5	; 0x05
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	61 f0       	breq	.+24     	; 0x10a6 <GPIO_setPortDirection+0x74>
    108e:	1f c0       	rjmp	.+62     	; 0x10ce <GPIO_setPortDirection+0x9c>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <GPIO_setPortDirection+0x88>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	81 f0       	breq	.+32     	; 0x10c4 <GPIO_setPortDirection+0x92>
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <GPIO_setPortDirection+0x9c>
        {
        case PORTA:
            DDRA_Ptr = PortDirectionValue;
    10a6:	ea e3       	ldi	r30, 0x3A	; 58
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	80 83       	st	Z, r24
    10ae:	27 c0       	rjmp	.+78     	; 0x10fe <GPIO_setPortDirection+0xcc>
            break;
        case PORTB:
            DDRB_Ptr = PortDirectionValue;
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	80 83       	st	Z, r24
    10b8:	22 c0       	rjmp	.+68     	; 0x10fe <GPIO_setPortDirection+0xcc>
            break;
        case PORTC:
            DDRC_Ptr = PortDirectionValue;
    10ba:	e4 e3       	ldi	r30, 0x34	; 52
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	80 83       	st	Z, r24
    10c2:	1d c0       	rjmp	.+58     	; 0x10fe <GPIO_setPortDirection+0xcc>
            break;
        case PORTD:
            DDRD_Ptr = PortDirectionValue;
    10c4:	e1 e3       	ldi	r30, 0x31	; 49
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	80 83       	st	Z, r24
    10cc:	18 c0       	rjmp	.+48     	; 0x10fe <GPIO_setPortDirection+0xcc>
            break;
        default:
            DDRA_Ptr |= (0x00);
    10ce:	aa e3       	ldi	r26, 0x3A	; 58
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ea e3       	ldi	r30, 0x3A	; 58
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8c 93       	st	X, r24
            DDRB_Ptr |= (0x00);
    10da:	a7 e3       	ldi	r26, 0x37	; 55
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e7 e3       	ldi	r30, 0x37	; 55
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8c 93       	st	X, r24
            DDRC_Ptr |= (0x00);
    10e6:	a4 e3       	ldi	r26, 0x34	; 52
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e4 e3       	ldi	r30, 0x34	; 52
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8c 93       	st	X, r24
            DDRD_Ptr |= (0x00);
    10f2:	a1 e3       	ldi	r26, 0x31	; 49
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e1 e3       	ldi	r30, 0x31	; 49
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8c 93       	st	X, r24
            break;
        }
    }
    return local_err;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <GPIO_setPindDirection>:

Error_state GPIO_setPindDirection(u8 portId, u8 PinId, u8 PintDirectionValue)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	28 97       	sbiw	r28, 0x08	; 8
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	8a 83       	std	Y+2, r24	; 0x02
    1126:	6b 83       	std	Y+3, r22	; 0x03
    1128:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	88 23       	and	r24, r24
    1132:	61 f0       	breq	.+24     	; 0x114c <GPIO_setPindDirection+0x3c>
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	49 f0       	breq	.+18     	; 0x114c <GPIO_setPindDirection+0x3c>
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	31 f0       	breq	.+12     	; 0x114c <GPIO_setPindDirection+0x3c>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	19 f0       	breq	.+6      	; 0x114c <GPIO_setPindDirection+0x3c>
    {
        local_err = Unvalid_Port;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	3b c1       	rjmp	.+630    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
    }
    else
    {
        local_err = Valid_Port;
    114c:	19 82       	std	Y+1, r1	; 0x01
        if (PinId > MAX_PIN)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	18 f0       	brcs	.+6      	; 0x115a <GPIO_setPindDirection+0x4a>
        {
            local_err = Unvalid_pin;
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	34 c1       	rjmp	.+616    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
        }
        else
        {
            local_err = Valid_pin;
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	89 83       	std	Y+1, r24	; 0x01
            if (Output_direction == PintDirectionValue)
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	09 f0       	breq	.+2      	; 0x1166 <GPIO_setPindDirection+0x56>
    1164:	92 c0       	rjmp	.+292    	; 0x128a <GPIO_setPindDirection+0x17a>
            {
                switch (portId)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	38 87       	std	Y+8, r19	; 0x08
    116e:	2f 83       	std	Y+7, r18	; 0x07
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	61 30       	cpi	r22, 0x01	; 1
    1176:	71 05       	cpc	r23, r1
    1178:	69 f1       	breq	.+90     	; 0x11d4 <GPIO_setPindDirection+0xc4>
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	98 85       	ldd	r25, Y+8	; 0x08
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	91 05       	cpc	r25, r1
    1182:	34 f4       	brge	.+12     	; 0x1190 <GPIO_setPindDirection+0x80>
    1184:	2f 81       	ldd	r18, Y+7	; 0x07
    1186:	38 85       	ldd	r19, Y+8	; 0x08
    1188:	21 15       	cp	r18, r1
    118a:	31 05       	cpc	r19, r1
    118c:	69 f0       	breq	.+26     	; 0x11a8 <GPIO_setPindDirection+0x98>
    118e:	64 c0       	rjmp	.+200    	; 0x1258 <GPIO_setPindDirection+0x148>
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	62 30       	cpi	r22, 0x02	; 2
    1196:	71 05       	cpc	r23, r1
    1198:	99 f1       	breq	.+102    	; 0x1200 <GPIO_setPindDirection+0xf0>
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	98 85       	ldd	r25, Y+8	; 0x08
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <GPIO_setPindDirection+0x96>
    11a4:	43 c0       	rjmp	.+134    	; 0x122c <GPIO_setPindDirection+0x11c>
    11a6:	58 c0       	rjmp	.+176    	; 0x1258 <GPIO_setPindDirection+0x148>
                {
                case PORTA:
                    DDRA_Ptr = DDRA_Ptr | (PintDirectionValue << PinId);
    11a8:	aa e3       	ldi	r26, 0x3A	; 58
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea e3       	ldi	r30, 0x3A	; 58
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	b9 01       	movw	r22, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GPIO_setPindDirection+0xb8>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GPIO_setPindDirection+0xb4>
    11cc:	cb 01       	movw	r24, r22
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	f7 c0       	rjmp	.+494    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTB:
                    DDRB_Ptr = DDRB_Ptr | (PintDirectionValue << PinId);
    11d4:	a7 e3       	ldi	r26, 0x37	; 55
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e7 e3       	ldi	r30, 0x37	; 55
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	b9 01       	movw	r22, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_setPindDirection+0xe4>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	8a 95       	dec	r24
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_setPindDirection+0xe0>
    11f8:	cb 01       	movw	r24, r22
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	e1 c0       	rjmp	.+450    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTC:
                    DDRC_Ptr = DDRC_Ptr | (PintDirectionValue << PinId);
    1200:	a4 e3       	ldi	r26, 0x34	; 52
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e4 e3       	ldi	r30, 0x34	; 52
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	b9 01       	movw	r22, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <GPIO_setPindDirection+0x110>
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <GPIO_setPindDirection+0x10c>
    1224:	cb 01       	movw	r24, r22
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	cb c0       	rjmp	.+406    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTD:
                    DDRD_Ptr = DDRD_Ptr | (PintDirectionValue << PinId);
    122c:	a1 e3       	ldi	r26, 0x31	; 49
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e1 e3       	ldi	r30, 0x31	; 49
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b9 01       	movw	r22, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_setPindDirection+0x13c>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_setPindDirection+0x138>
    1250:	cb 01       	movw	r24, r22
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	b5 c0       	rjmp	.+362    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                default:
                    DDRA_Ptr |= (0x00);
    1258:	aa e3       	ldi	r26, 0x3A	; 58
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ea e3       	ldi	r30, 0x3A	; 58
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8c 93       	st	X, r24
                    DDRB_Ptr |= (0x00);
    1264:	a7 e3       	ldi	r26, 0x37	; 55
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8c 93       	st	X, r24
                    DDRC_Ptr |= (0x00);
    1270:	a4 e3       	ldi	r26, 0x34	; 52
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8c 93       	st	X, r24
                    DDRD_Ptr |= (0x00);
    127c:	a1 e3       	ldi	r26, 0x31	; 49
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e1 e3       	ldi	r30, 0x31	; 49
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8c 93       	st	X, r24
    1288:	9c c0       	rjmp	.+312    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                }
            }
            else if (low_value == PintDirectionValue)
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	88 23       	and	r24, r24
    128e:	09 f0       	breq	.+2      	; 0x1292 <GPIO_setPindDirection+0x182>
    1290:	96 c0       	rjmp	.+300    	; 0x13be <GPIO_setPindDirection+0x2ae>
            {
                switch (portId)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3e 83       	std	Y+6, r19	; 0x06
    129a:	2d 83       	std	Y+5, r18	; 0x05
    129c:	6d 81       	ldd	r22, Y+5	; 0x05
    129e:	7e 81       	ldd	r23, Y+6	; 0x06
    12a0:	61 30       	cpi	r22, 0x01	; 1
    12a2:	71 05       	cpc	r23, r1
    12a4:	71 f1       	breq	.+92     	; 0x1302 <GPIO_setPindDirection+0x1f2>
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	91 05       	cpc	r25, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <GPIO_setPindDirection+0x1ac>
    12b0:	2d 81       	ldd	r18, Y+5	; 0x05
    12b2:	3e 81       	ldd	r19, Y+6	; 0x06
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	69 f0       	breq	.+26     	; 0x12d4 <GPIO_setPindDirection+0x1c4>
    12ba:	68 c0       	rjmp	.+208    	; 0x138c <GPIO_setPindDirection+0x27c>
    12bc:	6d 81       	ldd	r22, Y+5	; 0x05
    12be:	7e 81       	ldd	r23, Y+6	; 0x06
    12c0:	62 30       	cpi	r22, 0x02	; 2
    12c2:	71 05       	cpc	r23, r1
    12c4:	a9 f1       	breq	.+106    	; 0x1330 <GPIO_setPindDirection+0x220>
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <GPIO_setPindDirection+0x1c2>
    12d0:	46 c0       	rjmp	.+140    	; 0x135e <GPIO_setPindDirection+0x24e>
    12d2:	5c c0       	rjmp	.+184    	; 0x138c <GPIO_setPindDirection+0x27c>
                {
                case PORTA:

                    DDRA_Ptr = DDRA_Ptr & ~(PintDirectionValue << PinId);
    12d4:	aa e3       	ldi	r26, 0x3A	; 58
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea e3       	ldi	r30, 0x3A	; 58
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	b9 01       	movw	r22, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_setPindDirection+0x1e4>
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	8a 95       	dec	r24
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_setPindDirection+0x1e0>
    12f8:	cb 01       	movw	r24, r22
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	60 c0       	rjmp	.+192    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTB:
                    DDRB_Ptr = DDRB_Ptr & ~(PintDirectionValue << PinId);
    1302:	a7 e3       	ldi	r26, 0x37	; 55
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e3       	ldi	r30, 0x37	; 55
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	b9 01       	movw	r22, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_setPindDirection+0x212>
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_setPindDirection+0x20e>
    1326:	cb 01       	movw	r24, r22
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	49 c0       	rjmp	.+146    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTC:
                    DDRC_Ptr = DDRC_Ptr & ~(PintDirectionValue << PinId);
    1330:	a4 e3       	ldi	r26, 0x34	; 52
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e4 e3       	ldi	r30, 0x34	; 52
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	b9 01       	movw	r22, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <GPIO_setPindDirection+0x240>
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	8a 95       	dec	r24
    1352:	e2 f7       	brpl	.-8      	; 0x134c <GPIO_setPindDirection+0x23c>
    1354:	cb 01       	movw	r24, r22
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	32 c0       	rjmp	.+100    	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                case PORTD:
                    DDRD_Ptr = DDRD_Ptr & ~(PintDirectionValue << PinId);
    135e:	a1 e3       	ldi	r26, 0x31	; 49
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e1 e3       	ldi	r30, 0x31	; 49
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <GPIO_setPindDirection+0x26e>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <GPIO_setPindDirection+0x26a>
    1382:	cb 01       	movw	r24, r22
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	1b c0       	rjmp	.+54     	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                default:
                    DDRA_Ptr |= (0x00);
    138c:	aa e3       	ldi	r26, 0x3A	; 58
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ea e3       	ldi	r30, 0x3A	; 58
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8c 93       	st	X, r24
                    DDRB_Ptr |= (0x00);
    1398:	a7 e3       	ldi	r26, 0x37	; 55
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e7 e3       	ldi	r30, 0x37	; 55
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8c 93       	st	X, r24
                    DDRC_Ptr |= (0x00);
    13a4:	a4 e3       	ldi	r26, 0x34	; 52
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e4 e3       	ldi	r30, 0x34	; 52
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8c 93       	st	X, r24
                    DDRD_Ptr |= (0x00);
    13b0:	a1 e3       	ldi	r26, 0x31	; 49
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e1 e3       	ldi	r30, 0x31	; 49
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8c 93       	st	X, r24
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_setPindDirection+0x2b2>
                    break;
                }
            }
            else
            {
                local_err = Can_not_assign_to_pin;
    13be:	84 e0       	ldi	r24, 0x04	; 4
    13c0:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    return local_err;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c4:	28 96       	adiw	r28, 0x08	; 8
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GPIO_getPortValue>:

Error_state GPIO_getPortValue(u8 portId, u8 *val)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_getPortValue+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <GPIO_getPortValue+0x8>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <GPIO_getPortValue+0xa>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	7c 83       	std	Y+4, r23	; 0x04
    13e8:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	88 23       	and	r24, r24
    13f2:	61 f0       	breq	.+24     	; 0x140c <GPIO_getPortValue+0x36>
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	49 f0       	breq	.+18     	; 0x140c <GPIO_getPortValue+0x36>
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	31 f0       	breq	.+12     	; 0x140c <GPIO_getPortValue+0x36>
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	19 f0       	breq	.+6      	; 0x140c <GPIO_getPortValue+0x36>
    {
        local_err = Unvalid_Port;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	42 c0       	rjmp	.+132    	; 0x1490 <GPIO_getPortValue+0xba>
    }
    else
    {

        local_err = Valid_pin;
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	89 83       	std	Y+1, r24	; 0x01
        switch (portId)
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	3e 83       	std	Y+6, r19	; 0x06
    1418:	2d 83       	std	Y+5, r18	; 0x05
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	91 05       	cpc	r25, r1
    1422:	e1 f0       	breq	.+56     	; 0x145c <GPIO_getPortValue+0x86>
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	2c f4       	brge	.+10     	; 0x1438 <GPIO_getPortValue+0x62>
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 f0       	breq	.+24     	; 0x144e <GPIO_getPortValue+0x78>
    1436:	26 c0       	rjmp	.+76     	; 0x1484 <GPIO_getPortValue+0xae>
    1438:	2d 81       	ldd	r18, Y+5	; 0x05
    143a:	3e 81       	ldd	r19, Y+6	; 0x06
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	a1 f0       	breq	.+40     	; 0x146a <GPIO_getPortValue+0x94>
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	b1 f0       	breq	.+44     	; 0x1478 <GPIO_getPortValue+0xa2>
    144c:	1b c0       	rjmp	.+54     	; 0x1484 <GPIO_getPortValue+0xae>
        {
        case PORTA:
            *val = PINA_Ptr;
    144e:	e9 e3       	ldi	r30, 0x39	; 57
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	eb 81       	ldd	r30, Y+3	; 0x03
    1456:	fc 81       	ldd	r31, Y+4	; 0x04
    1458:	80 83       	st	Z, r24
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <GPIO_getPortValue+0xae>
            break;
        case PORTB:
            *val = PINB_Ptr;
    145c:	e6 e3       	ldi	r30, 0x36	; 54
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	eb 81       	ldd	r30, Y+3	; 0x03
    1464:	fc 81       	ldd	r31, Y+4	; 0x04
    1466:	80 83       	st	Z, r24
    1468:	0d c0       	rjmp	.+26     	; 0x1484 <GPIO_getPortValue+0xae>
            break;
        case PORTC:
            *val = PINC_Ptr;
    146a:	e3 e3       	ldi	r30, 0x33	; 51
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	eb 81       	ldd	r30, Y+3	; 0x03
    1472:	fc 81       	ldd	r31, Y+4	; 0x04
    1474:	80 83       	st	Z, r24
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <GPIO_getPortValue+0xae>
            break;
        case PORTD:
            *val = PIND_Ptr;
    1478:	e0 e3       	ldi	r30, 0x30	; 48
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	eb 81       	ldd	r30, Y+3	; 0x03
    1480:	fc 81       	ldd	r31, Y+4	; 0x04
    1482:	80 83       	st	Z, r24
            break;
        default:
            break;
        }
        if (NULL == val)
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	11 f4       	brne	.+4      	; 0x1490 <GPIO_getPortValue+0xba>
        {
            local_err = NULL_POINTER;
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return local_err;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
}
    1492:	26 96       	adiw	r28, 0x06	; 6
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <GPIO_getPIN>:

Error_state GPIO_getPIN(u8 portId, u8 PinId, u8 *val)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	27 97       	sbiw	r28, 0x07	; 7
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
    14bc:	5d 83       	std	Y+5, r21	; 0x05
    14be:	4c 83       	std	Y+4, r20	; 0x04
    Error_state local_err = Unvalid_Port;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	88 23       	and	r24, r24
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <GPIO_getPIN+0x3e>
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	49 f0       	breq	.+18     	; 0x14e2 <GPIO_getPIN+0x3e>
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <GPIO_getPIN+0x3e>
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	19 f0       	breq	.+6      	; 0x14e2 <GPIO_getPIN+0x3e>
    {
        local_err = Unvalid_Port;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	7e c0       	rjmp	.+252    	; 0x15de <GPIO_getPIN+0x13a>
    }
    else
    {
        if (PinId > MAX_PIN)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 30       	cpi	r24, 0x08	; 8
    14e6:	18 f0       	brcs	.+6      	; 0x14ee <GPIO_getPIN+0x4a>
        {
            local_err = Unvalid_pin;
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	78 c0       	rjmp	.+240    	; 0x15de <GPIO_getPIN+0x13a>
        }
        else
        {
            local_err = Valid_pin;
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	89 83       	std	Y+1, r24	; 0x01
            switch (portId)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3f 83       	std	Y+7, r19	; 0x07
    14fa:	2e 83       	std	Y+6, r18	; 0x06
    14fc:	4e 81       	ldd	r20, Y+6	; 0x06
    14fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1500:	41 30       	cpi	r20, 0x01	; 1
    1502:	51 05       	cpc	r21, r1
    1504:	59 f1       	breq	.+86     	; 0x155c <GPIO_getPIN+0xb8>
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	91 05       	cpc	r25, r1
    150e:	34 f4       	brge	.+12     	; 0x151c <GPIO_getPIN+0x78>
    1510:	2e 81       	ldd	r18, Y+6	; 0x06
    1512:	3f 81       	ldd	r19, Y+7	; 0x07
    1514:	21 15       	cp	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	69 f0       	breq	.+26     	; 0x1534 <GPIO_getPIN+0x90>
    151a:	5b c0       	rjmp	.+182    	; 0x15d2 <GPIO_getPIN+0x12e>
    151c:	4e 81       	ldd	r20, Y+6	; 0x06
    151e:	5f 81       	ldd	r21, Y+7	; 0x07
    1520:	42 30       	cpi	r20, 0x02	; 2
    1522:	51 05       	cpc	r21, r1
    1524:	79 f1       	breq	.+94     	; 0x1584 <GPIO_getPIN+0xe0>
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <GPIO_getPIN+0x8e>
    1530:	3d c0       	rjmp	.+122    	; 0x15ac <GPIO_getPIN+0x108>
    1532:	4f c0       	rjmp	.+158    	; 0x15d2 <GPIO_getPIN+0x12e>
            {
            case PORTA:
                *val = (PINA_Ptr >> PinId) & 1;
    1534:	e9 e3       	ldi	r30, 0x39	; 57
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a9 01       	movw	r20, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_getPIN+0xa8>
    1548:	55 95       	asr	r21
    154a:	47 95       	ror	r20
    154c:	8a 95       	dec	r24
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_getPIN+0xa4>
    1550:	ca 01       	movw	r24, r20
    1552:	81 70       	andi	r24, 0x01	; 1
    1554:	ec 81       	ldd	r30, Y+4	; 0x04
    1556:	fd 81       	ldd	r31, Y+5	; 0x05
    1558:	80 83       	st	Z, r24
    155a:	3b c0       	rjmp	.+118    	; 0x15d2 <GPIO_getPIN+0x12e>
                break;
            case PORTB:
                *val = (PINB_Ptr >> PinId) & 1;
    155c:	e6 e3       	ldi	r30, 0x36	; 54
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_getPIN+0xd0>
    1570:	55 95       	asr	r21
    1572:	47 95       	ror	r20
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_getPIN+0xcc>
    1578:	ca 01       	movw	r24, r20
    157a:	81 70       	andi	r24, 0x01	; 1
    157c:	ec 81       	ldd	r30, Y+4	; 0x04
    157e:	fd 81       	ldd	r31, Y+5	; 0x05
    1580:	80 83       	st	Z, r24
    1582:	27 c0       	rjmp	.+78     	; 0x15d2 <GPIO_getPIN+0x12e>
                break;
            case PORTC:
                *val = (PINC_Ptr >> PinId) & 1;
    1584:	e3 e3       	ldi	r30, 0x33	; 51
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_getPIN+0xf8>
    1598:	55 95       	asr	r21
    159a:	47 95       	ror	r20
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_getPIN+0xf4>
    15a0:	ca 01       	movw	r24, r20
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	ec 81       	ldd	r30, Y+4	; 0x04
    15a6:	fd 81       	ldd	r31, Y+5	; 0x05
    15a8:	80 83       	st	Z, r24
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <GPIO_getPIN+0x12e>
                break;
            case PORTD:
                *val = (PIND_Ptr >> PinId) & 1;
    15ac:	e0 e3       	ldi	r30, 0x30	; 48
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <GPIO_getPIN+0x120>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <GPIO_getPIN+0x11c>
    15c8:	ca 01       	movw	r24, r20
    15ca:	81 70       	andi	r24, 0x01	; 1
    15cc:	ec 81       	ldd	r30, Y+4	; 0x04
    15ce:	fd 81       	ldd	r31, Y+5	; 0x05
    15d0:	80 83       	st	Z, r24
                break;
            default:
                break;
            }
            if (NULL == val)
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	11 f4       	brne	.+4      	; 0x15de <GPIO_getPIN+0x13a>
            {
                local_err = NULL_POINTER;
    15da:	86 e0       	ldi	r24, 0x06	; 6
    15dc:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }

    return local_err;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	27 96       	adiw	r28, 0x07	; 7
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <GPIO_setPin_PUll_UP>:

Error_state GPIO_setPin_PUll_UP(u8 portId, u8 PinId)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_setPin_PUll_UP+0x6>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	6b 83       	std	Y+3, r22	; 0x03
    Error_state local_err = Unvalid_Port;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
    if ((PORTA != portId) && (PORTB != portId) && (PORTC != portId) && (PORTD != portId))
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	88 23       	and	r24, r24
    160a:	61 f0       	breq	.+24     	; 0x1624 <GPIO_setPin_PUll_UP+0x32>
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	49 f0       	breq	.+18     	; 0x1624 <GPIO_setPin_PUll_UP+0x32>
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	31 f0       	breq	.+12     	; 0x1624 <GPIO_setPin_PUll_UP+0x32>
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	19 f0       	breq	.+6      	; 0x1624 <GPIO_setPin_PUll_UP+0x32>
    {
        local_err = Unvalid_Port;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	12 c0       	rjmp	.+36     	; 0x1648 <GPIO_setPin_PUll_UP+0x56>
    }
    else
    {
        if (PinId > MAX_PIN)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	18 f0       	brcs	.+6      	; 0x1630 <GPIO_setPin_PUll_UP+0x3e>
        {
            local_err = Unvalid_pin;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <GPIO_setPin_PUll_UP+0x56>
        }
        else
        {
            local_err = Valid_pin;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	89 83       	std	Y+1, r24	; 0x01
            GPIO_setPindDirection(portId, PinId, Input_direction);
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	6b 81       	ldd	r22, Y+3	; 0x03
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
            GPIO_setPinValue(portId, PinId, high_value);
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	6b 81       	ldd	r22, Y+3	; 0x03
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
        }
    }

    return local_err;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <Seven_Segment>:
    0x07, // 7
    0x7F, // 8
    0x6F  // 9
};
Error_state Seven_Segment(u8 numebr, u8 seven_seg_id)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <Seven_Segment+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <Seven_Segment+0x8>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	8c 83       	std	Y+4, r24	; 0x04
    1666:	6d 83       	std	Y+5, r22	; 0x05
    Error_state local_err = Unvalid_Port;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	8b 83       	std	Y+3, r24	; 0x03
    Glopal_ptr = NULL;
    166c:	10 92 d9 00 	sts	0x00D9, r1
    1670:	10 92 d8 00 	sts	0x00D8, r1
    for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	0c c0       	rjmp	.+24     	; 0x1690 <Seven_Segment+0x3a>
    {
        if (LoopIteratorOne == seven_seg_id)
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	98 17       	cp	r25, r24
    167e:	19 f4       	brne	.+6      	; 0x1686 <Seven_Segment+0x30>
        {
        	local_err = SS_valid;
    1680:	8c e0       	ldi	r24, 0x0C	; 12
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	0a c0       	rjmp	.+20     	; 0x169a <Seven_Segment+0x44>
            break;
        }
        else
        {
        	local_err = SS_not_valid;
    1686:	8d e0       	ldi	r24, 0x0D	; 13
    1688:	8b 83       	std	Y+3, r24	; 0x03
};
Error_state Seven_Segment(u8 numebr, u8 seven_seg_id)
{
    Error_state local_err = Unvalid_Port;
    Glopal_ptr = NULL;
    for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	90 91 7a 00 	lds	r25, 0x007A
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	89 17       	cp	r24, r25
    1698:	78 f3       	brcs	.-34     	; 0x1678 <Seven_Segment+0x22>
        else
        {
        	local_err = SS_not_valid;
        }
    }
    Glopal_ptr = &seven_segments_arr[seven_seg_id];
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	c9 01       	movw	r24, r18
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	82 0f       	add	r24, r18
    16a8:	93 1f       	adc	r25, r19
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 59       	subi	r24, 0x92	; 146
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	90 93 d9 00 	sts	0x00D9, r25
    16b6:	80 93 d8 00 	sts	0x00D8, r24
    if (Glopal_ptr == NULL)
    16ba:	80 91 d8 00 	lds	r24, 0x00D8
    16be:	90 91 d9 00 	lds	r25, 0x00D9
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	19 f4       	brne	.+6      	; 0x16cc <Seven_Segment+0x76>
    {
        local_err = NULL_POINTER;
    16c6:	86 e0       	ldi	r24, 0x06	; 6
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	c1 c0       	rjmp	.+386    	; 0x184e <Seven_Segment+0x1f8>
    }
    else
    {
        if (numebr > 9)
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	8a 30       	cpi	r24, 0x0A	; 10
    16d0:	18 f0       	brcs	.+6      	; 0x16d8 <Seven_Segment+0x82>
        {
            local_err = Can_not_assign_to_SS;
    16d2:	8b e0       	ldi	r24, 0x0B	; 11
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	bb c0       	rjmp	.+374    	; 0x184e <Seven_Segment+0x1f8>
        }
        else
        {
            if ((PORTA != Glopal_ptr->PORT) && (PORTB != Glopal_ptr->PORT) && (PORTC != Glopal_ptr->PORT) && (PORTD != Glopal_ptr->PORT))
    16d8:	e0 91 d8 00 	lds	r30, 0x00D8
    16dc:	f0 91 d9 00 	lds	r31, 0x00D9
    16e0:	81 81       	ldd	r24, Z+1	; 0x01
    16e2:	88 23       	and	r24, r24
    16e4:	c1 f0       	breq	.+48     	; 0x1716 <Seven_Segment+0xc0>
    16e6:	e0 91 d8 00 	lds	r30, 0x00D8
    16ea:	f0 91 d9 00 	lds	r31, 0x00D9
    16ee:	81 81       	ldd	r24, Z+1	; 0x01
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	89 f0       	breq	.+34     	; 0x1716 <Seven_Segment+0xc0>
    16f4:	e0 91 d8 00 	lds	r30, 0x00D8
    16f8:	f0 91 d9 00 	lds	r31, 0x00D9
    16fc:	81 81       	ldd	r24, Z+1	; 0x01
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	51 f0       	breq	.+20     	; 0x1716 <Seven_Segment+0xc0>
    1702:	e0 91 d8 00 	lds	r30, 0x00D8
    1706:	f0 91 d9 00 	lds	r31, 0x00D9
    170a:	81 81       	ldd	r24, Z+1	; 0x01
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	19 f0       	breq	.+6      	; 0x1716 <Seven_Segment+0xc0>
            {
                local_err = Unvalid_Port;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	9c c0       	rjmp	.+312    	; 0x184e <Seven_Segment+0x1f8>
            }
            else
            {
                for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    1716:	19 82       	std	Y+1, r1	; 0x01
    1718:	10 c0       	rjmp	.+32     	; 0x173a <Seven_Segment+0xe4>
                {
                    if (LoopIteratorOne == Glopal_ptr->SEVEN_SEG_ID)
    171a:	e0 91 d8 00 	lds	r30, 0x00D8
    171e:	f0 91 d9 00 	lds	r31, 0x00D9
    1722:	90 81       	ld	r25, Z
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	98 17       	cp	r25, r24
    1728:	19 f4       	brne	.+6      	; 0x1730 <Seven_Segment+0xda>
                    {
                        local_err = SS_valid;
    172a:	8c e0       	ldi	r24, 0x0C	; 12
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <Seven_Segment+0xee>
                        break;
                    }
                    else
                    {
                        local_err = SS_not_valid;
    1730:	8d e0       	ldi	r24, 0x0D	; 13
    1732:	8b 83       	std	Y+3, r24	; 0x03
            {
                local_err = Unvalid_Port;
            }
            else
            {
                for (u8 LoopIteratorOne = 0; LoopIteratorOne < legnth; LoopIteratorOne++)
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	90 91 7a 00 	lds	r25, 0x007A
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	89 17       	cp	r24, r25
    1742:	58 f3       	brcs	.-42     	; 0x171a <Seven_Segment+0xc4>
                    else
                    {
                        local_err = SS_not_valid;
                    }
                }
                if (SS_valid == local_err)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	8c 30       	cpi	r24, 0x0C	; 12
    1748:	09 f0       	breq	.+2      	; 0x174c <Seven_Segment+0xf6>
    174a:	81 c0       	rjmp	.+258    	; 0x184e <Seven_Segment+0x1f8>
                {
                    if (comman_anode == Glopal_ptr->SEVEN_SEG_type)
    174c:	e0 91 d8 00 	lds	r30, 0x00D8
    1750:	f0 91 d9 00 	lds	r31, 0x00D9
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	d1 f5       	brne	.+116    	; 0x17ce <Seven_Segment+0x178>
                    {
                        GPIO_setPindDirection(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Out_Port_direction);
    175a:	e0 91 d8 00 	lds	r30, 0x00D8
    175e:	f0 91 d9 00 	lds	r31, 0x00D9
    1762:	83 81       	ldd	r24, Z+3	; 0x03
    1764:	e0 91 d8 00 	lds	r30, 0x00D8
    1768:	f0 91 d9 00 	lds	r31, 0x00D9
    176c:	94 81       	ldd	r25, Z+4	; 0x04
    176e:	69 2f       	mov	r22, r25
    1770:	4f ef       	ldi	r20, 0xFF	; 255
    1772:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Glopal_ptr->SEVEN_SEG_Enable.value);
    1776:	e0 91 d8 00 	lds	r30, 0x00D8
    177a:	f0 91 d9 00 	lds	r31, 0x00D9
    177e:	83 81       	ldd	r24, Z+3	; 0x03
    1780:	e0 91 d8 00 	lds	r30, 0x00D8
    1784:	f0 91 d9 00 	lds	r31, 0x00D9
    1788:	24 81       	ldd	r18, Z+4	; 0x04
    178a:	e0 91 d8 00 	lds	r30, 0x00D8
    178e:	f0 91 d9 00 	lds	r31, 0x00D9
    1792:	95 81       	ldd	r25, Z+5	; 0x05
    1794:	62 2f       	mov	r22, r18
    1796:	49 2f       	mov	r20, r25
    1798:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
                        GPIO_setPortDirection(Glopal_ptr->PORT, 0xff);
    179c:	e0 91 d8 00 	lds	r30, 0x00D8
    17a0:	f0 91 d9 00 	lds	r31, 0x00D9
    17a4:	81 81       	ldd	r24, Z+1	; 0x01
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	0e 94 19 08 	call	0x1032	; 0x1032 <GPIO_setPortDirection>
                        GPIO_setPortValue(Glopal_ptr->PORT, CA_SevenSegmentValues[numebr]);
    17ac:	e0 91 d8 00 	lds	r30, 0x00D8
    17b0:	f0 91 d9 00 	lds	r31, 0x00D9
    17b4:	21 81       	ldd	r18, Z+1	; 0x01
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	e7 55       	subi	r30, 0x57	; 87
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	90 81       	ld	r25, Z
    17c4:	82 2f       	mov	r24, r18
    17c6:	69 2f       	mov	r22, r25
    17c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setPortValue>
    17cc:	40 c0       	rjmp	.+128    	; 0x184e <Seven_Segment+0x1f8>
                    }
                    else if (comman_cathode == Glopal_ptr->SEVEN_SEG_type)
    17ce:	e0 91 d8 00 	lds	r30, 0x00D8
    17d2:	f0 91 d9 00 	lds	r31, 0x00D9
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	88 23       	and	r24, r24
    17da:	c9 f5       	brne	.+114    	; 0x184e <Seven_Segment+0x1f8>
                    {
                        GPIO_setPindDirection(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Out_Port_direction);
    17dc:	e0 91 d8 00 	lds	r30, 0x00D8
    17e0:	f0 91 d9 00 	lds	r31, 0x00D9
    17e4:	83 81       	ldd	r24, Z+3	; 0x03
    17e6:	e0 91 d8 00 	lds	r30, 0x00D8
    17ea:	f0 91 d9 00 	lds	r31, 0x00D9
    17ee:	94 81       	ldd	r25, Z+4	; 0x04
    17f0:	69 2f       	mov	r22, r25
    17f2:	4f ef       	ldi	r20, 0xFF	; 255
    17f4:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
                        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,Glopal_ptr->SEVEN_SEG_Enable.value);
    17f8:	e0 91 d8 00 	lds	r30, 0x00D8
    17fc:	f0 91 d9 00 	lds	r31, 0x00D9
    1800:	83 81       	ldd	r24, Z+3	; 0x03
    1802:	e0 91 d8 00 	lds	r30, 0x00D8
    1806:	f0 91 d9 00 	lds	r31, 0x00D9
    180a:	24 81       	ldd	r18, Z+4	; 0x04
    180c:	e0 91 d8 00 	lds	r30, 0x00D8
    1810:	f0 91 d9 00 	lds	r31, 0x00D9
    1814:	95 81       	ldd	r25, Z+5	; 0x05
    1816:	62 2f       	mov	r22, r18
    1818:	49 2f       	mov	r20, r25
    181a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
                        GPIO_setPortDirection(Glopal_ptr->PORT, 0xff);
    181e:	e0 91 d8 00 	lds	r30, 0x00D8
    1822:	f0 91 d9 00 	lds	r31, 0x00D9
    1826:	81 81       	ldd	r24, Z+1	; 0x01
    1828:	6f ef       	ldi	r22, 0xFF	; 255
    182a:	0e 94 19 08 	call	0x1032	; 0x1032 <GPIO_setPortDirection>
                        GPIO_setPortValue(Glopal_ptr->PORT, CC_SevenSegmentValues[numebr]);
    182e:	e0 91 d8 00 	lds	r30, 0x00D8
    1832:	f0 91 d9 00 	lds	r31, 0x00D9
    1836:	21 81       	ldd	r18, Z+1	; 0x01
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	fc 01       	movw	r30, r24
    1840:	ed 54       	subi	r30, 0x4D	; 77
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	90 81       	ld	r25, Z
    1846:	82 2f       	mov	r24, r18
    1848:	69 2f       	mov	r22, r25
    184a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setPortValue>
                }
            }
        }
    }

    return local_err;
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <Seven_Segment_Mul>:

Error_state Seven_Segment_Mul(u8 number)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	67 97       	sbiw	r28, 0x17	; 23
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	89 8b       	std	Y+17, r24	; 0x11
    Error_state local_err = Unvalid_Port;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	88 8b       	std	Y+16, r24	; 0x10
    if (number > 99)
    187a:	89 89       	ldd	r24, Y+17	; 0x11
    187c:	84 36       	cpi	r24, 0x64	; 100
    187e:	18 f0       	brcs	.+6      	; 0x1886 <Seven_Segment_Mul+0x26>
    {
        local_err = can_not_assign_to_multiplix;
    1880:	8e e0       	ldi	r24, 0x0E	; 14
    1882:	88 8b       	std	Y+16, r24	; 0x10
    1884:	cb c0       	rjmp	.+406    	; 0x1a1c <Seven_Segment_Mul+0x1bc>
    }
    else
    {
        local_err = Valid_Port;
    1886:	18 8a       	std	Y+16, r1	; 0x10
        u8 i=0;
    1888:	1f 86       	std	Y+15, r1	; 0x0f
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <Seven_Segment_Mul+0x42>
    	while (i<50)
        {
            Seven_Segment(number/10,0);
    188c:	89 89       	ldd	r24, Y+17	; 0x11
    188e:	9a e0       	ldi	r25, 0x0A	; 10
    1890:	69 2f       	mov	r22, r25
    1892:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__udivmodqi4>
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Seven_Segment>
            i++;
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	8f 87       	std	Y+15, r24	; 0x0f
    }
    else
    {
        local_err = Valid_Port;
        u8 i=0;
    	while (i<50)
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	82 33       	cpi	r24, 0x32	; 50
    18a6:	90 f3       	brcs	.-28     	; 0x188c <Seven_Segment_Mul+0x2c>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 ef       	ldi	r26, 0xF0	; 240
    18ae:	b1 e4       	ldi	r27, 0x41	; 65
    18b0:	8b 87       	std	Y+11, r24	; 0x0b
    18b2:	9c 87       	std	Y+12, r25	; 0x0c
    18b4:	ad 87       	std	Y+13, r26	; 0x0d
    18b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    18bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18be:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8f 83       	std	Y+7, r24	; 0x07
    18d2:	98 87       	std	Y+8, r25	; 0x08
    18d4:	a9 87       	std	Y+9, r26	; 0x09
    18d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <Seven_Segment_Mul+0x9a>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <Seven_Segment_Mul+0x118>
	else if (__tmp > 65535)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <Seven_Segment_Mul+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6b 85       	ldd	r22, Y+11	; 0x0b
    1914:	7c 85       	ldd	r23, Y+12	; 0x0c
    1916:	8d 85       	ldd	r24, Y+13	; 0x0d
    1918:	9e 85       	ldd	r25, Y+14	; 0x0e
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	0f c0       	rjmp	.+30     	; 0x195a <Seven_Segment_Mul+0xfa>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <Seven_Segment_Mul+0xe8>
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <Seven_Segment_Mul+0xdc>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <Seven_Segment_Mul+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <Seven_Segment_Mul+0x124>
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
            Seven_Segment(number/10,0);
            i++;
        }
        
        _delay_ms(30);
        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,!(Glopal_ptr->SEVEN_SEG_Enable.value));
    198c:	e0 91 d8 00 	lds	r30, 0x00D8
    1990:	f0 91 d9 00 	lds	r31, 0x00D9
    1994:	83 81       	ldd	r24, Z+3	; 0x03
    1996:	8f 8b       	std	Y+23, r24	; 0x17
    1998:	e0 91 d8 00 	lds	r30, 0x00D8
    199c:	f0 91 d9 00 	lds	r31, 0x00D9
    19a0:	84 81       	ldd	r24, Z+4	; 0x04
    19a2:	8e 8b       	std	Y+22, r24	; 0x16
    19a4:	e0 91 d8 00 	lds	r30, 0x00D8
    19a8:	f0 91 d9 00 	lds	r31, 0x00D9
    19ac:	85 81       	ldd	r24, Z+5	; 0x05
    19ae:	1d 8a       	std	Y+21, r1	; 0x15
    19b0:	88 23       	and	r24, r24
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <Seven_Segment_Mul+0x158>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	8d 8b       	std	Y+21, r24	; 0x15
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	6e 89       	ldd	r22, Y+22	; 0x16
    19bc:	4d 89       	ldd	r20, Y+21	; 0x15
    19be:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
        i =0;
    19c2:	1f 86       	std	Y+15, r1	; 0x0f
    19c4:	0c c0       	rjmp	.+24     	; 0x19de <Seven_Segment_Mul+0x17e>
        while (i < 150)
        {
            Seven_Segment(number%10,1);
    19c6:	89 89       	ldd	r24, Y+17	; 0x11
    19c8:	9a e0       	ldi	r25, 0x0A	; 10
    19ca:	69 2f       	mov	r22, r25
    19cc:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__udivmodqi4>
    19d0:	89 2f       	mov	r24, r25
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <Seven_Segment>
            i++;
    19d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
        }
        
        _delay_ms(30);
        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,!(Glopal_ptr->SEVEN_SEG_Enable.value));
        i =0;
        while (i < 150)
    19de:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e0:	86 39       	cpi	r24, 0x96	; 150
    19e2:	88 f3       	brcs	.-30     	; 0x19c6 <Seven_Segment_Mul+0x166>
        {
            Seven_Segment(number%10,1);
            i++;
        }
        i=0;
    19e4:	1f 86       	std	Y+15, r1	; 0x0f
        GPIO_setPinValue(Glopal_ptr->SEVEN_SEG_Enable.port,Glopal_ptr->SEVEN_SEG_Enable.pin,!(Glopal_ptr->SEVEN_SEG_Enable.value));
    19e6:	e0 91 d8 00 	lds	r30, 0x00D8
    19ea:	f0 91 d9 00 	lds	r31, 0x00D9
    19ee:	83 81       	ldd	r24, Z+3	; 0x03
    19f0:	8c 8b       	std	Y+20, r24	; 0x14
    19f2:	e0 91 d8 00 	lds	r30, 0x00D8
    19f6:	f0 91 d9 00 	lds	r31, 0x00D9
    19fa:	84 81       	ldd	r24, Z+4	; 0x04
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	e0 91 d8 00 	lds	r30, 0x00D8
    1a02:	f0 91 d9 00 	lds	r31, 0x00D9
    1a06:	85 81       	ldd	r24, Z+5	; 0x05
    1a08:	1a 8a       	std	Y+18, r1	; 0x12
    1a0a:	88 23       	and	r24, r24
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <Seven_Segment_Mul+0x1b2>
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	8a 8b       	std	Y+18, r24	; 0x12
    1a12:	8c 89       	ldd	r24, Y+20	; 0x14
    1a14:	6b 89       	ldd	r22, Y+19	; 0x13
    1a16:	4a 89       	ldd	r20, Y+18	; 0x12
    1a18:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>


    }
    
    return local_err;   
    1a1c:	88 89       	ldd	r24, Y+16	; 0x10
}
    1a1e:	67 96       	adiw	r28, 0x17	; 23
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <LED_ON>:
 *  Created on: Aug 22, 2023
 *      Author: ahmedomar
 */

Error_state LED_ON()
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <LED_ON+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <LED_ON+0x8>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    // make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
    1a3c:	86 e0       	ldi	r24, 0x06	; 6
    1a3e:	8c 83       	std	Y+4, r24	; 0x04
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9b 83       	std	Y+3, r25	; 0x03
    1a46:	8a 83       	std	Y+2, r24	; 0x02
    // first check the null pointer
    if (NULL == LED_PTR)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <LED_ON+0x26>
    {
        local_error = NULL_POINTER;
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	8c 83       	std	Y+4, r24	; 0x04
    1a54:	37 c0       	rjmp	.+110    	; 0x1ac4 <LED_ON+0x94>
    }
    else
    {
        // check led is valid
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    1a56:	19 82       	std	Y+1, r1	; 0x01
    1a58:	0e c0       	rjmp	.+28     	; 0x1a76 <LED_ON+0x46>
        {
            if (LoopIteratorOne == LED_PTR->LED_ID)
    1a5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5e:	90 81       	ld	r25, Z
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	98 17       	cp	r25, r24
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <LED_ON+0x3c>
            {
                local_error = LED_VALID;
    1a66:	87 e0       	ldi	r24, 0x07	; 7
    1a68:	8c 83       	std	Y+4, r24	; 0x04
    1a6a:	0a c0       	rjmp	.+20     	; 0x1a80 <LED_ON+0x50>
                break;
            }
            else
            {
                local_error = LED_NOT_VALID;
    1a6c:	88 e0       	ldi	r24, 0x08	; 8
    1a6e:	8c 83       	std	Y+4, r24	; 0x04
        local_error = NULL_POINTER;
    }
    else
    {
        // check led is valid
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	90 91 7b 00 	lds	r25, 0x007B
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	89 17       	cp	r24, r25
    1a7e:	68 f3       	brcs	.-38     	; 0x1a5a <LED_ON+0x2a>
            else
            {
                local_error = LED_NOT_VALID;
            }
        }
        if (LED_VALID == local_error)
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	87 30       	cpi	r24, 0x07	; 7
    1a84:	f9 f4       	brne	.+62     	; 0x1ac4 <LED_ON+0x94>
        {
            local_error = Not_Working;
    1a86:	8a e0       	ldi	r24, 0x0A	; 10
    1a88:	8c 83       	std	Y+4, r24	; 0x04
            LED_PTR->PIN_VAL = high_value;
    1a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	83 83       	std	Z+3, r24	; 0x03
            GPIO_setPindDirection(LED_PTR->PORT, LED_PTR->PIN, Output_direction);
    1a92:	ea 81       	ldd	r30, Y+2	; 0x02
    1a94:	fb 81       	ldd	r31, Y+3	; 0x03
    1a96:	81 81       	ldd	r24, Z+1	; 0x01
    1a98:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a9c:	92 81       	ldd	r25, Z+2	; 0x02
    1a9e:	69 2f       	mov	r22, r25
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
            GPIO_setPinValue(LED_PTR->PORT, LED_PTR->PIN, LED_PTR->PIN_VAL);
    1aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aaa:	81 81       	ldd	r24, Z+1	; 0x01
    1aac:	ea 81       	ldd	r30, Y+2	; 0x02
    1aae:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab0:	22 81       	ldd	r18, Z+2	; 0x02
    1ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	62 2f       	mov	r22, r18
    1aba:	49 2f       	mov	r20, r25
    1abc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
            local_error = Working;
    1ac0:	89 e0       	ldi	r24, 0x09	; 9
    1ac2:	8c 83       	std	Y+4, r24	; 0x04
        else
        {
        }
    }

    return local_error;
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <LED_OFF>:

Error_state LED_OFF()
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <LED_OFF+0x6>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <LED_OFF+0x8>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    // make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
    1ae0:	86 e0       	ldi	r24, 0x06	; 6
    1ae2:	8c 83       	std	Y+4, r24	; 0x04
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
    1ae4:	80 e8       	ldi	r24, 0x80	; 128
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9b 83       	std	Y+3, r25	; 0x03
    1aea:	8a 83       	std	Y+2, r24	; 0x02
    // first check the null pointer
    if (NULL == LED_PTR)
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	19 f4       	brne	.+6      	; 0x1afa <LED_OFF+0x26>
    {
        local_error = NULL_POINTER;
    1af4:	86 e0       	ldi	r24, 0x06	; 6
    1af6:	8c 83       	std	Y+4, r24	; 0x04
    1af8:	36 c0       	rjmp	.+108    	; 0x1b66 <LED_OFF+0x92>
    }
    else
    {
        // check led is valid                           //length
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    1afa:	19 82       	std	Y+1, r1	; 0x01
    1afc:	0e c0       	rjmp	.+28     	; 0x1b1a <LED_OFF+0x46>
        {
            if (LoopIteratorOne == LED_PTR->LED_ID)
    1afe:	ea 81       	ldd	r30, Y+2	; 0x02
    1b00:	fb 81       	ldd	r31, Y+3	; 0x03
    1b02:	90 81       	ld	r25, Z
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	98 17       	cp	r25, r24
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <LED_OFF+0x3c>
            {
                local_error = LED_VALID;
    1b0a:	87 e0       	ldi	r24, 0x07	; 7
    1b0c:	8c 83       	std	Y+4, r24	; 0x04
    1b0e:	0a c0       	rjmp	.+20     	; 0x1b24 <LED_OFF+0x50>
                break;
            }
            else
            {
                local_error = LED_NOT_VALID;
    1b10:	88 e0       	ldi	r24, 0x08	; 8
    1b12:	8c 83       	std	Y+4, r24	; 0x04
        local_error = NULL_POINTER;
    }
    else
    {
        // check led is valid                           //length
        for (u8 LoopIteratorOne = 0; LoopIteratorOne < NumberOfLeds; LoopIteratorOne++)
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	90 91 7b 00 	lds	r25, 0x007B
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	89 17       	cp	r24, r25
    1b22:	68 f3       	brcs	.-38     	; 0x1afe <LED_OFF+0x2a>
            else
            {
                local_error = LED_NOT_VALID;
            }
        }
        if (LED_VALID == local_error)
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	87 30       	cpi	r24, 0x07	; 7
    1b28:	f1 f4       	brne	.+60     	; 0x1b66 <LED_OFF+0x92>
        {
            local_error = Working;
    1b2a:	89 e0       	ldi	r24, 0x09	; 9
    1b2c:	8c 83       	std	Y+4, r24	; 0x04
            LED_PTR->PIN_VAL = low_value;
    1b2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b30:	fb 81       	ldd	r31, Y+3	; 0x03
    1b32:	13 82       	std	Z+3, r1	; 0x03
            GPIO_setPindDirection(LED_PTR->PORT, LED_PTR->PIN, Output_direction);
    1b34:	ea 81       	ldd	r30, Y+2	; 0x02
    1b36:	fb 81       	ldd	r31, Y+3	; 0x03
    1b38:	81 81       	ldd	r24, Z+1	; 0x01
    1b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3e:	92 81       	ldd	r25, Z+2	; 0x02
    1b40:	69 2f       	mov	r22, r25
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
            GPIO_setPinValue(LED_PTR->PORT, LED_PTR->PIN, LED_PTR->PIN_VAL);
    1b48:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4c:	81 81       	ldd	r24, Z+1	; 0x01
    1b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b50:	fb 81       	ldd	r31, Y+3	; 0x03
    1b52:	22 81       	ldd	r18, Z+2	; 0x02
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	93 81       	ldd	r25, Z+3	; 0x03
    1b5a:	62 2f       	mov	r22, r18
    1b5c:	49 2f       	mov	r20, r25
    1b5e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
            local_error = Not_Working;
    1b62:	8a e0       	ldi	r24, 0x0A	; 10
    1b64:	8c 83       	std	Y+4, r24	; 0x04
        else
        {
        }
    }

    return local_error;
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <Toggel_LED>:

Error_state Toggel_LED()
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <Toggel_LED+0x6>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	// make local variables for error and pointer
    Error_state local_error = NULL_POINTER;
    1b82:	86 e0       	ldi	r24, 0x06	; 6
    1b84:	8b 83       	std	Y+3, r24	; 0x03
    // if the devloper in hal layer need to change the index
    LED_T *LED_PTR = &Arr_Leds[1];
    1b86:	80 e8       	ldi	r24, 0x80	; 128
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    // first check the null pointer
    if (NULL == LED_PTR)
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <Toggel_LED+0x26>
    {
        local_error = NULL_POINTER;
    1b96:	86 e0       	ldi	r24, 0x06	; 6
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	11 c0       	rjmp	.+34     	; 0x1bbe <Toggel_LED+0x48>
    }
    else
    {
        if (high_value == LED_PTR->PIN_VAL)
    1b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba0:	83 81       	ldd	r24, Z+3	; 0x03
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <Toggel_LED+0x38>
        {
            local_error = LED_OFF();
    1ba6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LED_OFF>
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <Toggel_LED+0x48>
        }
        else if (low_value == LED_PTR->PIN_VAL)
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	83 81       	ldd	r24, Z+3	; 0x03
    1bb4:	88 23       	and	r24, r24
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <Toggel_LED+0x48>
        {
            local_error = LED_ON();
    1bb8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LED_ON>
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
        }
        
    }
    

    return local_error;
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <init_lcd>:
 */

#include "LCD.h"
lcd_t *Glopal_ptr;
void init_lcd(void)
{
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	ce 55       	subi	r28, 0x5E	; 94
    1bda:	d0 40       	sbci	r29, 0x00	; 0
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    Glopal_ptr = &lcd_1;
    1be6:	84 e8       	ldi	r24, 0x84	; 132
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	90 93 d9 00 	sts	0x00D9, r25
    1bee:	80 93 d8 00 	sts	0x00D8, r24
    GPIO_setPortDirection(Glopal_ptr->lcd_data_port, Out_Port_direction);
    1bf2:	e0 91 d8 00 	lds	r30, 0x00D8
    1bf6:	f0 91 d9 00 	lds	r31, 0x00D9
    1bfa:	80 81       	ld	r24, Z
    1bfc:	6f ef       	ldi	r22, 0xFF	; 255
    1bfe:	0e 94 19 08 	call	0x1032	; 0x1032 <GPIO_setPortDirection>
    GPIO_setPindDirection(Glopal_ptr->lcd_control_port, Glopal_ptr->lcd_E_pin, Output_direction);
    1c02:	e0 91 d8 00 	lds	r30, 0x00D8
    1c06:	f0 91 d9 00 	lds	r31, 0x00D9
    1c0a:	81 81       	ldd	r24, Z+1	; 0x01
    1c0c:	e0 91 d8 00 	lds	r30, 0x00D8
    1c10:	f0 91 d9 00 	lds	r31, 0x00D9
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	69 2f       	mov	r22, r25
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
    GPIO_setPindDirection(Glopal_ptr->lcd_control_port, Glopal_ptr->lcd_rw_pin, Output_direction);
    1c1e:	e0 91 d8 00 	lds	r30, 0x00D8
    1c22:	f0 91 d9 00 	lds	r31, 0x00D9
    1c26:	81 81       	ldd	r24, Z+1	; 0x01
    1c28:	e0 91 d8 00 	lds	r30, 0x00D8
    1c2c:	f0 91 d9 00 	lds	r31, 0x00D9
    1c30:	94 81       	ldd	r25, Z+4	; 0x04
    1c32:	69 2f       	mov	r22, r25
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
    GPIO_setPindDirection(Glopal_ptr->lcd_control_port, Glopal_ptr->lcd_rs_pin, Output_direction);
    1c3a:	e0 91 d8 00 	lds	r30, 0x00D8
    1c3e:	f0 91 d9 00 	lds	r31, 0x00D9
    1c42:	81 81       	ldd	r24, Z+1	; 0x01
    1c44:	e0 91 d8 00 	lds	r30, 0x00D8
    1c48:	f0 91 d9 00 	lds	r31, 0x00D9
    1c4c:	92 81       	ldd	r25, Z+2	; 0x02
    1c4e:	69 2f       	mov	r22, r25
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 88 08 	call	0x1110	; 0x1110 <GPIO_setPindDirection>
    1c56:	fe 01       	movw	r30, r28
    1c58:	e5 5a       	subi	r30, 0xA5	; 165
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 ef       	ldi	r26, 0xF0	; 240
    1c62:	b1 e4       	ldi	r27, 0x41	; 65
    1c64:	80 83       	st	Z, r24
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	a2 83       	std	Z+2, r26	; 0x02
    1c6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	09 5a       	subi	r16, 0xA9	; 169
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	fe 01       	movw	r30, r28
    1c74:	e5 5a       	subi	r30, 0xA5	; 165
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a ef       	ldi	r20, 0xFA	; 250
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	f8 01       	movw	r30, r16
    1c92:	80 83       	st	Z, r24
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	a2 83       	std	Z+2, r26	; 0x02
    1c98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e9 5a       	subi	r30, 0xA9	; 169
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	44 f4       	brge	.+16     	; 0x1cc8 <init_lcd+0xfc>
		__ticks = 1;
    1cb8:	fe 01       	movw	r30, r28
    1cba:	eb 5a       	subi	r30, 0xAB	; 171
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	64 c0       	rjmp	.+200    	; 0x1d90 <init_lcd+0x1c4>
	else if (__tmp > 65535)
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e9 5a       	subi	r30, 0xA9	; 169
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	0c f0       	brlt	.+2      	; 0x1ce8 <init_lcd+0x11c>
    1ce6:	43 c0       	rjmp	.+134    	; 0x1d6e <init_lcd+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e5 5a       	subi	r30, 0xA5	; 165
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8e 01       	movw	r16, r28
    1d08:	0b 5a       	subi	r16, 0xAB	; 171
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	f8 01       	movw	r30, r16
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
    1d1e:	1f c0       	rjmp	.+62     	; 0x1d5e <init_lcd+0x192>
    1d20:	fe 01       	movw	r30, r28
    1d22:	ed 5a       	subi	r30, 0xAD	; 173
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ed 5a       	subi	r30, 0xAD	; 173
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <init_lcd+0x16c>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ed 5a       	subi	r30, 0xAD	; 173
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	de 01       	movw	r26, r28
    1d48:	ab 5a       	subi	r26, 0xAB	; 171
    1d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	eb 5a       	subi	r30, 0xAB	; 171
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	11 96       	adiw	r26, 0x01	; 1
    1d5a:	9c 93       	st	X, r25
    1d5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	fe 01       	movw	r30, r28
    1d60:	eb 5a       	subi	r30, 0xAB	; 171
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	d1 f6       	brne	.-76     	; 0x1d20 <init_lcd+0x154>
    1d6c:	27 c0       	rjmp	.+78     	; 0x1dbc <init_lcd+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	8e 01       	movw	r16, r28
    1d70:	0b 5a       	subi	r16, 0xAB	; 171
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	e9 5a       	subi	r30, 0xA9	; 169
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	de 01       	movw	r26, r28
    1d92:	af 5a       	subi	r26, 0xAF	; 175
    1d94:	bf 4f       	sbci	r27, 0xFF	; 255
    1d96:	fe 01       	movw	r30, r28
    1d98:	eb 5a       	subi	r30, 0xAB	; 171
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	8d 93       	st	X+, r24
    1da2:	9c 93       	st	X, r25
    1da4:	fe 01       	movw	r30, r28
    1da6:	ef 5a       	subi	r30, 0xAF	; 175
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <init_lcd+0x1e2>
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 5a       	subi	r30, 0xAF	; 175
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
    _delay_ms(30);
    send_commund(lcd_Home);
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	0e 94 b5 11 	call	0x236a	; 0x236a <send_commund>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 5b       	subi	r30, 0xB3	; 179
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e7       	ldi	r26, 0x70	; 112
    1dce:	b1 e4       	ldi	r27, 0x41	; 65
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	07 5b       	subi	r16, 0xB7	; 183
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e3 5b       	subi	r30, 0xB3	; 179
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	2b ea       	ldi	r18, 0xAB	; 171
    1dee:	3a ea       	ldi	r19, 0xAA	; 170
    1df0:	4a e2       	ldi	r20, 0x2A	; 42
    1df2:	50 e4       	ldi	r21, 0x40	; 64
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 83       	st	Z, r24
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	a2 83       	std	Z+2, r26	; 0x02
    1e04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5b       	subi	r30, 0xB7	; 183
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e8       	ldi	r20, 0x80	; 128
    1e1a:	5f e3       	ldi	r21, 0x3F	; 63
    1e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	34 f4       	brge	.+12     	; 0x1e30 <init_lcd+0x264>
		__ticks = 1;
    1e24:	fe 01       	movw	r30, r28
    1e26:	e8 5b       	subi	r30, 0xB8	; 184
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 83       	st	Z, r24
    1e2e:	b4 c0       	rjmp	.+360    	; 0x1f98 <init_lcd+0x3cc>
	else if (__tmp > 255)
    1e30:	fe 01       	movw	r30, r28
    1e32:	e7 5b       	subi	r30, 0xB7	; 183
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	0c f0       	brlt	.+2      	; 0x1e50 <init_lcd+0x284>
    1e4e:	94 c0       	rjmp	.+296    	; 0x1f78 <init_lcd+0x3ac>
	{
		_delay_ms(__us / 1000.0);
    1e50:	fe 01       	movw	r30, r28
    1e52:	e3 5b       	subi	r30, 0xB3	; 179
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	54 e4       	ldi	r21, 0x44	; 68
    1e66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ec 5b       	subi	r30, 0xBC	; 188
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 83       	st	Z, r24
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	a2 83       	std	Z+2, r26	; 0x02
    1e7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	00 5c       	subi	r16, 0xC0	; 192
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	fe 01       	movw	r30, r28
    1e84:	ec 5b       	subi	r30, 0xBC	; 188
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	80 83       	st	Z, r24
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	a2 83       	std	Z+2, r26	; 0x02
    1ea8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e0 5c       	subi	r30, 0xC0	; 192
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <init_lcd+0x306>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9f af       	std	Y+63, r25	; 0x3f
    1ece:	8e af       	std	Y+62, r24	; 0x3e
    1ed0:	48 c0       	rjmp	.+144    	; 0x1f62 <init_lcd+0x396>
	else if (__tmp > 65535)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e0 5c       	subi	r30, 0xC0	; 192
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	64 f5       	brge	.+88     	; 0x1f48 <init_lcd+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	ec 5b       	subi	r30, 0xBC	; 188
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9f af       	std	Y+63, r25	; 0x3f
    1f1c:	8e af       	std	Y+62, r24	; 0x3e
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <init_lcd+0x372>
    1f20:	88 ec       	ldi	r24, 0xC8	; 200
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9d af       	std	Y+61, r25	; 0x3d
    1f26:	8c af       	std	Y+60, r24	; 0x3c
    1f28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <init_lcd+0x360>
    1f30:	9d af       	std	Y+61, r25	; 0x3d
    1f32:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f36:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9f af       	std	Y+63, r25	; 0x3f
    1f3c:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f40:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <init_lcd+0x354>
    1f46:	31 c0       	rjmp	.+98     	; 0x1faa <init_lcd+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e0 5c       	subi	r30, 0xC0	; 192
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9f af       	std	Y+63, r25	; 0x3f
    1f60:	8e af       	std	Y+62, r24	; 0x3e
    1f62:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f66:	9b af       	std	Y+59, r25	; 0x3b
    1f68:	8a af       	std	Y+58, r24	; 0x3a
    1f6a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f6c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <init_lcd+0x3a2>
    1f72:	9b af       	std	Y+59, r25	; 0x3b
    1f74:	8a af       	std	Y+58, r24	; 0x3a
    1f76:	19 c0       	rjmp	.+50     	; 0x1faa <init_lcd+0x3de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f78:	8e 01       	movw	r16, r28
    1f7a:	08 5b       	subi	r16, 0xB8	; 184
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e7 5b       	subi	r30, 0xB7	; 183
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	f8 01       	movw	r30, r16
    1f96:	80 83       	st	Z, r24
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e8 5b       	subi	r30, 0xB8	; 184
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	89 af       	std	Y+57, r24	; 0x39
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa4:	8a 95       	dec	r24
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <init_lcd+0x3d8>
    1fa8:	89 af       	std	Y+57, r24	; 0x39
    _delay_us(15);
    send_commund(lcd_FunctionSet8bit);
    1faa:	88 e3       	ldi	r24, 0x38	; 56
    1fac:	0e 94 b5 11 	call	0x236a	; 0x236a <send_commund>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e8       	ldi	r26, 0x80	; 128
    1fb6:	bf e3       	ldi	r27, 0x3F	; 63
    1fb8:	8d ab       	std	Y+53, r24	; 0x35
    1fba:	9e ab       	std	Y+54, r25	; 0x36
    1fbc:	af ab       	std	Y+55, r26	; 0x37
    1fbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	89 ab       	std	Y+49, r24	; 0x31
    1fda:	9a ab       	std	Y+50, r25	; 0x32
    1fdc:	ab ab       	std	Y+51, r26	; 0x33
    1fde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <init_lcd+0x436>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	98 ab       	std	Y+48, r25	; 0x30
    1ffe:	8f a7       	std	Y+47, r24	; 0x2f
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <init_lcd+0x4b4>
	else if (__tmp > 65535)
    2002:	69 a9       	ldd	r22, Y+49	; 0x31
    2004:	7a a9       	ldd	r23, Y+50	; 0x32
    2006:	8b a9       	ldd	r24, Y+51	; 0x33
    2008:	9c a9       	ldd	r25, Y+52	; 0x34
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <init_lcd+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	6d a9       	ldd	r22, Y+53	; 0x35
    201c:	7e a9       	ldd	r23, Y+54	; 0x36
    201e:	8f a9       	ldd	r24, Y+55	; 0x37
    2020:	98 ad       	ldd	r25, Y+56	; 0x38
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	98 ab       	std	Y+48, r25	; 0x30
    2040:	8f a7       	std	Y+47, r24	; 0x2f
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <init_lcd+0x496>
    2044:	88 ec       	ldi	r24, 0xC8	; 200
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e a7       	std	Y+46, r25	; 0x2e
    204a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    204c:	8d a5       	ldd	r24, Y+45	; 0x2d
    204e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <init_lcd+0x484>
    2054:	9e a7       	std	Y+46, r25	; 0x2e
    2056:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8f a5       	ldd	r24, Y+47	; 0x2f
    205a:	98 a9       	ldd	r25, Y+48	; 0x30
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	98 ab       	std	Y+48, r25	; 0x30
    2060:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8f a5       	ldd	r24, Y+47	; 0x2f
    2064:	98 a9       	ldd	r25, Y+48	; 0x30
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <init_lcd+0x478>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <init_lcd+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	69 a9       	ldd	r22, Y+49	; 0x31
    206e:	7a a9       	ldd	r23, Y+50	; 0x32
    2070:	8b a9       	ldd	r24, Y+51	; 0x33
    2072:	9c a9       	ldd	r25, Y+52	; 0x34
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
    2080:	8f a5       	ldd	r24, Y+47	; 0x2f
    2082:	98 a9       	ldd	r25, Y+48	; 0x30
    2084:	9c a7       	std	Y+44, r25	; 0x2c
    2086:	8b a7       	std	Y+43, r24	; 0x2b
    2088:	8b a5       	ldd	r24, Y+43	; 0x2b
    208a:	9c a5       	ldd	r25, Y+44	; 0x2c
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <init_lcd+0x4c0>
    2090:	9c a7       	std	Y+44, r25	; 0x2c
    2092:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    send_commund(lcd_DisplayOn);
    2094:	8c e0       	ldi	r24, 0x0C	; 12
    2096:	0e 94 b5 11 	call	0x236a	; 0x236a <send_commund>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e8       	ldi	r26, 0x80	; 128
    20a0:	bf e3       	ldi	r27, 0x3F	; 63
    20a2:	8f a3       	std	Y+39, r24	; 0x27
    20a4:	98 a7       	std	Y+40, r25	; 0x28
    20a6:	a9 a7       	std	Y+41, r26	; 0x29
    20a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6f a1       	ldd	r22, Y+39	; 0x27
    20ac:	78 a5       	ldd	r23, Y+40	; 0x28
    20ae:	89 a5       	ldd	r24, Y+41	; 0x29
    20b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8b a3       	std	Y+35, r24	; 0x23
    20c4:	9c a3       	std	Y+36, r25	; 0x24
    20c6:	ad a3       	std	Y+37, r26	; 0x25
    20c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <init_lcd+0x520>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9a a3       	std	Y+34, r25	; 0x22
    20e8:	89 a3       	std	Y+33, r24	; 0x21
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <init_lcd+0x59e>
	else if (__tmp > 65535)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <init_lcd+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6f a1       	ldd	r22, Y+39	; 0x27
    2106:	78 a5       	ldd	r23, Y+40	; 0x28
    2108:	89 a5       	ldd	r24, Y+41	; 0x29
    210a:	9a a5       	ldd	r25, Y+42	; 0x2a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9a a3       	std	Y+34, r25	; 0x22
    212a:	89 a3       	std	Y+33, r24	; 0x21
    212c:	0f c0       	rjmp	.+30     	; 0x214c <init_lcd+0x580>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	98 a3       	std	Y+32, r25	; 0x20
    2134:	8f 8f       	std	Y+31, r24	; 0x1f
    2136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2138:	98 a1       	ldd	r25, Y+32	; 0x20
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <init_lcd+0x56e>
    213e:	98 a3       	std	Y+32, r25	; 0x20
    2140:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	89 a1       	ldd	r24, Y+33	; 0x21
    2144:	9a a1       	ldd	r25, Y+34	; 0x22
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <init_lcd+0x562>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <init_lcd+0x5b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6b a1       	ldd	r22, Y+35	; 0x23
    2158:	7c a1       	ldd	r23, Y+36	; 0x24
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	9e a1       	ldd	r25, Y+38	; 0x26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	9e 8f       	std	Y+30, r25	; 0x1e
    2170:	8d 8f       	std	Y+29, r24	; 0x1d
    2172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2174:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <init_lcd+0x5aa>
    217a:	9e 8f       	std	Y+30, r25	; 0x1e
    217c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    send_commund(lcd_Clear);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	0e 94 b5 11 	call	0x236a	; 0x236a <send_commund>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e7       	ldi	r26, 0x70	; 112
    218a:	b1 e4       	ldi	r27, 0x41	; 65
    218c:	89 8f       	std	Y+25, r24	; 0x19
    218e:	9a 8f       	std	Y+26, r25	; 0x1a
    2190:	ab 8f       	std	Y+27, r26	; 0x1b
    2192:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	69 8d       	ldd	r22, Y+25	; 0x19
    2196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8d 8b       	std	Y+21, r24	; 0x15
    21ae:	9e 8b       	std	Y+22, r25	; 0x16
    21b0:	af 8b       	std	Y+23, r26	; 0x17
    21b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <init_lcd+0x60a>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 8b       	std	Y+20, r25	; 0x14
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <init_lcd+0x688>
	else if (__tmp > 65535)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <init_lcd+0x674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	69 8d       	ldd	r22, Y+25	; 0x19
    21f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <init_lcd+0x66a>
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a 8b       	std	Y+18, r25	; 0x12
    221e:	89 8b       	std	Y+17, r24	; 0x11
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <init_lcd+0x658>
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8b 89       	ldd	r24, Y+19	; 0x13
    2238:	9c 89       	ldd	r25, Y+20	; 0x14
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <init_lcd+0x64c>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <init_lcd+0x69c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	98 8b       	std	Y+16, r25	; 0x10
    225a:	8f 87       	std	Y+15, r24	; 0x0f
    225c:	8f 85       	ldd	r24, Y+15	; 0x0f
    225e:	98 89       	ldd	r25, Y+16	; 0x10
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <init_lcd+0x694>
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(15);
    send_commund(lcd_EntryMode);
    2268:	86 e0       	ldi	r24, 0x06	; 6
    226a:	0e 94 b5 11 	call	0x236a	; 0x236a <send_commund>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e4       	ldi	r27, 0x40	; 64
    2276:	8b 87       	std	Y+11, r24	; 0x0b
    2278:	9c 87       	std	Y+12, r25	; 0x0c
    227a:	ad 87       	std	Y+13, r26	; 0x0d
    227c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8f 83       	std	Y+7, r24	; 0x07
    2298:	98 87       	std	Y+8, r25	; 0x08
    229a:	a9 87       	std	Y+9, r26	; 0x09
    229c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <init_lcd+0x6f4>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	3f c0       	rjmp	.+126    	; 0x233e <init_lcd+0x772>
	else if (__tmp > 65535)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	4c f5       	brge	.+82     	; 0x232a <init_lcd+0x75e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e2       	ldi	r20, 0x20	; 32
    22e6:	51 e4       	ldi	r21, 0x41	; 65
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <init_lcd+0x754>
    2302:	88 ec       	ldi	r24, 0xC8	; 200
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <init_lcd+0x742>
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	69 f7       	brne	.-38     	; 0x2302 <init_lcd+0x736>
    2328:	14 c0       	rjmp	.+40     	; 0x2352 <init_lcd+0x786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <init_lcd+0x77e>
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2352:	c2 5a       	subi	r28, 0xA2	; 162
    2354:	df 4f       	sbci	r29, 0xFF	; 255
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	08 95       	ret

0000236a <send_commund>:

void send_commund(u8 command)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	6d 97       	sbiw	r28, 0x1d	; 29
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
    Glopal_ptr = &lcd_1;
    2380:	84 e8       	ldi	r24, 0x84	; 132
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	90 93 d9 00 	sts	0x00D9, r25
    2388:	80 93 d8 00 	sts	0x00D8, r24
    /* Set RS to LOW */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_rs_pin), low_value);
    238c:	e0 91 d8 00 	lds	r30, 0x00D8
    2390:	f0 91 d9 00 	lds	r31, 0x00D9
    2394:	81 81       	ldd	r24, Z+1	; 0x01
    2396:	e0 91 d8 00 	lds	r30, 0x00D8
    239a:	f0 91 d9 00 	lds	r31, 0x00D9
    239e:	92 81       	ldd	r25, Z+2	; 0x02
    23a0:	69 2f       	mov	r22, r25
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    /* Set R/W to LOW */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_rw_pin), low_value);
    23a8:	e0 91 d8 00 	lds	r30, 0x00D8
    23ac:	f0 91 d9 00 	lds	r31, 0x00D9
    23b0:	81 81       	ldd	r24, Z+1	; 0x01
    23b2:	e0 91 d8 00 	lds	r30, 0x00D8
    23b6:	f0 91 d9 00 	lds	r31, 0x00D9
    23ba:	94 81       	ldd	r25, Z+4	; 0x04
    23bc:	69 2f       	mov	r22, r25
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    /* Set E to HIGH  */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_E_pin), high_value);
    23c4:	e0 91 d8 00 	lds	r30, 0x00D8
    23c8:	f0 91 d9 00 	lds	r31, 0x00D9
    23cc:	81 81       	ldd	r24, Z+1	; 0x01
    23ce:	e0 91 d8 00 	lds	r30, 0x00D8
    23d2:	f0 91 d9 00 	lds	r31, 0x00D9
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	69 2f       	mov	r22, r25
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    /* Load Command on Data bus */
    GPIO_setPortValue((Glopal_ptr->lcd_data_port), command);
    23e0:	e0 91 d8 00 	lds	r30, 0x00D8
    23e4:	f0 91 d9 00 	lds	r31, 0x00D9
    23e8:	80 81       	ld	r24, Z
    23ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    23ec:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setPortValue>
    /* Set E to LOW */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_E_pin), low_value);
    23f0:	e0 91 d8 00 	lds	r30, 0x00D8
    23f4:	f0 91 d9 00 	lds	r31, 0x00D9
    23f8:	81 81       	ldd	r24, Z+1	; 0x01
    23fa:	e0 91 d8 00 	lds	r30, 0x00D8
    23fe:	f0 91 d9 00 	lds	r31, 0x00D9
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	69 2f       	mov	r22, r25
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e8       	ldi	r26, 0x80	; 128
    2412:	bf e3       	ldi	r27, 0x3F	; 63
    2414:	89 8f       	std	Y+25, r24	; 0x19
    2416:	9a 8f       	std	Y+26, r25	; 0x1a
    2418:	ab 8f       	std	Y+27, r26	; 0x1b
    241a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241c:	69 8d       	ldd	r22, Y+25	; 0x19
    241e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2420:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2422:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4a ef       	ldi	r20, 0xFA	; 250
    242a:	54 e4       	ldi	r21, 0x44	; 68
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8d 8b       	std	Y+21, r24	; 0x15
    2436:	9e 8b       	std	Y+22, r25	; 0x16
    2438:	af 8b       	std	Y+23, r26	; 0x17
    243a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    243c:	6d 89       	ldd	r22, Y+21	; 0x15
    243e:	7e 89       	ldd	r23, Y+22	; 0x16
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2450:	88 23       	and	r24, r24
    2452:	2c f4       	brge	.+10     	; 0x245e <send_commund+0xf4>
		__ticks = 1;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	3f c0       	rjmp	.+126    	; 0x24dc <send_commund+0x172>
	else if (__tmp > 65535)
    245e:	6d 89       	ldd	r22, Y+21	; 0x15
    2460:	7e 89       	ldd	r23, Y+22	; 0x16
    2462:	8f 89       	ldd	r24, Y+23	; 0x17
    2464:	98 8d       	ldd	r25, Y+24	; 0x18
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	3f ef       	ldi	r19, 0xFF	; 255
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	57 e4       	ldi	r21, 0x47	; 71
    246e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	4c f5       	brge	.+82     	; 0x24c8 <send_commund+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	69 8d       	ldd	r22, Y+25	; 0x19
    2478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e2       	ldi	r20, 0x20	; 32
    2484:	51 e4       	ldi	r21, 0x41	; 65
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9c 8b       	std	Y+20, r25	; 0x14
    249c:	8b 8b       	std	Y+19, r24	; 0x13
    249e:	0f c0       	rjmp	.+30     	; 0x24be <send_commund+0x154>
    24a0:	88 ec       	ldi	r24, 0xC8	; 200
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9a 8b       	std	Y+18, r25	; 0x12
    24a6:	89 8b       	std	Y+17, r24	; 0x11
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	9a 89       	ldd	r25, Y+18	; 0x12
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <send_commund+0x142>
    24b0:	9a 8b       	std	Y+18, r25	; 0x12
    24b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b4:	8b 89       	ldd	r24, Y+19	; 0x13
    24b6:	9c 89       	ldd	r25, Y+20	; 0x14
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	69 f7       	brne	.-38     	; 0x24a0 <send_commund+0x136>
    24c6:	14 c0       	rjmp	.+40     	; 0x24f0 <send_commund+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ca:	7e 89       	ldd	r23, Y+22	; 0x16
    24cc:	8f 89       	ldd	r24, Y+23	; 0x17
    24ce:	98 8d       	ldd	r25, Y+24	; 0x18
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9c 8b       	std	Y+20, r25	; 0x14
    24da:	8b 8b       	std	Y+19, r24	; 0x13
    24dc:	8b 89       	ldd	r24, Y+19	; 0x13
    24de:	9c 89       	ldd	r25, Y+20	; 0x14
    24e0:	98 8b       	std	Y+16, r25	; 0x10
    24e2:	8f 87       	std	Y+15, r24	; 0x0f
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	98 89       	ldd	r25, Y+16	; 0x10
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <send_commund+0x17e>
    24ec:	98 8b       	std	Y+16, r25	; 0x10
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
    /* Wait for E to settle */
    _delay_ms(1);
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_E_pin), high_value);
    24f0:	e0 91 d8 00 	lds	r30, 0x00D8
    24f4:	f0 91 d9 00 	lds	r31, 0x00D9
    24f8:	81 81       	ldd	r24, Z+1	; 0x01
    24fa:	e0 91 d8 00 	lds	r30, 0x00D8
    24fe:	f0 91 d9 00 	lds	r31, 0x00D9
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	69 2f       	mov	r22, r25
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e8       	ldi	r26, 0x80	; 128
    2512:	bf e3       	ldi	r27, 0x3F	; 63
    2514:	8b 87       	std	Y+11, r24	; 0x0b
    2516:	9c 87       	std	Y+12, r25	; 0x0c
    2518:	ad 87       	std	Y+13, r26	; 0x0d
    251a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8f 83       	std	Y+7, r24	; 0x07
    2536:	98 87       	std	Y+8, r25	; 0x08
    2538:	a9 87       	std	Y+9, r26	; 0x09
    253a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <send_commund+0x1f4>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <send_commund+0x272>
	else if (__tmp > 65535)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <send_commund+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	0f c0       	rjmp	.+30     	; 0x25be <send_commund+0x254>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 83       	std	Y+4, r25	; 0x04
    25a6:	8b 83       	std	Y+3, r24	; 0x03
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <send_commund+0x242>
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <send_commund+0x236>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <send_commund+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <send_commund+0x27e>
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    /* Delay for 1ms to let the LCD execute command */
    _delay_ms(1);
}
    25f0:	6d 96       	adiw	r28, 0x1d	; 29
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <LCD_vidWriteCharctr>:

void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	6d 97       	sbiw	r28, 0x1d	; 29
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	8d 8f       	std	Y+29, r24	; 0x1d
    Glopal_ptr = &lcd_1;
    2618:	84 e8       	ldi	r24, 0x84	; 132
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	90 93 d9 00 	sts	0x00D9, r25
    2620:	80 93 d8 00 	sts	0x00D8, r24
    /* Set RS to LOW */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_rs_pin), high_value);
    2624:	e0 91 d8 00 	lds	r30, 0x00D8
    2628:	f0 91 d9 00 	lds	r31, 0x00D9
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	e0 91 d8 00 	lds	r30, 0x00D8
    2632:	f0 91 d9 00 	lds	r31, 0x00D9
    2636:	92 81       	ldd	r25, Z+2	; 0x02
    2638:	69 2f       	mov	r22, r25
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>

    /* Set R/W to LOW */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_rw_pin), low_value);
    2640:	e0 91 d8 00 	lds	r30, 0x00D8
    2644:	f0 91 d9 00 	lds	r31, 0x00D9
    2648:	81 81       	ldd	r24, Z+1	; 0x01
    264a:	e0 91 d8 00 	lds	r30, 0x00D8
    264e:	f0 91 d9 00 	lds	r31, 0x00D9
    2652:	94 81       	ldd	r25, Z+4	; 0x04
    2654:	69 2f       	mov	r22, r25
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>

    /* Set E to HIGH  */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_E_pin), high_value);
    265c:	e0 91 d8 00 	lds	r30, 0x00D8
    2660:	f0 91 d9 00 	lds	r31, 0x00D9
    2664:	81 81       	ldd	r24, Z+1	; 0x01
    2666:	e0 91 d8 00 	lds	r30, 0x00D8
    266a:	f0 91 d9 00 	lds	r31, 0x00D9
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	69 2f       	mov	r22, r25
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>

    /* Load Command on Data bus */
    GPIO_setPortValue((Glopal_ptr->lcd_data_port), u8DataCpy);
    2678:	e0 91 d8 00 	lds	r30, 0x00D8
    267c:	f0 91 d9 00 	lds	r31, 0x00D9
    2680:	80 81       	ld	r24, Z
    2682:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2684:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setPortValue>

    /* Set E to LOW */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_E_pin), low_value);
    2688:	e0 91 d8 00 	lds	r30, 0x00D8
    268c:	f0 91 d9 00 	lds	r31, 0x00D9
    2690:	81 81       	ldd	r24, Z+1	; 0x01
    2692:	e0 91 d8 00 	lds	r30, 0x00D8
    2696:	f0 91 d9 00 	lds	r31, 0x00D9
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	69 2f       	mov	r22, r25
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a0 e8       	ldi	r26, 0x80	; 128
    26aa:	bf e3       	ldi	r27, 0x3F	; 63
    26ac:	89 8f       	std	Y+25, r24	; 0x19
    26ae:	9a 8f       	std	Y+26, r25	; 0x1a
    26b0:	ab 8f       	std	Y+27, r26	; 0x1b
    26b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b4:	69 8d       	ldd	r22, Y+25	; 0x19
    26b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a ef       	ldi	r20, 0xFA	; 250
    26c2:	54 e4       	ldi	r21, 0x44	; 68
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8d 8b       	std	Y+21, r24	; 0x15
    26ce:	9e 8b       	std	Y+22, r25	; 0x16
    26d0:	af 8b       	std	Y+23, r26	; 0x17
    26d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e8       	ldi	r20, 0x80	; 128
    26e2:	5f e3       	ldi	r21, 0x3F	; 63
    26e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e8:	88 23       	and	r24, r24
    26ea:	2c f4       	brge	.+10     	; 0x26f6 <LCD_vidWriteCharctr+0xf4>
		__ticks = 1;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	3f c0       	rjmp	.+126    	; 0x2774 <LCD_vidWriteCharctr+0x172>
	else if (__tmp > 65535)
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	3f ef       	ldi	r19, 0xFF	; 255
    2702:	4f e7       	ldi	r20, 0x7F	; 127
    2704:	57 e4       	ldi	r21, 0x47	; 71
    2706:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270a:	18 16       	cp	r1, r24
    270c:	4c f5       	brge	.+82     	; 0x2760 <LCD_vidWriteCharctr+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e2       	ldi	r20, 0x20	; 32
    271c:	51 e4       	ldi	r21, 0x41	; 65
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <LCD_vidWriteCharctr+0x154>
    2738:	88 ec       	ldi	r24, 0xC8	; 200
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9a 8b       	std	Y+18, r25	; 0x12
    273e:	89 8b       	std	Y+17, r24	; 0x11
    2740:	89 89       	ldd	r24, Y+17	; 0x11
    2742:	9a 89       	ldd	r25, Y+18	; 0x12
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_vidWriteCharctr+0x142>
    2748:	9a 8b       	std	Y+18, r25	; 0x12
    274a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	9c 89       	ldd	r25, Y+20	; 0x14
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	69 f7       	brne	.-38     	; 0x2738 <LCD_vidWriteCharctr+0x136>
    275e:	14 c0       	rjmp	.+40     	; 0x2788 <LCD_vidWriteCharctr+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	98 8b       	std	Y+16, r25	; 0x10
    277a:	8f 87       	std	Y+15, r24	; 0x0f
    277c:	8f 85       	ldd	r24, Y+15	; 0x0f
    277e:	98 89       	ldd	r25, Y+16	; 0x10
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <LCD_vidWriteCharctr+0x17e>
    2784:	98 8b       	std	Y+16, r25	; 0x10
    2786:	8f 87       	std	Y+15, r24	; 0x0f

    /* Wait for E to settle */
    _delay_ms(1);

    /* Set E to HIGH */
    GPIO_setPinValue((Glopal_ptr->lcd_control_port), (Glopal_ptr->lcd_E_pin), high_value);
    2788:	e0 91 d8 00 	lds	r30, 0x00D8
    278c:	f0 91 d9 00 	lds	r31, 0x00D9
    2790:	81 81       	ldd	r24, Z+1	; 0x01
    2792:	e0 91 d8 00 	lds	r30, 0x00D8
    2796:	f0 91 d9 00 	lds	r31, 0x00D9
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	69 2f       	mov	r22, r25
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e8       	ldi	r26, 0x80	; 128
    27aa:	bf e3       	ldi	r27, 0x3F	; 63
    27ac:	8b 87       	std	Y+11, r24	; 0x0b
    27ae:	9c 87       	std	Y+12, r25	; 0x0c
    27b0:	ad 87       	std	Y+13, r26	; 0x0d
    27b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a ef       	ldi	r20, 0xFA	; 250
    27c2:	54 e4       	ldi	r21, 0x44	; 68
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	8f 83       	std	Y+7, r24	; 0x07
    27ce:	98 87       	std	Y+8, r25	; 0x08
    27d0:	a9 87       	std	Y+9, r26	; 0x09
    27d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d4:	6f 81       	ldd	r22, Y+7	; 0x07
    27d6:	78 85       	ldd	r23, Y+8	; 0x08
    27d8:	89 85       	ldd	r24, Y+9	; 0x09
    27da:	9a 85       	ldd	r25, Y+10	; 0x0a
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	5f e3       	ldi	r21, 0x3F	; 63
    27e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <LCD_vidWriteCharctr+0x1f4>
		__ticks = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <LCD_vidWriteCharctr+0x272>
	else if (__tmp > 65535)
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	3f ef       	ldi	r19, 0xFF	; 255
    2802:	4f e7       	ldi	r20, 0x7F	; 127
    2804:	57 e4       	ldi	r21, 0x47	; 71
    2806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280a:	18 16       	cp	r1, r24
    280c:	4c f5       	brge	.+82     	; 0x2860 <LCD_vidWriteCharctr+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2810:	7c 85       	ldd	r23, Y+12	; 0x0c
    2812:	8d 85       	ldd	r24, Y+13	; 0x0d
    2814:	9e 85       	ldd	r25, Y+14	; 0x0e
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <LCD_vidWriteCharctr+0x254>
    2838:	88 ec       	ldi	r24, 0xC8	; 200
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9c 83       	std	Y+4, r25	; 0x04
    283e:	8b 83       	std	Y+3, r24	; 0x03
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_vidWriteCharctr+0x242>
    2848:	9c 83       	std	Y+4, r25	; 0x04
    284a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	69 f7       	brne	.-38     	; 0x2838 <LCD_vidWriteCharctr+0x236>
    285e:	14 c0       	rjmp	.+40     	; 0x2888 <LCD_vidWriteCharctr+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	9a 83       	std	Y+2, r25	; 0x02
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_vidWriteCharctr+0x27e>
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	89 83       	std	Y+1, r24	; 0x01

    /* Delay to let the LCD Display the character */
    _delay_ms(1);
}
    2888:	6d 96       	adiw	r28, 0x1d	; 29
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <LCD_clear>:

void LCD_clear(void)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    send_commund(lcd_Clear);
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	0e 94 b5 11 	call	0x236a	; 0x236a <send_commund>
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <LCD_vidWriteString>:

void LCD_vidWriteString(u8 *arr)
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	61 97       	sbiw	r28, 0x11	; 17
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	99 8b       	std	Y+17, r25	; 0x11
    28c4:	88 8b       	std	Y+16, r24	; 0x10
    u8 index = 0;
    28c6:	1f 86       	std	Y+15, r1	; 0x0f
    28c8:	7c c0       	rjmp	.+248    	; 0x29c2 <LCD_vidWriteString+0x114>
    while (*arr != '\0')
    {
        LCD_vidWriteCharctr(*arr);
    28ca:	e8 89       	ldd	r30, Y+16	; 0x10
    28cc:	f9 89       	ldd	r31, Y+17	; 0x11
    28ce:	80 81       	ld	r24, Z
    28d0:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_vidWriteCharctr>
        arr++;
    28d4:	88 89       	ldd	r24, Y+16	; 0x10
    28d6:	99 89       	ldd	r25, Y+17	; 0x11
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	99 8b       	std	Y+17, r25	; 0x11
    28dc:	88 8b       	std	Y+16, r24	; 0x10
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a0 e8       	ldi	r26, 0x80	; 128
    28e4:	bf e3       	ldi	r27, 0x3F	; 63
    28e6:	8b 87       	std	Y+11, r24	; 0x0b
    28e8:	9c 87       	std	Y+12, r25	; 0x0c
    28ea:	ad 87       	std	Y+13, r26	; 0x0d
    28ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4a ef       	ldi	r20, 0xFA	; 250
    28fc:	54 e4       	ldi	r21, 0x44	; 68
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	8f 83       	std	Y+7, r24	; 0x07
    2908:	98 87       	std	Y+8, r25	; 0x08
    290a:	a9 87       	std	Y+9, r26	; 0x09
    290c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2922:	88 23       	and	r24, r24
    2924:	2c f4       	brge	.+10     	; 0x2930 <LCD_vidWriteString+0x82>
		__ticks = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	3f c0       	rjmp	.+126    	; 0x29ae <LCD_vidWriteString+0x100>
	else if (__tmp > 65535)
    2930:	6f 81       	ldd	r22, Y+7	; 0x07
    2932:	78 85       	ldd	r23, Y+8	; 0x08
    2934:	89 85       	ldd	r24, Y+9	; 0x09
    2936:	9a 85       	ldd	r25, Y+10	; 0x0a
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	4c f5       	brge	.+82     	; 0x299a <LCD_vidWriteString+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2948:	6b 85       	ldd	r22, Y+11	; 0x0b
    294a:	7c 85       	ldd	r23, Y+12	; 0x0c
    294c:	8d 85       	ldd	r24, Y+13	; 0x0d
    294e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e2       	ldi	r20, 0x20	; 32
    2956:	51 e4       	ldi	r21, 0x41	; 65
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	0f c0       	rjmp	.+30     	; 0x2990 <LCD_vidWriteString+0xe2>
    2972:	88 ec       	ldi	r24, 0xC8	; 200
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9c 83       	std	Y+4, r25	; 0x04
    2978:	8b 83       	std	Y+3, r24	; 0x03
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_vidWriteString+0xd0>
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	69 f7       	brne	.-38     	; 0x2972 <LCD_vidWriteString+0xc4>
    2998:	14 c0       	rjmp	.+40     	; 0x29c2 <LCD_vidWriteString+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299a:	6f 81       	ldd	r22, Y+7	; 0x07
    299c:	78 85       	ldd	r23, Y+8	; 0x08
    299e:	89 85       	ldd	r24, Y+9	; 0x09
    29a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_vidWriteString+0x10c>
    29be:	9a 83       	std	Y+2, r25	; 0x02
    29c0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidWriteString(u8 *arr)
{
    u8 index = 0;
    while (*arr != '\0')
    29c2:	e8 89       	ldd	r30, Y+16	; 0x10
    29c4:	f9 89       	ldd	r31, Y+17	; 0x11
    29c6:	80 81       	ld	r24, Z
    29c8:	88 23       	and	r24, r24
    29ca:	09 f0       	breq	.+2      	; 0x29ce <LCD_vidWriteString+0x120>
    29cc:	7e cf       	rjmp	.-260    	; 0x28ca <LCD_vidWriteString+0x1c>
        LCD_vidWriteCharctr(*arr);
        arr++;
        /* Delay to let the LCD Display the character */
        _delay_ms(1);
    }
}
    29ce:	61 96       	adiw	r28, 0x11	; 17
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <LCD_vidWrite>:

void LCD_vidWrite(u16 Number)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	61 97       	sbiw	r28, 0x11	; 17
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	9c 87       	std	Y+12, r25	; 0x0c
    29f6:	8b 87       	std	Y+11, r24	; 0x0b
     u8 Arr[] = {'0','1','2','3','4','5','6','7','8','9'};
    29f8:	ce 01       	movw	r24, r28
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	9e 87       	std	Y+14, r25	; 0x0e
    29fe:	8d 87       	std	Y+13, r24	; 0x0d
    2a00:	ed eb       	ldi	r30, 0xBD	; 189
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	f8 8b       	std	Y+16, r31	; 0x10
    2a06:	ef 87       	std	Y+15, r30	; 0x0f
    2a08:	fa e0       	ldi	r31, 0x0A	; 10
    2a0a:	f9 8b       	std	Y+17, r31	; 0x11
    2a0c:	ef 85       	ldd	r30, Y+15	; 0x0f
    2a0e:	f8 89       	ldd	r31, Y+16	; 0x10
    2a10:	00 80       	ld	r0, Z
    2a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a14:	98 89       	ldd	r25, Y+16	; 0x10
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	98 8b       	std	Y+16, r25	; 0x10
    2a1a:	8f 87       	std	Y+15, r24	; 0x0f
    2a1c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2a1e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2a20:	00 82       	st	Z, r0
    2a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	9e 87       	std	Y+14, r25	; 0x0e
    2a2a:	8d 87       	std	Y+13, r24	; 0x0d
    2a2c:	99 89       	ldd	r25, Y+17	; 0x11
    2a2e:	91 50       	subi	r25, 0x01	; 1
    2a30:	99 8b       	std	Y+17, r25	; 0x11
    2a32:	e9 89       	ldd	r30, Y+17	; 0x11
    2a34:	ee 23       	and	r30, r30
    2a36:	51 f7       	brne	.-44     	; 0x2a0c <LCD_vidWrite+0x2c>
    LCD_vidWriteCharctr(Arr[Number % 10]);
    2a38:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a3c:	2a e0       	ldi	r18, 0x0A	; 10
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	b9 01       	movw	r22, r18
    2a42:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__udivmodhi4>
    2a46:	9c 01       	movw	r18, r24
    2a48:	ce 01       	movw	r24, r28
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e2 0f       	add	r30, r18
    2a50:	f3 1f       	adc	r31, r19
    2a52:	80 81       	ld	r24, Z
    2a54:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_vidWriteCharctr>
    Number = Number /10;
    2a58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a5c:	2a e0       	ldi	r18, 0x0A	; 10
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	b9 01       	movw	r22, r18
    2a62:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__udivmodhi4>
    2a66:	cb 01       	movw	r24, r22
    2a68:	9c 87       	std	Y+12, r25	; 0x0c
    2a6a:	8b 87       	std	Y+11, r24	; 0x0b
    if (0 == Number)
    2a6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	21 f4       	brne	.+8      	; 0x2a7c <LCD_vidWrite+0x9c>
    {
        LCD_vidWrite(Number);
    2a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a78:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_vidWrite>
    }
}
    2a7c:	61 96       	adiw	r28, 0x11	; 17
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <keypad_init>:
    }
    return local_err;
}*/

Error_state keypad_init(KEY_PAD_t *keypad_opj)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <keypad_init+0x6>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <keypad_init+0x8>
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <keypad_init+0xa>
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
    Error_state local_err = Unvalid_Port;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	8c 83       	std	Y+4, r24	; 0x04
    u8 loop_iterator_rows = 0;    // output
    2aa4:	1b 82       	std	Y+3, r1	; 0x03
    u8 loop_iterator_columns = 0; // input
    2aa6:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_val = (keypad_opj->keypad_row_pins[loop_iterator_rows].logic);
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab2:	88 0f       	add	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	82 0f       	add	r24, r18
    2abc:	93 1f       	adc	r25, r19
    2abe:	fc 01       	movw	r30, r24
    2ac0:	33 96       	adiw	r30, 0x03	; 3
    2ac2:	80 81       	ld	r24, Z
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    if (NULL == keypad_opj)
    2ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	19 f4       	brne	.+6      	; 0x2ad4 <keypad_init+0x46>
    {
        local_err = NULL_POINTER;
    2ace:	86 e0       	ldi	r24, 0x06	; 6
    2ad0:	8c 83       	std	Y+4, r24	; 0x04
    2ad2:	60 c0       	rjmp	.+192    	; 0x2b94 <keypad_init+0x106>
    }
    else
    {
        for (loop_iterator_rows = 0; loop_iterator_rows < ROW_NUMBERS; loop_iterator_rows++)
    2ad4:	1b 82       	std	Y+3, r1	; 0x03
    2ad6:	32 c0       	rjmp	.+100    	; 0x2b3c <keypad_init+0xae>
        {
            local_err = GPIO_setPinValue((keypad_opj->keypad_row_pins[loop_iterator_rows].port), (keypad_opj->keypad_row_pins[loop_iterator_rows].pin), (keypad_opj->keypad_row_pins[loop_iterator_rows].logic));
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	f9 01       	movw	r30, r18
    2aec:	e8 0f       	add	r30, r24
    2aee:	f9 1f       	adc	r31, r25
    2af0:	50 81       	ld	r21, Z
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	2d 81       	ldd	r18, Y+5	; 0x05
    2afa:	3e 81       	ldd	r19, Y+6	; 0x06
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	82 0f       	add	r24, r18
    2b06:	93 1f       	adc	r25, r19
    2b08:	fc 01       	movw	r30, r24
    2b0a:	31 96       	adiw	r30, 0x01	; 1
    2b0c:	40 81       	ld	r20, Z
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	2d 81       	ldd	r18, Y+5	; 0x05
    2b16:	3e 81       	ldd	r19, Y+6	; 0x06
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	82 0f       	add	r24, r18
    2b22:	93 1f       	adc	r25, r19
    2b24:	fc 01       	movw	r30, r24
    2b26:	33 96       	adiw	r30, 0x03	; 3
    2b28:	90 81       	ld	r25, Z
    2b2a:	85 2f       	mov	r24, r21
    2b2c:	64 2f       	mov	r22, r20
    2b2e:	49 2f       	mov	r20, r25
    2b30:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    2b34:	8c 83       	std	Y+4, r24	; 0x04
    {
        local_err = NULL_POINTER;
    }
    else
    {
        for (loop_iterator_rows = 0; loop_iterator_rows < ROW_NUMBERS; loop_iterator_rows++)
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	8f 5f       	subi	r24, 0xFF	; 255
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	84 30       	cpi	r24, 0x04	; 4
    2b40:	58 f2       	brcs	.-106    	; 0x2ad8 <keypad_init+0x4a>
        {
            local_err = GPIO_setPinValue((keypad_opj->keypad_row_pins[loop_iterator_rows].port), (keypad_opj->keypad_row_pins[loop_iterator_rows].pin), (keypad_opj->keypad_row_pins[loop_iterator_rows].logic));
        	//local_err = GPIO_setPinValue(PORTD,PIN0,Out_Port_direction);
        }
        for (loop_iterator_columns = 0; loop_iterator_columns < COL_NUMBERS; loop_iterator_columns++)
    2b42:	1a 82       	std	Y+2, r1	; 0x02
    2b44:	24 c0       	rjmp	.+72     	; 0x2b8e <keypad_init+0x100>
        {
            local_err = GPIO_setPin_PUll_UP((keypad_opj->key_pad_columns_pins[loop_iterator_columns].port), (keypad_opj->keypad_row_pins[loop_iterator_columns].pin));
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b4e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b50:	04 96       	adiw	r24, 0x04	; 4
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	f9 01       	movw	r30, r18
    2b5c:	e8 0f       	add	r30, r24
    2b5e:	f9 1f       	adc	r31, r25
    2b60:	40 81       	ld	r20, Z
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	88 2f       	mov	r24, r24
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	2d 81       	ldd	r18, Y+5	; 0x05
    2b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	82 0f       	add	r24, r18
    2b76:	93 1f       	adc	r25, r19
    2b78:	fc 01       	movw	r30, r24
    2b7a:	31 96       	adiw	r30, 0x01	; 1
    2b7c:	90 81       	ld	r25, Z
    2b7e:	84 2f       	mov	r24, r20
    2b80:	69 2f       	mov	r22, r25
    2b82:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <GPIO_setPin_PUll_UP>
    2b86:	8c 83       	std	Y+4, r24	; 0x04
        for (loop_iterator_rows = 0; loop_iterator_rows < ROW_NUMBERS; loop_iterator_rows++)
        {
            local_err = GPIO_setPinValue((keypad_opj->keypad_row_pins[loop_iterator_rows].port), (keypad_opj->keypad_row_pins[loop_iterator_rows].pin), (keypad_opj->keypad_row_pins[loop_iterator_rows].logic));
        	//local_err = GPIO_setPinValue(PORTD,PIN0,Out_Port_direction);
        }
        for (loop_iterator_columns = 0; loop_iterator_columns < COL_NUMBERS; loop_iterator_columns++)
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	8a 83       	std	Y+2, r24	; 0x02
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	84 30       	cpi	r24, 0x04	; 4
    2b92:	c8 f2       	brcs	.-78     	; 0x2b46 <keypad_init+0xb8>
        {
            local_err = GPIO_setPin_PUll_UP((keypad_opj->key_pad_columns_pins[loop_iterator_columns].port), (keypad_opj->keypad_row_pins[loop_iterator_columns].pin));
        }
    }

    return local_err;
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2b96:	26 96       	adiw	r28, 0x06	; 6
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <return_char_keypad>:

Error_state return_char_keypad(KEY_PAD_t *keypad_opj, u8 *r_char)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	29 97       	sbiw	r28, 0x09	; 9
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	9f 83       	std	Y+7, r25	; 0x07
    2bbe:	8e 83       	std	Y+6, r24	; 0x06
    2bc0:	79 87       	std	Y+9, r23	; 0x09
    2bc2:	68 87       	std	Y+8, r22	; 0x08
    u8 loop_iterator_rows = 0;    // output
    2bc4:	1c 82       	std	Y+4, r1	; 0x04
    u8 loop_iterator_columns = 0; // input
    2bc6:	1b 82       	std	Y+3, r1	; 0x03
    Error_state local_err = Unvalid_Port;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_val = NOT_PRESSED;
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	8d 83       	std	Y+5, r24	; 0x05
    keypad_opj = &keypad_opj1;
    2bd0:	89 e8       	ldi	r24, 0x89	; 137
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9f 83       	std	Y+7, r25	; 0x07
    2bd6:	8e 83       	std	Y+6, r24	; 0x06
    if ((NULL == keypad_opj) || (NULL == r_char))
    2bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bda:	9f 81       	ldd	r25, Y+7	; 0x07
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	21 f0       	breq	.+8      	; 0x2be8 <return_char_keypad+0x40>
    2be0:	88 85       	ldd	r24, Y+8	; 0x08
    2be2:	99 85       	ldd	r25, Y+9	; 0x09
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	19 f4       	brne	.+6      	; 0x2bee <return_char_keypad+0x46>
    {
        local_err = NULL_POINTER;
    2be8:	86 e0       	ldi	r24, 0x06	; 6
    2bea:	8a 83       	std	Y+2, r24	; 0x02
    2bec:	97 c0       	rjmp	.+302    	; 0x2d1c <return_char_keypad+0x174>
    }
    else
    {

        for (loop_iterator_rows =0; loop_iterator_rows<ROW_NUMBERS;loop_iterator_rows++)
    2bee:	1c 82       	std	Y+4, r1	; 0x04
    2bf0:	91 c0       	rjmp	.+290    	; 0x2d14 <return_char_keypad+0x16c>
        {
            for (u8 i = 0; i < ROW_NUMBERS; i++)
    2bf2:	19 82       	std	Y+1, r1	; 0x01
    2bf4:	24 c0       	rjmp	.+72     	; 0x2c3e <return_char_keypad+0x96>
            {
                local_err = GPIO_setPinValue((keypad_opj->keypad_row_pins[i].port),(keypad_opj->keypad_row_pins[i].pin),low_value);
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	2e 81       	ldd	r18, Y+6	; 0x06
    2bfe:	3f 81       	ldd	r19, Y+7	; 0x07
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	f9 01       	movw	r30, r18
    2c0a:	e8 0f       	add	r30, r24
    2c0c:	f9 1f       	adc	r31, r25
    2c0e:	40 81       	ld	r20, Z
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	2e 81       	ldd	r18, Y+6	; 0x06
    2c18:	3f 81       	ldd	r19, Y+7	; 0x07
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	82 0f       	add	r24, r18
    2c24:	93 1f       	adc	r25, r19
    2c26:	fc 01       	movw	r30, r24
    2c28:	31 96       	adiw	r30, 0x01	; 1
    2c2a:	90 81       	ld	r25, Z
    2c2c:	84 2f       	mov	r24, r20
    2c2e:	69 2f       	mov	r22, r25
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
    2c36:	8a 83       	std	Y+2, r24	; 0x02
    else
    {

        for (loop_iterator_rows =0; loop_iterator_rows<ROW_NUMBERS;loop_iterator_rows++)
        {
            for (u8 i = 0; i < ROW_NUMBERS; i++)
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	84 30       	cpi	r24, 0x04	; 4
    2c42:	c8 f2       	brcs	.-78     	; 0x2bf6 <return_char_keypad+0x4e>
            {
                local_err = GPIO_setPinValue((keypad_opj->keypad_row_pins[i].port),(keypad_opj->keypad_row_pins[i].pin),low_value);
            }
            GPIO_setPinValue((keypad_opj->keypad_row_pins[loop_iterator_rows].port),(keypad_opj->keypad_row_pins[loop_iterator_rows].pin),high_value);
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c4c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	f9 01       	movw	r30, r18
    2c58:	e8 0f       	add	r30, r24
    2c5a:	f9 1f       	adc	r31, r25
    2c5c:	40 81       	ld	r20, Z
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	2e 81       	ldd	r18, Y+6	; 0x06
    2c66:	3f 81       	ldd	r19, Y+7	; 0x07
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	82 0f       	add	r24, r18
    2c72:	93 1f       	adc	r25, r19
    2c74:	fc 01       	movw	r30, r24
    2c76:	31 96       	adiw	r30, 0x01	; 1
    2c78:	90 81       	ld	r25, Z
    2c7a:	84 2f       	mov	r24, r20
    2c7c:	69 2f       	mov	r22, r25
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 a5 06 	call	0xd4a	; 0xd4a <GPIO_setPinValue>
            for(loop_iterator_columns =0;loop_iterator_columns<COL_NUMBERS;loop_iterator_columns++)
    2c84:	1b 82       	std	Y+3, r1	; 0x03
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <return_char_keypad+0x15e>
            {
                local_err = GPIO_getPIN((keypad_opj->key_pad_columns_pins[loop_iterator_columns].port),(keypad_opj->key_pad_columns_pins[loop_iterator_columns].pin),&local_val);
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c90:	3f 81       	ldd	r19, Y+7	; 0x07
    2c92:	04 96       	adiw	r24, 0x04	; 4
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	f9 01       	movw	r30, r18
    2c9e:	e8 0f       	add	r30, r24
    2ca0:	f9 1f       	adc	r31, r25
    2ca2:	40 81       	ld	r20, Z
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	88 2f       	mov	r24, r24
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	2e 81       	ldd	r18, Y+6	; 0x06
    2cac:	3f 81       	ldd	r19, Y+7	; 0x07
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	82 0f       	add	r24, r18
    2cb8:	93 1f       	adc	r25, r19
    2cba:	fc 01       	movw	r30, r24
    2cbc:	71 96       	adiw	r30, 0x11	; 17
    2cbe:	90 81       	ld	r25, Z
    2cc0:	9e 01       	movw	r18, r28
    2cc2:	2b 5f       	subi	r18, 0xFB	; 251
    2cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc6:	84 2f       	mov	r24, r20
    2cc8:	69 2f       	mov	r22, r25
    2cca:	a9 01       	movw	r20, r18
    2ccc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <GPIO_getPIN>
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
                if (high_value == local_val)
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	81 30       	cpi	r24, 0x01	; 1
    2cd6:	a1 f4       	brne	.+40     	; 0x2d00 <return_char_keypad+0x158>
                {
                        *r_char = keybad_values[loop_iterator_rows][loop_iterator_columns];
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	48 2f       	mov	r20, r24
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	ca 01       	movw	r24, r20
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	82 0f       	add	r24, r18
    2cf0:	93 1f       	adc	r25, r19
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e9 53       	subi	r30, 0x39	; 57
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	e8 85       	ldd	r30, Y+8	; 0x08
    2cfc:	f9 85       	ldd	r31, Y+9	; 0x09
    2cfe:	80 83       	st	Z, r24
            for (u8 i = 0; i < ROW_NUMBERS; i++)
            {
                local_err = GPIO_setPinValue((keypad_opj->keypad_row_pins[i].port),(keypad_opj->keypad_row_pins[i].pin),low_value);
            }
            GPIO_setPinValue((keypad_opj->keypad_row_pins[loop_iterator_rows].port),(keypad_opj->keypad_row_pins[loop_iterator_rows].pin),high_value);
            for(loop_iterator_columns =0;loop_iterator_columns<COL_NUMBERS;loop_iterator_columns++)
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	8f 5f       	subi	r24, 0xFF	; 255
    2d04:	8b 83       	std	Y+3, r24	; 0x03
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	84 30       	cpi	r24, 0x04	; 4
    2d0a:	08 f4       	brcc	.+2      	; 0x2d0e <return_char_keypad+0x166>
    2d0c:	bd cf       	rjmp	.-134    	; 0x2c88 <return_char_keypad+0xe0>
        local_err = NULL_POINTER;
    }
    else
    {

        for (loop_iterator_rows =0; loop_iterator_rows<ROW_NUMBERS;loop_iterator_rows++)
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	8f 5f       	subi	r24, 0xFF	; 255
    2d12:	8c 83       	std	Y+4, r24	; 0x04
    2d14:	8c 81       	ldd	r24, Y+4	; 0x04
    2d16:	84 30       	cpi	r24, 0x04	; 4
    2d18:	08 f4       	brcc	.+2      	; 0x2d1c <return_char_keypad+0x174>
    2d1a:	6b cf       	rjmp	.-298    	; 0x2bf2 <return_char_keypad+0x4a>
                
            }
        }
    }

    return local_err;
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d1e:	29 96       	adiw	r28, 0x09	; 9
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <main>:
#include "../HAL/LCD/LCD.h"

u16 counter = 0;

int main(void)
{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	2b 97       	sbiw	r28, 0x0b	; 11
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
	//TCCR0 = 0b00000100;
	// prescaller 256 then the counter value should be 122
	//TCCR0 = 0b00000101;
	//TIMSK = 0x01;
	// Turn interrupts on
	sei();
    2d44:	78 94       	sei
	init_lcd();
    2d46:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <init_lcd>
	u8 str [] = {"Ahmed"};
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	98 87       	std	Y+8, r25	; 0x08
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	e0 e6       	ldi	r30, 0x60	; 96
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	fa 87       	std	Y+10, r31	; 0x0a
    2d58:	e9 87       	std	Y+9, r30	; 0x09
    2d5a:	f6 e0       	ldi	r31, 0x06	; 6
    2d5c:	fb 87       	std	Y+11, r31	; 0x0b
    2d5e:	e9 85       	ldd	r30, Y+9	; 0x09
    2d60:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d62:	00 80       	ld	r0, Z
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	9a 87       	std	Y+10, r25	; 0x0a
    2d6c:	89 87       	std	Y+9, r24	; 0x09
    2d6e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d70:	f8 85       	ldd	r31, Y+8	; 0x08
    2d72:	00 82       	st	Z, r0
    2d74:	8f 81       	ldd	r24, Y+7	; 0x07
    2d76:	98 85       	ldd	r25, Y+8	; 0x08
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	98 87       	std	Y+8, r25	; 0x08
    2d7c:	8f 83       	std	Y+7, r24	; 0x07
    2d7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d80:	91 50       	subi	r25, 0x01	; 1
    2d82:	9b 87       	std	Y+11, r25	; 0x0b
    2d84:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d86:	ee 23       	and	r30, r30
    2d88:	51 f7       	brne	.-44     	; 0x2d5e <main+0x2e>
	while (1)
	{

		LCD_vidWrite(5);
    2d8a:	85 e0       	ldi	r24, 0x05	; 5
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_vidWrite>
    2d92:	fb cf       	rjmp	.-10     	; 0x2d8a <main+0x5a>

00002d94 <__udivmodqi4>:
    2d94:	99 1b       	sub	r25, r25
    2d96:	79 e0       	ldi	r23, 0x09	; 9
    2d98:	04 c0       	rjmp	.+8      	; 0x2da2 <__udivmodqi4_ep>

00002d9a <__udivmodqi4_loop>:
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	96 17       	cp	r25, r22
    2d9e:	08 f0       	brcs	.+2      	; 0x2da2 <__udivmodqi4_ep>
    2da0:	96 1b       	sub	r25, r22

00002da2 <__udivmodqi4_ep>:
    2da2:	88 1f       	adc	r24, r24
    2da4:	7a 95       	dec	r23
    2da6:	c9 f7       	brne	.-14     	; 0x2d9a <__udivmodqi4_loop>
    2da8:	80 95       	com	r24
    2daa:	08 95       	ret

00002dac <__udivmodhi4>:
    2dac:	aa 1b       	sub	r26, r26
    2dae:	bb 1b       	sub	r27, r27
    2db0:	51 e1       	ldi	r21, 0x11	; 17
    2db2:	07 c0       	rjmp	.+14     	; 0x2dc2 <__udivmodhi4_ep>

00002db4 <__udivmodhi4_loop>:
    2db4:	aa 1f       	adc	r26, r26
    2db6:	bb 1f       	adc	r27, r27
    2db8:	a6 17       	cp	r26, r22
    2dba:	b7 07       	cpc	r27, r23
    2dbc:	10 f0       	brcs	.+4      	; 0x2dc2 <__udivmodhi4_ep>
    2dbe:	a6 1b       	sub	r26, r22
    2dc0:	b7 0b       	sbc	r27, r23

00002dc2 <__udivmodhi4_ep>:
    2dc2:	88 1f       	adc	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	5a 95       	dec	r21
    2dc8:	a9 f7       	brne	.-22     	; 0x2db4 <__udivmodhi4_loop>
    2dca:	80 95       	com	r24
    2dcc:	90 95       	com	r25
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	08 95       	ret

00002dd4 <__prologue_saves__>:
    2dd4:	2f 92       	push	r2
    2dd6:	3f 92       	push	r3
    2dd8:	4f 92       	push	r4
    2dda:	5f 92       	push	r5
    2ddc:	6f 92       	push	r6
    2dde:	7f 92       	push	r7
    2de0:	8f 92       	push	r8
    2de2:	9f 92       	push	r9
    2de4:	af 92       	push	r10
    2de6:	bf 92       	push	r11
    2de8:	cf 92       	push	r12
    2dea:	df 92       	push	r13
    2dec:	ef 92       	push	r14
    2dee:	ff 92       	push	r15
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	ca 1b       	sub	r28, r26
    2dfe:	db 0b       	sbc	r29, r27
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	09 94       	ijmp

00002e0c <__epilogue_restores__>:
    2e0c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e0e:	39 88       	ldd	r3, Y+17	; 0x11
    2e10:	48 88       	ldd	r4, Y+16	; 0x10
    2e12:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e14:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e16:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e18:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e1e:	b9 84       	ldd	r11, Y+9	; 0x09
    2e20:	c8 84       	ldd	r12, Y+8	; 0x08
    2e22:	df 80       	ldd	r13, Y+7	; 0x07
    2e24:	ee 80       	ldd	r14, Y+6	; 0x06
    2e26:	fd 80       	ldd	r15, Y+5	; 0x05
    2e28:	0c 81       	ldd	r16, Y+4	; 0x04
    2e2a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e2c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2e30:	ce 0f       	add	r28, r30
    2e32:	d1 1d       	adc	r29, r1
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	ed 01       	movw	r28, r26
    2e40:	08 95       	ret

00002e42 <_exit>:
    2e42:	f8 94       	cli

00002e44 <__stop_program>:
    2e44:	ff cf       	rjmp	.-2      	; 0x2e44 <__stop_program>
